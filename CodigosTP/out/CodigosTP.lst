
examples/c/sapi/TP_PCSE_GustavoParedes/CodigosTP/out/CodigosTP.elf:     file format elf32-littlearm
examples/c/sapi/TP_PCSE_GustavoParedes/CodigosTP/out/CodigosTP.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000921

Program Header:
0x70000001 off    0x0001a074 vaddr 0x1a00a074 paddr 0x1a00a074 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003654 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x0000a07c memsz 0x0000a07c flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a00a07c align 2**16
         filesz 0x00000104 memsz 0x00000104 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a070  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  10000000  1a00a07c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020104  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020104  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020104  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020104  2**2
                  CONTENTS
  6 .bss          0000354c  10000108  10000108  00000108  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020104  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020104  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020104  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020104  2**2
                  CONTENTS
 11 .init_array   00000004  1a00a070  1a00a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a00a074  1a00a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020104  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020104  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020104  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020104  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020104  2**2
                  CONTENTS
 18 .noinit       00000000  10003654  10003654  00020104  2**2
                  CONTENTS
 19 .debug_info   0003826d  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000720a  00000000  00000000  00058371  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00014ae8  00000000  00000000  0005f57b  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001608  00000000  00000000  00074063  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000016d8  00000000  00000000  0007566b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00012eec  00000000  00000000  00076d43  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001a33a  00000000  00000000  00089c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00035965  00000000  00000000  000a3f69  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000d98ce  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000d994d  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00004324  00000000  00000000  000d9984  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000108 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00a070 l    d  .init_array	00000000 .init_array
1a00a074 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003654 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 funciones.c
00000000 l    df *ABS*	00000000 CodigosTP.c
10000108 l     O .bss	00000250 fp
10000358 l     O .bss	00000238 fs
00000000 l    df *ABS*	00000000 ciaaI2C.c
00000000 l    df *ABS*	00000000 system.c
10000594 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 ff.c
1a000a74 l     F .text	0000000a ld_word
1a000a7e l     F .text	00000016 ld_dword
1a000a94 l     F .text	000000a8 ld_qword
1a000b3c l     F .text	00000008 st_word
1a000b44 l     F .text	00000014 st_dword
1a000b58 l     F .text	00000026 st_qword
1a000b7e l     F .text	00000012 mem_cpy
1a000b90 l     F .text	0000000a mem_set
1a000b9a l     F .text	0000001e mem_cmp
1a000bb8 l     F .text	00000010 chk_chr
1a000bc8 l     F .text	00000004 dbc_1st
1a000bcc l     F .text	000000c0 tchar2uni
1a000c8c l     F .text	00000018 clst2sect
1a000ca4 l     F .text	00000026 ld_clust
1a000cca l     F .text	00000026 st_clust
1a000cf0 l     F .text	00000088 pick_lfn
1a000d78 l     F .text	00000078 put_lfn
1a000df0 l     F .text	000000b0 gen_numname
1a000ea0 l     F .text	0000001c sum_sfn
1a000ebc l     F .text	00000030 xdir_sum
1a000eec l     F .text	0000002e init_alloc_info
1a000f1c l     F .text	000000b0 get_ldnumber
1a000fcc l     F .text	00000048 validate
1a001014 l     F .text	00000050 sync_window
1a001064 l     F .text	00000034 move_window
1a001098 l     F .text	00000084 check_fs
1a00111c l     F .text	000004b4 find_volume
1a0015d0 l     F .text	00000086 find_bitmap
1a001656 l     F .text	00000078 change_bitmap
1a0016ce l     F .text	0000011e put_fat
1a0017ec l     F .text	00000030 fill_last_frag
1a00181c l     F .text	00000032 fill_first_frag
1a00184e l     F .text	00000172 get_fat
1a0019c0 l     F .text	000000b4 dir_sdi
1a001a74 l     F .text	000001cc create_chain
1a001c40 l     F .text	0000013e remove_chain
1a001d7e l     F .text	00000052 dir_clear
1a001dd0 l     F .text	000000dc dir_next
1a001eac l     F .text	00000100 load_xdir
1a001fac l     F .text	0000003a load_obj_xdir
1a001fe6 l     F .text	000000ea dir_read
1a0020d0 l     F .text	0000006c dir_alloc
1a00213c l     F .text	0000005e store_xdir
1a00219c l     F .text	00000244 create_name
1a0023e0 l     F .text	00000036 xname_sum
1a002416 l     F .text	00000082 create_xdir
1a002498 l     F .text	000000a4 cmp_lfn
1a00253c l     F .text	0000015c dir_find
1a002698 l     F .text	000000b4 follow_path
1a00274c l     F .text	00000208 dir_register
1a002954 l     F .text	0000008c sync_fs
10000598 l     O .bss	00000260 DirBuf
100007f8 l     O .bss	00000008 FatFs
10000800 l     O .bss	00000002 Fsid
10000804 l     O .bss	00000200 LfnBuf
1a00961c l     O .text	00000080 ExCvt
1a00969c l     O .text	0000000d LfnOfs
1a0096ac l     O .text	00000008 VolumeStr
00000000 l    df *ABS*	00000000 ffunicode.c
1a0096e8 l     O .text	000001f2 cvt1.5491
1a0098dc l     O .text	000000bc cvt2.5492
1a009998 l     O .text	00000100 uc850
00000000 l    df *ABS*	00000000 heap_2.c
1a00318c l     F .text	0000002c prvHeapInit
10000a04 l     O .bss	00002000 ucHeap
10002a04 l     O .bss	00000008 xEnd
10002a0c l     O .bss	00000004 xHeapHasBeenInitialised.11449
10002a10 l     O .bss	00000008 xStart
10000004 l     O .data	00000004 xFreeBytesRemaining
00000000 l    df *ABS*	00000000 queue.c
1a0032b0 l     F .text	0000001e prvIsQueueFull
1a0032ce l     F .text	0000001a prvIsQueueEmpty
1a0032e8 l     F .text	00000076 prvCopyDataToQueue
1a00335e l     F .text	00000024 prvCopyDataFromQueue
1a003382 l     F .text	0000006e prvUnlockQueue
1a003474 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002a18 l     O .bss	00000168 uxIdleTaskStack.10728
10002b80 l     O .bss	000005a0 uxTimerTaskStack.10735
10003120 l     O .bss	00000060 xIdleTaskTCB.10727
10003180 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a003a54 l     F .text	0000002c prvResetNextTaskUnblockTime
1a003a80 l     F .text	00000092 prvInitialiseNewTask
1a003b14 l     F .text	00000068 prvInitialiseTaskLists
1a003b7c l     F .text	000000ac prvAddNewTaskToReadyList
1a003c28 l     F .text	00000038 prvDeleteTCB
1a003c60 l     F .text	0000004c prvCheckTasksWaitingTermination
1a003cac l     F .text	00000028 prvIdleTask
1a003cd4 l     F .text	00000098 prvAddCurrentTaskToDelayedList
100031e4 l     O .bss	00000004 pxDelayedTaskList
100031e8 l     O .bss	00000004 pxOverflowDelayedTaskList
100031ec l     O .bss	0000008c pxReadyTasksLists
10003278 l     O .bss	00000004 uxCurrentNumberOfTasks
1000327c l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10003280 l     O .bss	00000004 uxPendedTicks
10003284 l     O .bss	00000004 uxSchedulerSuspended
10003288 l     O .bss	00000004 uxTaskNumber
1000328c l     O .bss	00000004 uxTopReadyPriority
10003290 l     O .bss	00000014 xDelayedTaskList1
100032a4 l     O .bss	00000014 xDelayedTaskList2
100032b8 l     O .bss	00000004 xNextTaskUnblockTime
100032bc l     O .bss	00000004 xNumOfOverflows
100032c0 l     O .bss	00000014 xPendingReadyList
100032d4 l     O .bss	00000004 xSchedulerRunning
100032d8 l     O .bss	00000014 xSuspendedTaskList
100032ec l     O .bss	00000014 xTasksWaitingTermination
10003300 l     O .bss	00000004 xTickCount
10003304 l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a0044d4 l     F .text	00000020 prvGetNextExpireTime
1a0044f4 l     F .text	00000048 prvInsertTimerInActiveList
1a00453c l     F .text	00000070 prvCheckForValidListAndQueue
1a0045ac l     F .text	00000040 prvInitialiseNewTimer
1a00497c l     F .text	00000016 prvTimerTask
1a004708 l     F .text	00000078 prvSwitchTimerLists
1a004780 l     F .text	0000002c prvSampleTimeNow
1a0047ac l     F .text	00000060 prvProcessExpiredTimer
1a00480c l     F .text	00000074 prvProcessTimerOrBlockTask
1a004880 l     F .text	000000fc prvProcessReceivedCommands
10003308 l     O .bss	00000004 pxCurrentTimerList
1000330c l     O .bss	00000004 pxOverflowTimerList
10003310 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
100033b0 l     O .bss	00000014 xActiveTimerList1
100033c4 l     O .bss	00000014 xActiveTimerList2
100033d8 l     O .bss	00000004 xLastTime.11777
100033dc l     O .bss	00000050 xStaticTimerQueue.11827
1000342c l     O .bss	00000004 xTimerQueue
10003430 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a004994 l     F .text	00000040 prvTaskExitError
1a0049d4 l     F .text	00000022 prvPortStartFirstTask
1a0049fc l     F .text	0000000e vPortEnableVFP
1a004a60 l       .text	00000000 pxCurrentTCBConst2
1a004b40 l       .text	00000000 pxCurrentTCBConst
10003434 l     O .bss	00000001 ucMaxSysCallPriority
10003438 l     O .bss	00000004 ulMaxPRIGROUPValue
10000008 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 fssdc.c
1a004d14 l     F .text	00000018 newCardStatus
1a004d2c l     F .text	00000004 chk_power
1a004d30 l     F .text	00000024 SSPSend
1a004d54 l     F .text	00000018 xmit_spi
1a004d90 l     F .text	0000001c rcvr_spi
1a004dac l     F .text	00000024 wait_ready
1a004dd0 l     F .text	00000018 deselect
1a004de8 l     F .text	00000024 select_
1a004e0c l     F .text	00000084 send_cmd
1a004e90 l     F .text	0000005c xmit_datablock
1a004eec l     F .text	00000060 rcvr_datablock
1000343c l     O .bss	00000001 CardType
1000343d l     O .bss	00000001 Timer1
1000343e l     O .bss	00000001 Timer2
10003440 l     O .bss	00000004 g_statusUpdateCallback
1000000c l     O .data	00000001 g_cardStatus
1000000d l     O .data	00000001 g_diskStats
10000010 l     O .data	00000004 g_spiFastClock
10000014 l     O .data	00000004 g_spiSlowClock
00000000 l    df *ABS*	00000000 ffdisks.c
00000000 l    df *ABS*	00000000 board.c
1a00566c l     F .text	00000044 Board_LED_Init
1a0056b0 l     F .text	00000040 Board_TEC_Init
1a0056f0 l     F .text	00000040 Board_GPIO_Init
1a005730 l     F .text	00000030 Board_ADC_Init
1a005760 l     F .text	00000038 Board_SPI_Init
1a005798 l     F .text	00000024 Board_I2C_Init
1a009ccc l     O .text	00000008 GpioButtons
1a009cd4 l     O .text	0000000c GpioLeds
1a009ce0 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a009cf8 l     O .text	00000004 InitClkStates
1a009cfc l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00591c l     F .text	0000002c Chip_UART_GetIndex
1a009d70 l     O .text	00000008 UART_BClock
1a009d78 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a005ac4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a005ad8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a005b8c l     F .text	000000a4 pll_calc_divs
1a005c30 l     F .text	0000010c pll_get_frac
1a005d3c l     F .text	0000004c Chip_Clock_FindBaseClock
1a005fb0 l     F .text	00000022 Chip_Clock_GetDivRate
10003444 l     O .bss	00000008 audio_usb_pll_freq
1a009d8c l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a009df8 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000001c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a006718 l     F .text	0000001a SSP_Write2BFifo
1a006732 l     F .text	00000018 SSP_Write1BFifo
1a00674a l     F .text	00000042 SSP_Read2BFifo
1a00678c l     F .text	00000040 SSP_Read1BFifo
1a0067cc l     F .text	00000014 Chip_SSP_GetClockIndex
1a0067e0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000054 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a009e40 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_rtc.c
1000344c l     O .bss	00000001 init.11554
00000000 l    df *ABS*	00000000 sapi_tick.c
10003450 l     O .bss	00000004 callBackFuncParams
10003458 l     O .bss	00000008 tickCounter
10003460 l     O .bss	00000004 tickHookFunction
10003464 l     O .bss	00000030 tickerObject.11826
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a006c00 l     F .text	00000030 i2cHardwareInit
1a006c30 l     F .text	0000003c i2cHardwareRead
1a006c6c l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a006cf8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10003494 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_imu_mpu9250.c
1a007060 l     F .text	00000080 mpu9250InitializeControlStructure
1a0070e0 l     F .text	00000034 mpu9250ReadRegisters
1a007114 l     F .text	00000020 mpu9250WhoAmI
1a007134 l     F .text	0000004c mpu9250WriteRegister
1a007180 l     F .text	0000005c mpu9250ReadAK8963Registers
1a0071dc l     F .text	00000020 mpu9250WhoAmIAK8963
1a0071fc l     F .text	00000078 mpu9250WriteAK8963Register
1a007274 l     F .text	00000094 mpu9250SetGyroRange
1a007308 l     F .text	000000f8 mpu9250SetDlpfBandwidth
1a007400 l     F .text	000000b4 mpu9250SetSrd
1a007760 l     F .text	0000015c mpu9250CalibrateGyro
10003498 l     O .bss	00000158 control
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a007b70 l     F .text	00000010 clearInterrupt
1a007b80 l     F .text	0000005c serveInterrupt
10000058 l     O .data	00000048 ultrasonicSensors
1a009fd4 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a0088ec l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a008b4c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
100000a4 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a00a074 l       .init_array	00000000 __init_array_end
1a00a070 l       .bss_RAM5	00000000 __preinit_array_end
1a00a070 l       .init_array	00000000 __init_array_start
1a00a070 l       .bss_RAM5	00000000 __preinit_array_start
1a005dd4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0009c0 g     F .text	00000012 _isatty_r
1a006244 g     F .text	0000000e Chip_I2CM_Xfer
1a0085fa g     F .text	00000010 strcpy
1a008514 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a0069b0 g     F .text	00000014 uartRxRead
1a006ca8 g     F .text	0000000e i2cInit
1a0009d2 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a004f4c g     F .text	0000000c FSSDC_FatFs_DiskStatus
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a004aa8 g     F .text	0000002c vPortExitCritical
1a007f18 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a006a54 g     F .text	0000001e uartReadByte
1a0084e4 g     F .text	00000030 printf
1a005862 g     F .text	00000008 __stdio_init
1a0062de g     F .text	0000002e Chip_RTC_GetFullTime
1a009136 g     F .text	00000024 __sseek
1a00896c g     F .text	00000060 __sinit
1a00860c g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a00393c g     F .text	00000052 vQueueWaitForMessageRestricted
1a0064ec g     F .text	00000120 handleMasterXferState
1a008940 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a005b7e g     F .text	0000000c Chip_ADC_SetResolution
1a008b4a g     F .text	00000002 __malloc_unlock
1a005810 g     F .text	00000014 Board_UARTPutSTR
1a004b44 g     F .text	0000002c SysTick_Handler
1a00599c g     F .text	00000040 Chip_UART_SetBaud
1a00091c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0057f4 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a004ae0 g     F .text	00000064 PendSV_Handler
1a0036f0 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a00a07c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a006cb6 g     F .text	00000028 i2cRead
100031e0 g     O .bss	00000004 pxCurrentTCB
1a0009b6 g     F .text	0000000a _fstat_r
53ff6f6e g       *ABS*	00000000 __valid_user_code_checksum
1a00a07c g       .ARM.exidx	00000000 _etext
1a006adc g     F .text	00000034 rtcRead
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0030f0 g     F .text	0000009c ff_wtoupper
1a004360 g     F .text	00000018 vTaskInternalSetTimeOutState
10000000 g     O .data	00000001 addrIMU
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a006052 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a004ba8 g     F .text	00000110 xPortStartScheduler
1a00836c g     F .text	00000016 memcpy
1a00426c g     F .text	00000030 vTaskPlaceOnEventList
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a008934 g     F .text	0000000c _cleanup_r
1a007ea0 g     F .text	00000022 .hidden __floatsidf
1a004b70  w    F .text	00000038 vPortSetupTimerInterrupt
1a006698 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a00560a g     F .text	0000000e disk_initialize
1a008014 g     F .text	00000000 .hidden __aeabi_uldivmod
10003654 g       .noinit	00000000 _noinit
1a0085cc g     F .text	00000010 puts
1a00326c g     F .text	00000044 vPortFree
10003644 g     O .bss	00000004 SystemCoreClock
1a005948 g     F .text	00000054 Chip_UART_Init
1a006b74 g     F .text	00000034 tickerCallback
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a00835c g     F .text	00000010 malloc
1a004cb8 g     F .text	0000005c vPortValidateInterruptPriority
1a000180  w    F .text	00000002 UsageFault_Handler
1a0060e8 g     F .text	0000004c Chip_Clock_GetRate
1a0039aa g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0055fc g     F .text	0000000e disk_status
1a0058a4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a007e80 g     F .text	0000001e .hidden __aeabi_ui2d
1a006668 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a008044 g     F .text	000002cc .hidden __udivmoddi4
1a007bfc g     F .text	00000000 .hidden __aeabi_drsub
1a0078bc g     F .text	000002b4 mpu9250Init
1a000a54 g     F .text	00000020 _sbrk_r
1a009cc8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0009dc g     F .text	0000004e _read_r
1a0039a4 g     F .text	00000006 vListInitialiseItem
1a005658 g     F .text	00000012 disk_ioctl
1a007be6 g     F .text	0000000a GPIO1_IRQHandler
1a0037bc g     F .text	00000158 xQueueReceive
10003604 g     O .bss	00000040 xQueueRegistry
1a007ec4 g     F .text	00000042 .hidden __extendsfdf2
1a003a38 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a007c08 g     F .text	00000276 .hidden __adddf3
1a006980 g     F .text	00000018 uartRxReady
1a00a074 g       .ARM.exidx	00000000 __exidx_start
1a006b40 g     F .text	00000034 rtcInit
1a0002fc g     O .text	00000004 CRP_WORD
1a00a038 g     O .text	00000004 _global_impure_ptr
1a005190 g     F .text	000000b4 FSSDC_FatFs_DiskWrite
10000018 g     O .data	00000004 VolToPart
1a008314 g     F .text	00000048 __libc_init_array
1a007e80 g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0031b8 g     F .text	000000b4 pvPortMalloc
1a005824 g     F .text	0000002c Board_Init
1a0009aa  w    F .text	00000002 _init
1a00398e g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a00680a g     F .text	000000aa Chip_SSP_RWFrames_Blocking
1a007f74 g     F .text	0000009e .hidden __aeabi_d2f
1a003ee8 g     F .text	0000000c xTaskGetTickCount
1a003574 g     F .text	0000017c xQueueGenericSend
1a0030b0 g     F .text	00000040 ff_uni2oem
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003654 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00510c g     F .text	00000084 FSSDC_FatFs_DiskRead
1a000920 g     F .text	00000088 Reset_Handler
1a006ba8 g     F .text	0000004c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a005244 g     F .text	000002e8 FSSDC_FatFs_DiskIoCtl
1a006252 g     F .text	00000024 Chip_I2CM_XferBlocking
1a006630 g     F .text	00000038 Chip_I2C_SetClockRate
1a004424 g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a005d88 g     F .text	0000004c Chip_Clock_EnableCrystal
1a004f58 g     F .text	000001b4 FSSDC_FatFs_DiskInitialize
1a0062b0 g     F .text	0000002e Chip_RTC_SetFullTime
1a00552c g     F .text	00000060 FSSDC_InitSPI
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0042d4 g     F .text	0000008c xTaskRemoveFromEventList
1a003a52 g     F .text	00000002 vApplicationMallocFailedHook
1a007c08 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a0085dc g     F .text	0000001e strcat
1a006298 g     F .text	00000018 Chip_RTC_Enable
1a007f08 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a009fd8 g     O .text	00000020 __sf_fake_stderr
1a000300 g     F .text	00000030 cargaMsj
1a00660c g     F .text	00000024 Chip_I2C_Init
1a0005c8 g     F .text	00000018 TaskdiskTickHook
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a005f44 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a006276 g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a009e94 g     O .text	00000140 gpioPinsInit
1a006a72 g     F .text	0000001a uartWriteByte
1a0067f8 g     F .text	00000012 Chip_SSP_SetClockRate
1a008b7a g     F .text	00000024 __sfputs_r
1a007bf0 g     F .text	0000000a GPIO2_IRQHandler
1a009170 g     F .text	00000000 memchr
1a004378 g     F .text	00000080 xTaskCheckForTimeOut
1a008394 g     F .text	0000009c _free_r
1a00602c g     F .text	00000026 Chip_Clock_GetBaseClock
1a0055f4 g     F .text	00000008 disk_timerproc
10000108 g       .bss	00000000 _bss
1a005b4c g     F .text	00000032 Chip_ADC_SetSampleRate
1a003088 g     F .text	00000028 f_close
1a007c04 g     F .text	0000027a .hidden __aeabi_dsub
1a003ed8 g     F .text	00000010 vTaskSuspendAll
1a0008f8 g     F .text	00000024 ciaaI2CInit
1a007f08 g     F .text	0000006a .hidden __floatundidf
1a004d6c g     F .text	00000024 SSPReceive
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a0068b4 g     F .text	0000003e Chip_SSP_SetBitRate
1a0039f6 g     F .text	00000028 uxListRemove
1a007748 g     F .text	0000000c mpu9250GetGyroY_rads
1a006374 g     F .text	00000002 Chip_GPIO_Init
1a009cf4 g     O .text	00000004 OscRateIn
1a000608 g     F .text	000000ec TaskWriteData
1a0069d8 g     F .text	0000007c uartInit
1a003d6c g     F .text	00000072 xTaskCreateStatic
10003654 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0041a4 g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000450 g     F .text	00000178 TareaTXRXBluetooth
1a003496 g     F .text	00000090 xQueueGenericCreateStatic
1a00429c g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
1a0009ac g     F .text	0000000a _close_r
1a007ea0 g     F .text	00000022 .hidden __aeabi_i2d
1a006d2c g     F .text	00000194 gpioInit
1a003a20 g     F .text	00000018 vApplicationGetIdleTaskMemory
1a00632c g     F .text	00000048 Chip_RTC_Init
1a00469c g     F .text	0000006c xTimerGenericCommand
1a0086b0 g     F .text	000000dc __swsetup_r
1a003a50 g     F .text	00000002 vApplicationStackOverflowHook
1a008310  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0089cc g     F .text	00000078 __sfp
1a0090dc g     F .text	00000022 __sread
1a0055b8 g     F .text	0000003c get_fattime
1a006f18 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a008b48 g     F .text	00000002 __malloc_lock
1a0057e0 g     F .text	00000014 Board_UARTPutChar
100035f8 g     O .bss	00000008 rtc
1a0066c8 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a008898 g     F .text	00000054 _fflush_r
1a009ff8 g     O .text	00000020 __sf_fake_stdin
1a005df0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a008382 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0006f4 g     F .text	00000204 main
1a002f28 g     F .text	00000160 f_sync
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a006a8c g     F .text	00000050 spiInit
1a0039c2 g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a004a40 g     F .text	00000024 SVC_Handler
1a00915a g     F .text	00000008 __sclose
1a0045ec g     F .text	00000064 xTimerCreateTimerTask
1a007f74 g     F .text	0000009e .hidden __truncdfsf2
1a008430 g     F .text	000000b4 _malloc_r
1a007f18 g     F .text	0000005a .hidden __aeabi_l2d
1a006998 g     F .text	00000018 uartTxReady
1a0029e0 g     F .text	00000050 f_mount
1a004100 g     F .text	000000a4 vTaskDelayUntil
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a006060 g     F .text	0000003c Chip_Clock_EnableOpts
1a00585a g     F .text	00000008 __stdio_getchar
1a003526 g     F .text	0000004e xQueueGenericCreate
1a005e0c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a005ec4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00692c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a007028 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0060d0 g     F .text	00000018 Chip_Clock_RTCEnable
1a006ec0 g     F .text	00000056 gpioWrite
1a0009a8  w    F .text	00000002 _fini
1a0084e4 g     F .text	00000030 iprintf
1a00400c g     F .text	000000f4 xTaskResumeAll
1a003e44 g     F .text	00000094 vTaskStartScheduler
1a005b0c g     F .text	00000040 Chip_ADC_Init
1a000330 g     F .text	00000120 nombreArchivo
10003650 g     O .bss	00000004 g_pUsbApi
1a00586c g     F .text	00000038 Board_SetupMuxing
1a006b10 g     F .text	00000030 rtcWrite
1a0059dc g     F .text	000000e8 Chip_UART_SetBaudFDR
1a006bf4 g     F .text	0000000c tickRead
1a000a2a g     F .text	00000028 _write_r
10003648 g     O .bss	00000008 tickRateMS
1a0074b4 g     F .text	00000288 mpu9250Read
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a008dcc g     F .text	000000ea _printf_common
100000a0 g     O .data	00000004 _impure_ptr
1a00878c g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0069c4 g     F .text	00000014 uartTxWrite
10000590 g     O .bss	00000001 grabar
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a006148 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a0043f8 g     F .text	0000000c vTaskMissedYield
10003654 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0005e0 g     F .text	00000028 TareaRX_RTC
1a0068f4 g     F .text	00000038 Chip_SSP_Init
1a0066e0 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a003914 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a003ef4 g     F .text	00000118 xTaskIncrementTick
1a008a80 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a006cde g     F .text	00000018 i2cWrite
1a0057bc g     F .text	00000024 Board_Debug_Init
1a005850 g     F .text	0000000a __stdio_putchar
1a0033f0 g     F .text	00000084 xQueueGenericReset
10000104 g       .data	00000000 _edata
1a0064cc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a002ce8 g     F .text	00000240 f_write
10003600 g     O .bss	00000004 cola
1a003dde g     F .text	00000066 xTaskCreate
1a006378 g     F .text	00000154 Chip_SetupCoreClock
1a007754 g     F .text	0000000c mpu9250GetGyroZ_rads
1a0090fe g     F .text	00000038 __swrite
1a007bdc g     F .text	0000000a GPIO0_IRQHandler
1a002a30 g     F .text	000002b8 f_open
1a005638 g     F .text	00000020 disk_write
1a008ba0 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a008a44 g     F .text	0000003c _fwalk_reent
1a006134 g     F .text	00000014 SystemCoreClockUpdate
1a00630c g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00a018 g     O .text	00000020 __sf_fake_stdout
1a004404 g     F .text	00000020 xTaskGetSchedulerState
1a008310  w    F .text	00000002 .hidden __aeabi_idiv0
10000591 g     O .bss	00000001 val_RTC
1a00017e  w    F .text	00000002 BusFault_Handler
1a008ac8 g     F .text	00000080 __smakebuf_r
1a005618 g     F .text	00000020 disk_read
1a004a10 g     F .text	0000002c pxPortInitialiseStack
1a008eb8 g     F .text	00000224 _printf_i
1a00609c g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100035f4 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a004650 g     F .text	0000004c xTimerCreateStatic
1a00773c g     F .text	0000000c mpu9250GetGyroX_rads
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a007ec4 g     F .text	00000042 .hidden __aeabi_f2d
1a006f34 g     F .text	000000f4 boardInit
1a004a64 g     F .text	00000044 vPortEnterCritical
100035f0 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a007c04 g     F .text	0000027a .hidden __subdf3
1a008ba0 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00558c g     F .text	0000002c FSSDC_Update
1a005fd4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a006964 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a005910 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 21 09 00 1a 79 01 00 1a 7b 01 00 1a     ....!...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 6e 6f ff 53     }...........no.S
	...
1a00002c:	41 4a 00 1a 85 01 00 1a 00 00 00 00 e1 4a 00 1a     AJ...........J..
1a00003c:	45 4b 00 1a                                         EK..

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	19 6f 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .o..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	dd 7b 00 1a e7 7b 00 1a f1 7b 00 1a bb 01 00 1a     .{...{...{......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a00a07c 	.word	0x1a00a07c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000104 	.word	0x00000104
1a000120:	1a00a07c 	.word	0x1a00a07c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00a07c 	.word	0x1a00a07c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00a07c 	.word	0x1a00a07c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00a07c 	.word	0x1a00a07c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000108 	.word	0x10000108
1a000154:	0000354c 	.word	0x0000354c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <cargaMsj>:
void cargaMsj(uint8_t *msj){
	// Carga en el arreglo la linea a grabar
	// X=A Z=B Y=C
	// Deberian haber ido los datos de Pitch, Roll y Azimuth del Giroscopio del TP.

  	msj[0]=88;  //X
1a000300:	2358      	movs	r3, #88	; 0x58
1a000302:	7003      	strb	r3, [r0, #0]
  	msj[1]=61;  //=
1a000304:	233d      	movs	r3, #61	; 0x3d
1a000306:	7043      	strb	r3, [r0, #1]
  	msj[2]=65;   //A
1a000308:	2241      	movs	r2, #65	; 0x41
1a00030a:	7082      	strb	r2, [r0, #2]
  	msj[3]=32;  //" "
1a00030c:	2220      	movs	r2, #32
1a00030e:	70c2      	strb	r2, [r0, #3]
  	msj[4]=89;  //Y
1a000310:	2159      	movs	r1, #89	; 0x59
1a000312:	7101      	strb	r1, [r0, #4]
  	msj[5]=61;  //=
1a000314:	7143      	strb	r3, [r0, #5]
  	msj[6]=66;  //B
1a000316:	2142      	movs	r1, #66	; 0x42
1a000318:	7181      	strb	r1, [r0, #6]
  	msj[7]=32;  //" "
1a00031a:	71c2      	strb	r2, [r0, #7]
  	msj[8]=90;  //Z
1a00031c:	225a      	movs	r2, #90	; 0x5a
1a00031e:	7202      	strb	r2, [r0, #8]
  	msj[9]=61;  //=
1a000320:	7243      	strb	r3, [r0, #9]
  	msj[10]=67; //C
1a000322:	2343      	movs	r3, #67	; 0x43
1a000324:	7283      	strb	r3, [r0, #10]
   	msj[11]=13; //\r
1a000326:	230d      	movs	r3, #13
1a000328:	72c3      	strb	r3, [r0, #11]
  	msj[12]=10; //\n
1a00032a:	230a      	movs	r3, #10
1a00032c:	7303      	strb	r3, [r0, #12]
  }
1a00032e:	4770      	bx	lr

1a000330 <nombreArchivo>:

 void nombreArchivo(uint8_t *msj){
1a000330:	b570      	push	{r4, r5, r6, lr}
1a000332:	b08a      	sub	sp, #40	; 0x28
1a000334:	4604      	mov	r4, r0

 	int8_t filename[40]="SDC:/";
1a000336:	4b42      	ldr	r3, [pc, #264]	; (1a000440 <nombreArchivo+0x110>)
1a000338:	e893 0003 	ldmia.w	r3, {r0, r1}
1a00033c:	9000      	str	r0, [sp, #0]
1a00033e:	f8ad 1004 	strh.w	r1, [sp, #4]
1a000342:	2222      	movs	r2, #34	; 0x22
1a000344:	2100      	movs	r1, #0
1a000346:	f10d 0006 	add.w	r0, sp, #6
1a00034a:	f008 f81a 	bl	1a008382 <memset>

 	msj[0]='X';
1a00034e:	2358      	movs	r3, #88	; 0x58
1a000350:	7023      	strb	r3, [r4, #0]
 	msj[1]='Y';
1a000352:	2359      	movs	r3, #89	; 0x59
1a000354:	7063      	strb	r3, [r4, #1]
 	msj[2]='Z';
1a000356:	235a      	movs	r3, #90	; 0x5a
1a000358:	70a3      	strb	r3, [r4, #2]
 	msj[3]='_';
1a00035a:	205f      	movs	r0, #95	; 0x5f
1a00035c:	70e0      	strb	r0, [r4, #3]
 	msj[4]=50;  //Año 20xx
1a00035e:	2332      	movs	r3, #50	; 0x32
1a000360:	7123      	strb	r3, [r4, #4]
 	msj[5]=48;
1a000362:	2330      	movs	r3, #48	; 0x30
1a000364:	7163      	strb	r3, [r4, #5]
 	msj[6]=((rtc.year-2000)/10)+48;
1a000366:	4937      	ldr	r1, [pc, #220]	; (1a000444 <nombreArchivo+0x114>)
1a000368:	880d      	ldrh	r5, [r1, #0]
1a00036a:	f5a5 65fa 	sub.w	r5, r5, #2000	; 0x7d0
1a00036e:	4a36      	ldr	r2, [pc, #216]	; (1a000448 <nombreArchivo+0x118>)
1a000370:	fb82 3205 	smull	r3, r2, r2, r5
1a000374:	17eb      	asrs	r3, r5, #31
1a000376:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
1a00037a:	f103 0230 	add.w	r2, r3, #48	; 0x30
1a00037e:	71a2      	strb	r2, [r4, #6]
 	msj[7]=((rtc.year-2000)%10)+48;
1a000380:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000384:	005a      	lsls	r2, r3, #1
1a000386:	1aaa      	subs	r2, r5, r2
1a000388:	3230      	adds	r2, #48	; 0x30
1a00038a:	71e2      	strb	r2, [r4, #7]

 	msj[8]=95;   //guion bajo
1a00038c:	7220      	strb	r0, [r4, #8]

 	msj[9]=(rtc.month/10)+48;  //Mes
1a00038e:	788d      	ldrb	r5, [r1, #2]
1a000390:	4b2e      	ldr	r3, [pc, #184]	; (1a00044c <nombreArchivo+0x11c>)
1a000392:	fba3 6205 	umull	r6, r2, r3, r5
1a000396:	08d2      	lsrs	r2, r2, #3
1a000398:	f102 0630 	add.w	r6, r2, #48	; 0x30
1a00039c:	7266      	strb	r6, [r4, #9]
 	msj[10]=(rtc.month%10)+48;
1a00039e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0003a2:	0056      	lsls	r6, r2, #1
1a0003a4:	1bad      	subs	r5, r5, r6
1a0003a6:	3530      	adds	r5, #48	; 0x30
1a0003a8:	72a5      	strb	r5, [r4, #10]

 	msj[11]=95;   //guion bajo
1a0003aa:	72e0      	strb	r0, [r4, #11]

 	msj[12]=(rtc.mday/10)+48;   //dia
1a0003ac:	78cd      	ldrb	r5, [r1, #3]
1a0003ae:	fba3 6205 	umull	r6, r2, r3, r5
1a0003b2:	08d2      	lsrs	r2, r2, #3
1a0003b4:	f102 0630 	add.w	r6, r2, #48	; 0x30
1a0003b8:	7326      	strb	r6, [r4, #12]
 	msj[13]=(rtc.mday%10)+48;
1a0003ba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0003be:	0056      	lsls	r6, r2, #1
1a0003c0:	1bad      	subs	r5, r5, r6
1a0003c2:	3530      	adds	r5, #48	; 0x30
1a0003c4:	7365      	strb	r5, [r4, #13]

 	msj[14]=95;   //guion bajo
1a0003c6:	73a0      	strb	r0, [r4, #14]

 	msj[15]=(rtc.hour/10)+48;   //hora
1a0003c8:	794d      	ldrb	r5, [r1, #5]
1a0003ca:	fba3 6205 	umull	r6, r2, r3, r5
1a0003ce:	08d2      	lsrs	r2, r2, #3
1a0003d0:	f102 0630 	add.w	r6, r2, #48	; 0x30
1a0003d4:	73e6      	strb	r6, [r4, #15]
 	msj[16]=(rtc.hour%10)+48;
1a0003d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0003da:	0056      	lsls	r6, r2, #1
1a0003dc:	1bad      	subs	r5, r5, r6
1a0003de:	3530      	adds	r5, #48	; 0x30
1a0003e0:	7425      	strb	r5, [r4, #16]

 	msj[17]=95;   //guion bajo
1a0003e2:	7460      	strb	r0, [r4, #17]

 	msj[18]=(rtc.min/10)+48;   //minutos
1a0003e4:	798d      	ldrb	r5, [r1, #6]
1a0003e6:	fba3 6205 	umull	r6, r2, r3, r5
1a0003ea:	08d2      	lsrs	r2, r2, #3
1a0003ec:	f102 0630 	add.w	r6, r2, #48	; 0x30
1a0003f0:	74a6      	strb	r6, [r4, #18]
 	msj[19]=(rtc.min%10)+48;
1a0003f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
1a0003f6:	0056      	lsls	r6, r2, #1
1a0003f8:	1bad      	subs	r5, r5, r6
1a0003fa:	3530      	adds	r5, #48	; 0x30
1a0003fc:	74e5      	strb	r5, [r4, #19]

 	msj[20]=95;   //guion bajo
1a0003fe:	7520      	strb	r0, [r4, #20]

 	msj[21]=(rtc.sec/10)+48;   //segundos
1a000400:	79ca      	ldrb	r2, [r1, #7]
1a000402:	fba3 1302 	umull	r1, r3, r3, r2
1a000406:	08db      	lsrs	r3, r3, #3
1a000408:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a00040c:	7561      	strb	r1, [r4, #21]
 	msj[22]=(rtc.sec%10)+48;
1a00040e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000412:	0059      	lsls	r1, r3, #1
1a000414:	1a52      	subs	r2, r2, r1
1a000416:	3230      	adds	r2, #48	; 0x30
1a000418:	75a2      	strb	r2, [r4, #22]
 	msj[23]='.';
1a00041a:	232e      	movs	r3, #46	; 0x2e
1a00041c:	75e3      	strb	r3, [r4, #23]
 	msj[24]='t';
1a00041e:	2374      	movs	r3, #116	; 0x74
1a000420:	7623      	strb	r3, [r4, #24]
 	msj[25]='x';
1a000422:	2278      	movs	r2, #120	; 0x78
1a000424:	7662      	strb	r2, [r4, #25]
 	msj[26]='t';
1a000426:	76a3      	strb	r3, [r4, #26]
 	msj[27]='\0';
1a000428:	2300      	movs	r3, #0
1a00042a:	76e3      	strb	r3, [r4, #27]
 	strcat(filename,msj );
1a00042c:	4621      	mov	r1, r4
1a00042e:	4668      	mov	r0, sp
1a000430:	f008 f8d4 	bl	1a0085dc <strcat>
 	strcpy(msj,filename);
1a000434:	4669      	mov	r1, sp
1a000436:	4620      	mov	r0, r4
1a000438:	f008 f8df 	bl	1a0085fa <strcpy>
 }
1a00043c:	b00a      	add	sp, #40	; 0x28
1a00043e:	bd70      	pop	{r4, r5, r6, pc}
1a000440:	1a009210 	.word	0x1a009210
1a000444:	100035f8 	.word	0x100035f8
1a000448:	66666667 	.word	0x66666667
1a00044c:	cccccccd 	.word	0xcccccccd

1a000450 <TareaTXRXBluetooth>:


//***************************** ##################################### ******************
// Implementacion de funcion de la tarea
void TareaTXRXBluetooth( void* taskParmPtr )
{
1a000450:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000452:	b08b      	sub	sp, #44	; 0x2c
   // ---------- CONFIGURACIONES ------------------------------

	uint8_t msjLinea[13];// Arreglo con la linea a grabar.
	uint8_t dataBluetooth = 0;
1a000454:	2300      	movs	r3, #0
1a000456:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t dataBluetooth_Y = 85;// Asi comienza automaticamente el intercambio de datos
	uint8_t dataBluetooth_Z = 86;// entre la App y la EDUCIAA.

	// Tarea periodica cada 10 ms
	portTickType xPeriodicity =  10 / portTICK_RATE_MS;
	portTickType xLastWakeTime = xTaskGetTickCount();
1a00045a:	f003 fd45 	bl	1a003ee8 <xTaskGetTickCount>
1a00045e:	9004      	str	r0, [sp, #16]
	uint8_t dataBluetooth_Z = 86;// entre la App y la EDUCIAA.
1a000460:	2656      	movs	r6, #86	; 0x56
	uint8_t dataBluetooth_Y = 85;// Asi comienza automaticamente el intercambio de datos
1a000462:	2555      	movs	r5, #85	; 0x55
	uint8_t dataBluetooth_X = 84;// Precarga una T, Y y Z como dato para el switch case
1a000464:	2454      	movs	r4, #84	; 0x54
1a000466:	e040      	b.n	1a0004ea <TareaTXRXBluetooth+0x9a>
		  // letras que se reciben desde la EDUCIAA, las cuales son normalmente T, U y V, pero cuando se
		  // esta grabando son A, B y C.
		  // En la EDUCIAA se indica con el led RGB en color AZUL.

      	  case 'G':// Detecta que se presiono el boton de grabar en la App. Comienza grabacion.
				grabar = TRUE;
1a000468:	2101      	movs	r1, #1
1a00046a:	4b54      	ldr	r3, [pc, #336]	; (1a0005bc <TareaTXRXBluetooth+0x16c>)
1a00046c:	7019      	strb	r1, [r3, #0]
				gpioWrite( LEDB, ON );
1a00046e:	202c      	movs	r0, #44	; 0x2c
1a000470:	f006 fd26 	bl	1a006ec0 <gpioWrite>
				dataBluetooth_X = 65;// Envia una A como dato.
				dataBluetooth_Y = 66;// Envia una B como dato.
				dataBluetooth_Z = 67;// Envia una C como dato.

				cargaMsj(msjLinea);// Carga el msj en el arreglo.
1a000474:	a806      	add	r0, sp, #24
1a000476:	f7ff ff43 	bl	1a000300 <cargaMsj>
				for(uint8_t h=0;h<13;h++){
1a00047a:	2400      	movs	r4, #0
1a00047c:	e00a      	b.n	1a000494 <TareaTXRXBluetooth+0x44>
					xQueueSendToBack(cola, &msjLinea[h], portMAX_DELAY);// Envia el arreglo por la cola.
1a00047e:	2300      	movs	r3, #0
1a000480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000484:	a906      	add	r1, sp, #24
1a000486:	4421      	add	r1, r4
1a000488:	484d      	ldr	r0, [pc, #308]	; (1a0005c0 <TareaTXRXBluetooth+0x170>)
1a00048a:	6800      	ldr	r0, [r0, #0]
1a00048c:	f003 f872 	bl	1a003574 <xQueueGenericSend>
				for(uint8_t h=0;h<13;h++){
1a000490:	3401      	adds	r4, #1
1a000492:	b2e4      	uxtb	r4, r4
1a000494:	2c0c      	cmp	r4, #12
1a000496:	d9f2      	bls.n	1a00047e <TareaTXRXBluetooth+0x2e>
				}

				//Leer el sensor y guardar en estructura de control
				mpu9250Read();
1a000498:	f007 f80c 	bl	1a0074b4 <mpu9250Read>

				// Imprimir resultados
				printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
					  mpu9250GetGyroX_rads(),
1a00049c:	f007 f94e 	bl	1a00773c <mpu9250GetGyroX_rads>
1a0004a0:	ee10 4a10 	vmov	r4, s0
					  mpu9250GetGyroY_rads(),
1a0004a4:	f007 f950 	bl	1a007748 <mpu9250GetGyroY_rads>
1a0004a8:	ee10 6a10 	vmov	r6, s0
					  mpu9250GetGyroZ_rads()
1a0004ac:	f007 f952 	bl	1a007754 <mpu9250GetGyroZ_rads>
1a0004b0:	ee10 7a10 	vmov	r7, s0
				printf( "Giroscopo:      (%f, %f, %f)   [rad/s]\r\n",
1a0004b4:	4620      	mov	r0, r4
1a0004b6:	f007 fd05 	bl	1a007ec4 <__aeabi_f2d>
1a0004ba:	4604      	mov	r4, r0
1a0004bc:	460d      	mov	r5, r1
1a0004be:	4638      	mov	r0, r7
1a0004c0:	f007 fd00 	bl	1a007ec4 <__aeabi_f2d>
1a0004c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a0004c8:	4630      	mov	r0, r6
1a0004ca:	f007 fcfb 	bl	1a007ec4 <__aeabi_f2d>
1a0004ce:	e9cd 0100 	strd	r0, r1, [sp]
1a0004d2:	4622      	mov	r2, r4
1a0004d4:	462b      	mov	r3, r5
1a0004d6:	483b      	ldr	r0, [pc, #236]	; (1a0005c4 <TareaTXRXBluetooth+0x174>)
1a0004d8:	f008 f804 	bl	1a0084e4 <iprintf>
				dataBluetooth_Z = 67;// Envia una C como dato.
1a0004dc:	2643      	movs	r6, #67	; 0x43
				dataBluetooth_Y = 66;// Envia una B como dato.
1a0004de:	2542      	movs	r5, #66	; 0x42
				dataBluetooth_X = 65;// Envia una A como dato.
1a0004e0:	2441      	movs	r4, #65	; 0x41
      		  gpioWrite( LED3, OFF );
      	  }
        }

        // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
        vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0004e2:	210a      	movs	r1, #10
1a0004e4:	a804      	add	r0, sp, #16
1a0004e6:	f003 fe0b 	bl	1a004100 <vTaskDelayUntil>
        if( uartReadByte( UART_BLUETOOTH, &dataBluetooth ) ) {
1a0004ea:	f10d 0117 	add.w	r1, sp, #23
1a0004ee:	2005      	movs	r0, #5
1a0004f0:	f006 fab0 	bl	1a006a54 <uartReadByte>
1a0004f4:	2800      	cmp	r0, #0
1a0004f6:	d0f4      	beq.n	1a0004e2 <TareaTXRXBluetooth+0x92>
		switch (dataBluetooth) {
1a0004f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
1a0004fc:	3b47      	subs	r3, #71	; 0x47
1a0004fe:	2b13      	cmp	r3, #19
1a000500:	d84f      	bhi.n	1a0005a2 <TareaTXRXBluetooth+0x152>
1a000502:	a201      	add	r2, pc, #4	; (adr r2, 1a000508 <TareaTXRXBluetooth+0xb8>)
1a000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a000508:	1a000469 	.word	0x1a000469
1a00050c:	1a0005a3 	.word	0x1a0005a3
1a000510:	1a0005a3 	.word	0x1a0005a3
1a000514:	1a0005a3 	.word	0x1a0005a3
1a000518:	1a0005a3 	.word	0x1a0005a3
1a00051c:	1a0005a3 	.word	0x1a0005a3
1a000520:	1a0005a3 	.word	0x1a0005a3
1a000524:	1a0005a3 	.word	0x1a0005a3
1a000528:	1a0005a3 	.word	0x1a0005a3
1a00052c:	1a0005a3 	.word	0x1a0005a3
1a000530:	1a0005a3 	.word	0x1a0005a3
1a000534:	1a0005a3 	.word	0x1a0005a3
1a000538:	1a000559 	.word	0x1a000559
1a00053c:	1a0005a3 	.word	0x1a0005a3
1a000540:	1a0005a3 	.word	0x1a0005a3
1a000544:	1a0005a3 	.word	0x1a0005a3
1a000548:	1a0005a3 	.word	0x1a0005a3
1a00054c:	1a00056d 	.word	0x1a00056d
1a000550:	1a00057f 	.word	0x1a00057f
1a000554:	1a000591 	.word	0x1a000591
      		  grabar = FALSE;
1a000558:	2100      	movs	r1, #0
1a00055a:	4b18      	ldr	r3, [pc, #96]	; (1a0005bc <TareaTXRXBluetooth+0x16c>)
1a00055c:	7019      	strb	r1, [r3, #0]
      		  gpioWrite( LEDB, OFF );
1a00055e:	202c      	movs	r0, #44	; 0x2c
1a000560:	f006 fcae 	bl	1a006ec0 <gpioWrite>
      		  dataBluetooth_Z = 86;// Envia una V como dato.
1a000564:	2656      	movs	r6, #86	; 0x56
      		  dataBluetooth_Y = 85;// Envia una U como dato.
1a000566:	2555      	movs	r5, #85	; 0x55
      		  dataBluetooth_X = 84;// Envia una T como dato.
1a000568:	2454      	movs	r4, #84	; 0x54
      		  break;
1a00056a:	e7ba      	b.n	1a0004e2 <TareaTXRXBluetooth+0x92>
      		  gpioWrite( LED1, ON );
1a00056c:	2101      	movs	r1, #1
1a00056e:	202d      	movs	r0, #45	; 0x2d
1a000570:	f006 fca6 	bl	1a006ec0 <gpioWrite>
      		  uartWriteByte( UART_BLUETOOTH, dataBluetooth_X );
1a000574:	4621      	mov	r1, r4
1a000576:	2005      	movs	r0, #5
1a000578:	f006 fa7b 	bl	1a006a72 <uartWriteByte>
      	      break;
1a00057c:	e7b1      	b.n	1a0004e2 <TareaTXRXBluetooth+0x92>
      		  gpioWrite( LED2, ON );
1a00057e:	2101      	movs	r1, #1
1a000580:	202e      	movs	r0, #46	; 0x2e
1a000582:	f006 fc9d 	bl	1a006ec0 <gpioWrite>
      		  uartWriteByte( UART_BLUETOOTH, dataBluetooth_Y );
1a000586:	4629      	mov	r1, r5
1a000588:	2005      	movs	r0, #5
1a00058a:	f006 fa72 	bl	1a006a72 <uartWriteByte>
      		  break;
1a00058e:	e7a8      	b.n	1a0004e2 <TareaTXRXBluetooth+0x92>
      		  gpioWrite( LED3, ON );
1a000590:	2101      	movs	r1, #1
1a000592:	202f      	movs	r0, #47	; 0x2f
1a000594:	f006 fc94 	bl	1a006ec0 <gpioWrite>
      	   	  uartWriteByte( UART_BLUETOOTH, dataBluetooth_Z );
1a000598:	4631      	mov	r1, r6
1a00059a:	2005      	movs	r0, #5
1a00059c:	f006 fa69 	bl	1a006a72 <uartWriteByte>
      	   	  break;
1a0005a0:	e79f      	b.n	1a0004e2 <TareaTXRXBluetooth+0x92>
      		  gpioWrite( LED1, OFF );// Apaga todos los leds de X, Y y Z.
1a0005a2:	2100      	movs	r1, #0
1a0005a4:	202d      	movs	r0, #45	; 0x2d
1a0005a6:	f006 fc8b 	bl	1a006ec0 <gpioWrite>
      		  gpioWrite( LED2, OFF );
1a0005aa:	2100      	movs	r1, #0
1a0005ac:	202e      	movs	r0, #46	; 0x2e
1a0005ae:	f006 fc87 	bl	1a006ec0 <gpioWrite>
      		  gpioWrite( LED3, OFF );
1a0005b2:	2100      	movs	r1, #0
1a0005b4:	202f      	movs	r0, #47	; 0x2f
1a0005b6:	f006 fc83 	bl	1a006ec0 <gpioWrite>
1a0005ba:	e792      	b.n	1a0004e2 <TareaTXRXBluetooth+0x92>
1a0005bc:	10000590 	.word	0x10000590
1a0005c0:	10003600 	.word	0x10003600
1a0005c4:	1a009238 	.word	0x1a009238

1a0005c8 <TaskdiskTickHook>:
    	  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
      }
}

 //***************************** ##################################### ******************
 void TaskdiskTickHook( void* taskParmPtr ){
1a0005c8:	b500      	push	{lr}
1a0005ca:	b083      	sub	sp, #12

       // ---------- CONFIGURACIONES ------------------------------

       // Tarea periodica cada 10 ms
       portTickType xPeriodicity =  10 / portTICK_RATE_MS;
       portTickType xLastWakeTime = xTaskGetTickCount();
1a0005cc:	f003 fc8c 	bl	1a003ee8 <xTaskGetTickCount>
1a0005d0:	9001      	str	r0, [sp, #4]

       // ---------- REPETIR POR SIEMPRE --------------------------
       while(TRUE) {
    	   disk_timerproc();   // Disk timer process
1a0005d2:	f005 f80f 	bl	1a0055f4 <disk_timerproc>

    	   // Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
    	   vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0005d6:	210a      	movs	r1, #10
1a0005d8:	a801      	add	r0, sp, #4
1a0005da:	f003 fd91 	bl	1a004100 <vTaskDelayUntil>
1a0005de:	e7f8      	b.n	1a0005d2 <TaskdiskTickHook+0xa>

1a0005e0 <TareaRX_RTC>:
       }
 }

 //***************************** ##################################### ******************
void TareaRX_RTC( void* taskParmPtr ){
1a0005e0:	b500      	push	{lr}
1a0005e2:	b083      	sub	sp, #12

	    // ---------- CONFIGURACIONES ------------------------------

	    // Tarea periodica cada 10 ms
	    portTickType xPeriodicity =  5 / portTICK_RATE_MS;
	    portTickType xLastWakeTime = xTaskGetTickCount();
1a0005e4:	f003 fc80 	bl	1a003ee8 <xTaskGetTickCount>
1a0005e8:	9001      	str	r0, [sp, #4]

    // ---------- REPETIR POR SIEMPRE --------------------------
    while(TRUE) {

           // Leer fecha y hora
           	val_RTC = rtcRead( &rtc );
1a0005ea:	4805      	ldr	r0, [pc, #20]	; (1a000600 <TareaRX_RTC+0x20>)
1a0005ec:	f006 fa76 	bl	1a006adc <rtcRead>
1a0005f0:	4b04      	ldr	r3, [pc, #16]	; (1a000604 <TareaRX_RTC+0x24>)
1a0005f2:	7018      	strb	r0, [r3, #0]

			// Envia la tarea al estado bloqueado durante xPeriodicity (delay periodico)
			vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a0005f4:	2105      	movs	r1, #5
1a0005f6:	a801      	add	r0, sp, #4
1a0005f8:	f003 fd82 	bl	1a004100 <vTaskDelayUntil>
1a0005fc:	e7f5      	b.n	1a0005ea <TareaRX_RTC+0xa>
1a0005fe:	bf00      	nop
1a000600:	100035f8 	.word	0x100035f8
1a000604:	10000591 	.word	0x10000591

1a000608 <TaskWriteData>:
 void TaskWriteData( void* taskParmPtr ){
1a000608:	b530      	push	{r4, r5, lr}
1a00060a:	b08f      	sub	sp, #60	; 0x3c
	 spiConfig( SPI0 );
1a00060c:	2000      	movs	r0, #0
1a00060e:	f006 fa3d 	bl	1a006a8c <spiInit>
	 FSSDC_InitSPI ();
1a000612:	f004 ff8b 	bl	1a00552c <FSSDC_InitSPI>
	 if( f_mount( &fs, "SDC:", 0 ) != FR_OK ) { // si entra aqui es por falla SD. Revisar tarjeta
1a000616:	2200      	movs	r2, #0
1a000618:	492e      	ldr	r1, [pc, #184]	; (1a0006d4 <TaskWriteData+0xcc>)
1a00061a:	482f      	ldr	r0, [pc, #188]	; (1a0006d8 <TaskWriteData+0xd0>)
1a00061c:	f002 f9e0 	bl	1a0029e0 <f_mount>
1a000620:	b940      	cbnz	r0, 1a000634 <TaskWriteData+0x2c>
	 uint8_t * dataIn = malloc(BLOQUES * sizeof(uint8_t));
1a000622:	20f0      	movs	r0, #240	; 0xf0
1a000624:	f007 fe9a 	bl	1a00835c <malloc>
1a000628:	4605      	mov	r5, r0
      portTickType xLastWakeTime = xTaskGetTickCount();
1a00062a:	f003 fc5d 	bl	1a003ee8 <xTaskGetTickCount>
1a00062e:	9001      	str	r0, [sp, #4]
	 uint16_t i=0;
1a000630:	2400      	movs	r4, #0
1a000632:	e023      	b.n	1a00067c <TaskWriteData+0x74>
		 printf ("Error de SD Card mal conectada\r\n");
1a000634:	4829      	ldr	r0, [pc, #164]	; (1a0006dc <TaskWriteData+0xd4>)
1a000636:	f007 ffc9 	bl	1a0085cc <puts>
1a00063a:	e7f2      	b.n	1a000622 <TaskWriteData+0x1a>
    		  *(dataIn+i)=datoRcv;
1a00063c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
1a000640:	552b      	strb	r3, [r5, r4]
    		  gpioWrite( LEDR, ON );
1a000642:	2101      	movs	r1, #1
1a000644:	202a      	movs	r0, #42	; 0x2a
1a000646:	f006 fc3b 	bl	1a006ec0 <gpioWrite>
    		  i++;
1a00064a:	3401      	adds	r4, #1
1a00064c:	b2a4      	uxth	r4, r4
1a00064e:	e01f      	b.n	1a000690 <TaskWriteData+0x88>
    		  if( nbytes == BLOQUES)
1a000650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a000652:	2bf0      	cmp	r3, #240	; 0xf0
1a000654:	d038      	beq.n	1a0006c8 <TaskWriteData+0xc0>
    		  f_close(&fp);
1a000656:	4822      	ldr	r0, [pc, #136]	; (1a0006e0 <TaskWriteData+0xd8>)
1a000658:	f002 fd16 	bl	1a003088 <f_close>
    		  printf("Datos grabados correctamente.\r\n");
1a00065c:	4821      	ldr	r0, [pc, #132]	; (1a0006e4 <TaskWriteData+0xdc>)
1a00065e:	f007 ffb5 	bl	1a0085cc <puts>
    		  i=INIT; // preparo para recibir otro bloque de datos
1a000662:	2400      	movs	r4, #0
    	  gpioWrite( LEDB, OFF );
1a000664:	2100      	movs	r1, #0
1a000666:	202c      	movs	r0, #44	; 0x2c
1a000668:	f006 fc2a 	bl	1a006ec0 <gpioWrite>
    	  gpioWrite( LEDG, OFF );
1a00066c:	2100      	movs	r1, #0
1a00066e:	202b      	movs	r0, #43	; 0x2b
1a000670:	f006 fc26 	bl	1a006ec0 <gpioWrite>
    	  vTaskDelayUntil( &xLastWakeTime, xPeriodicity );
1a000674:	2105      	movs	r1, #5
1a000676:	a801      	add	r0, sp, #4
1a000678:	f003 fd42 	bl	1a004100 <vTaskDelayUntil>
    	  if (xQueueReceive(cola, &datoRcv, portMAX_DELAY) == pdTRUE) {
1a00067c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000680:	f10d 0133 	add.w	r1, sp, #51	; 0x33
1a000684:	4b18      	ldr	r3, [pc, #96]	; (1a0006e8 <TaskWriteData+0xe0>)
1a000686:	6818      	ldr	r0, [r3, #0]
1a000688:	f003 f898 	bl	1a0037bc <xQueueReceive>
1a00068c:	2801      	cmp	r0, #1
1a00068e:	d0d5      	beq.n	1a00063c <TaskWriteData+0x34>
    	  if(i==BLOQUES)                                  // Buffer lleno entonces vuelco a memoria
1a000690:	2cf0      	cmp	r4, #240	; 0xf0
1a000692:	d1e7      	bne.n	1a000664 <TaskWriteData+0x5c>
    		  if (rtcRead( &rtc)){   //Lectura DS1307
1a000694:	4815      	ldr	r0, [pc, #84]	; (1a0006ec <TaskWriteData+0xe4>)
1a000696:	f006 fa21 	bl	1a006adc <rtcRead>
1a00069a:	2800      	cmp	r0, #0
1a00069c:	d0e2      	beq.n	1a000664 <TaskWriteData+0x5c>
    		  	 nombreArchivo(msj);      //guardo archivo con los datos y nombre "XYZ...fecha...txt"
1a00069e:	a802      	add	r0, sp, #8
1a0006a0:	f7ff fe46 	bl	1a000330 <nombreArchivo>
    		     printf("Archivo a guardar en microSD: %s \r\n",msj);
1a0006a4:	a902      	add	r1, sp, #8
1a0006a6:	4812      	ldr	r0, [pc, #72]	; (1a0006f0 <TaskWriteData+0xe8>)
1a0006a8:	f007 ff1c 	bl	1a0084e4 <iprintf>
    		  if( f_open( &fp, msj, FA_WRITE | FA_OPEN_APPEND ) == FR_OK )
1a0006ac:	2232      	movs	r2, #50	; 0x32
1a0006ae:	a902      	add	r1, sp, #8
1a0006b0:	480b      	ldr	r0, [pc, #44]	; (1a0006e0 <TaskWriteData+0xd8>)
1a0006b2:	f002 f9bd 	bl	1a002a30 <f_open>
1a0006b6:	2800      	cmp	r0, #0
1a0006b8:	d1ca      	bne.n	1a000650 <TaskWriteData+0x48>
    		     f_write( &fp,dataIn,BLOQUES, &nbytes );
1a0006ba:	ab0d      	add	r3, sp, #52	; 0x34
1a0006bc:	22f0      	movs	r2, #240	; 0xf0
1a0006be:	4629      	mov	r1, r5
1a0006c0:	4807      	ldr	r0, [pc, #28]	; (1a0006e0 <TaskWriteData+0xd8>)
1a0006c2:	f002 fb11 	bl	1a002ce8 <f_write>
1a0006c6:	e7c3      	b.n	1a000650 <TaskWriteData+0x48>
    			  gpioWrite( LEDG, ON );
1a0006c8:	2101      	movs	r1, #1
1a0006ca:	202b      	movs	r0, #43	; 0x2b
1a0006cc:	f006 fbf8 	bl	1a006ec0 <gpioWrite>
1a0006d0:	e7c1      	b.n	1a000656 <TaskWriteData+0x4e>
1a0006d2:	bf00      	nop
1a0006d4:	1a009264 	.word	0x1a009264
1a0006d8:	10000358 	.word	0x10000358
1a0006dc:	1a00926c 	.word	0x1a00926c
1a0006e0:	10000108 	.word	0x10000108
1a0006e4:	1a0092b0 	.word	0x1a0092b0
1a0006e8:	10003600 	.word	0x10003600
1a0006ec:	100035f8 	.word	0x100035f8
1a0006f0:	1a00928c 	.word	0x1a00928c

1a0006f4 <main>:
{
1a0006f4:	b530      	push	{r4, r5, lr}
1a0006f6:	b083      	sub	sp, #12
	boardConfig();
1a0006f8:	f006 fc1c 	bl	1a006f34 <boardInit>
	uartConfig( UART_USB, 115200 );
1a0006fc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000700:	2003      	movs	r0, #3
1a000702:	f006 f969 	bl	1a0069d8 <uartInit>
	printf ("UART_USB configurada en 115200 baudios.\r\n");
1a000706:	4857      	ldr	r0, [pc, #348]	; (1a000864 <main+0x170>)
1a000708:	f007 ff60 	bl	1a0085cc <puts>
	uartConfig( UART_BLUETOOTH, 9600 );
1a00070c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
1a000710:	2005      	movs	r0, #5
1a000712:	f006 f961 	bl	1a0069d8 <uartInit>
	printf("UART_BLUETOOTH configurada en 9600 baudios.\r\n" );
1a000716:	4854      	ldr	r0, [pc, #336]	; (1a000868 <main+0x174>)
1a000718:	f007 ff58 	bl	1a0085cc <puts>
	ciaaI2CInit();
1a00071c:	f000 f8ec 	bl	1a0008f8 <ciaaI2CInit>
	printf("Inicializando IMU MPU9250...\r\n" );
1a000720:	4852      	ldr	r0, [pc, #328]	; (1a00086c <main+0x178>)
1a000722:	f007 ff53 	bl	1a0085cc <puts>
	statusIMU = mpu9250Init( addrIMU );
1a000726:	4b52      	ldr	r3, [pc, #328]	; (1a000870 <main+0x17c>)
1a000728:	7818      	ldrb	r0, [r3, #0]
1a00072a:	f007 f8c7 	bl	1a0078bc <mpu9250Init>
	if( statusIMU < 0 ){
1a00072e:	2800      	cmp	r0, #0
1a000730:	da18      	bge.n	1a000764 <main+0x70>
	  printf( "IMU MPU9250 no inicializado, chequee las conexiones:\r\n\r\n" );
1a000732:	4850      	ldr	r0, [pc, #320]	; (1a000874 <main+0x180>)
1a000734:	f007 ff4a 	bl	1a0085cc <puts>
	  printf( "MPU9250 ---- EDU-CIAA-NXP\r\n\r\n" );
1a000738:	484f      	ldr	r0, [pc, #316]	; (1a000878 <main+0x184>)
1a00073a:	f007 ff47 	bl	1a0085cc <puts>
	  printf( "    VCC ---- 3.3V\r\n" );
1a00073e:	484f      	ldr	r0, [pc, #316]	; (1a00087c <main+0x188>)
1a000740:	f007 ff44 	bl	1a0085cc <puts>
	  printf( "    GND ---- GND\r\n" );
1a000744:	484e      	ldr	r0, [pc, #312]	; (1a000880 <main+0x18c>)
1a000746:	f007 ff41 	bl	1a0085cc <puts>
	  printf( "    SCL ---- SCL\r\n" );
1a00074a:	484e      	ldr	r0, [pc, #312]	; (1a000884 <main+0x190>)
1a00074c:	f007 ff3e 	bl	1a0085cc <puts>
	  printf( "    SDA ---- SDA\r\n" );
1a000750:	484d      	ldr	r0, [pc, #308]	; (1a000888 <main+0x194>)
1a000752:	f007 ff3b 	bl	1a0085cc <puts>
	  printf( "    AD0 ---- GND\r\n\r\n" );
1a000756:	484d      	ldr	r0, [pc, #308]	; (1a00088c <main+0x198>)
1a000758:	f007 ff38 	bl	1a0085cc <puts>
	  printf( "Se detiene el programa.\r\n" );
1a00075c:	484c      	ldr	r0, [pc, #304]	; (1a000890 <main+0x19c>)
1a00075e:	f007 ff35 	bl	1a0085cc <puts>
1a000762:	e7fe      	b.n	1a000762 <main+0x6e>
	printf("IMU MPU9250 inicializado correctamente.\r\n\r\n" );
1a000764:	484b      	ldr	r0, [pc, #300]	; (1a000894 <main+0x1a0>)
1a000766:	f007 ff31 	bl	1a0085cc <puts>
		rtc.year = 2019;
1a00076a:	484b      	ldr	r0, [pc, #300]	; (1a000898 <main+0x1a4>)
1a00076c:	f240 73e3 	movw	r3, #2019	; 0x7e3
1a000770:	8003      	strh	r3, [r0, #0]
		rtc.month = 5;
1a000772:	2305      	movs	r3, #5
1a000774:	7083      	strb	r3, [r0, #2]
		rtc.mday = 5;
1a000776:	70c3      	strb	r3, [r0, #3]
		rtc.wday = 7;
1a000778:	2307      	movs	r3, #7
1a00077a:	7103      	strb	r3, [r0, #4]
		rtc.hour = 15;
1a00077c:	230f      	movs	r3, #15
1a00077e:	7143      	strb	r3, [r0, #5]
		rtc.min = 52;
1a000780:	2334      	movs	r3, #52	; 0x34
1a000782:	7183      	strb	r3, [r0, #6]
		rtc.sec= 0;
1a000784:	2300      	movs	r3, #0
1a000786:	71c3      	strb	r3, [r0, #7]
	val_RTC = rtcConfig( &rtc );
1a000788:	f006 f9da 	bl	1a006b40 <rtcInit>
1a00078c:	4b43      	ldr	r3, [pc, #268]	; (1a00089c <main+0x1a8>)
1a00078e:	7018      	strb	r0, [r3, #0]
	if (val_RTC == FALSE){
1a000790:	2800      	cmp	r0, #0
1a000792:	d150      	bne.n	1a000836 <main+0x142>
		printf("No se pudo configurar el RTC.\r\n");
1a000794:	4842      	ldr	r0, [pc, #264]	; (1a0008a0 <main+0x1ac>)
1a000796:	f007 ff19 	bl	1a0085cc <puts>
	val_RTC = rtcRead( &rtc );
1a00079a:	483f      	ldr	r0, [pc, #252]	; (1a000898 <main+0x1a4>)
1a00079c:	f006 f99e 	bl	1a006adc <rtcRead>
1a0007a0:	4b3e      	ldr	r3, [pc, #248]	; (1a00089c <main+0x1a8>)
1a0007a2:	7018      	strb	r0, [r3, #0]
	if (val_RTC == FALSE){
1a0007a4:	2800      	cmp	r0, #0
1a0007a6:	d14a      	bne.n	1a00083e <main+0x14a>
		printf("No se pudo leer el RTC.\r\n");
1a0007a8:	483e      	ldr	r0, [pc, #248]	; (1a0008a4 <main+0x1b0>)
1a0007aa:	f007 ff0f 	bl	1a0085cc <puts>
	cola = xQueueCreate(BLOQUES, sizeof(uint8_t));
1a0007ae:	2200      	movs	r2, #0
1a0007b0:	2101      	movs	r1, #1
1a0007b2:	20f0      	movs	r0, #240	; 0xf0
1a0007b4:	f002 feb7 	bl	1a003526 <xQueueGenericCreate>
1a0007b8:	4b3b      	ldr	r3, [pc, #236]	; (1a0008a8 <main+0x1b4>)
1a0007ba:	6018      	str	r0, [r3, #0]
	if( cola == NULL )
1a0007bc:	2800      	cmp	r0, #0
1a0007be:	d04d      	beq.n	1a00085c <main+0x168>
	   printf ("Cola creada.\r\n");
1a0007c0:	483a      	ldr	r0, [pc, #232]	; (1a0008ac <main+0x1b8>)
1a0007c2:	f007 ff03 	bl	1a0085cc <puts>
	printf ("Creacion de tarea TXRXBluetooth\r\n");
1a0007c6:	483a      	ldr	r0, [pc, #232]	; (1a0008b0 <main+0x1bc>)
1a0007c8:	f007 ff00 	bl	1a0085cc <puts>
	xTaskCreate(
1a0007cc:	2400      	movs	r4, #0
1a0007ce:	9401      	str	r4, [sp, #4]
1a0007d0:	2304      	movs	r3, #4
1a0007d2:	9300      	str	r3, [sp, #0]
1a0007d4:	4623      	mov	r3, r4
1a0007d6:	22b4      	movs	r2, #180	; 0xb4
1a0007d8:	4936      	ldr	r1, [pc, #216]	; (1a0008b4 <main+0x1c0>)
1a0007da:	4837      	ldr	r0, [pc, #220]	; (1a0008b8 <main+0x1c4>)
1a0007dc:	f003 faff 	bl	1a003dde <xTaskCreate>
	printf ("Creacion de tarea TaskWriteData\r\n");
1a0007e0:	4836      	ldr	r0, [pc, #216]	; (1a0008bc <main+0x1c8>)
1a0007e2:	f007 fef3 	bl	1a0085cc <puts>
	xTaskCreate(
1a0007e6:	9401      	str	r4, [sp, #4]
1a0007e8:	2503      	movs	r5, #3
1a0007ea:	9500      	str	r5, [sp, #0]
1a0007ec:	4623      	mov	r3, r4
1a0007ee:	22b4      	movs	r2, #180	; 0xb4
1a0007f0:	4933      	ldr	r1, [pc, #204]	; (1a0008c0 <main+0x1cc>)
1a0007f2:	4834      	ldr	r0, [pc, #208]	; (1a0008c4 <main+0x1d0>)
1a0007f4:	f003 faf3 	bl	1a003dde <xTaskCreate>
	printf ("Creacion de la tarea TasdiskTickHook\r\n");
1a0007f8:	4833      	ldr	r0, [pc, #204]	; (1a0008c8 <main+0x1d4>)
1a0007fa:	f007 fee7 	bl	1a0085cc <puts>
	xTaskCreate(
1a0007fe:	9401      	str	r4, [sp, #4]
1a000800:	9500      	str	r5, [sp, #0]
1a000802:	4623      	mov	r3, r4
1a000804:	22b4      	movs	r2, #180	; 0xb4
1a000806:	4931      	ldr	r1, [pc, #196]	; (1a0008cc <main+0x1d8>)
1a000808:	4831      	ldr	r0, [pc, #196]	; (1a0008d0 <main+0x1dc>)
1a00080a:	f003 fae8 	bl	1a003dde <xTaskCreate>
	printf ("Creacion de tarea RX_RTC\r\n");
1a00080e:	4831      	ldr	r0, [pc, #196]	; (1a0008d4 <main+0x1e0>)
1a000810:	f007 fedc 	bl	1a0085cc <puts>
	xTaskCreate(
1a000814:	9401      	str	r4, [sp, #4]
1a000816:	9500      	str	r5, [sp, #0]
1a000818:	4623      	mov	r3, r4
1a00081a:	22b4      	movs	r2, #180	; 0xb4
1a00081c:	492e      	ldr	r1, [pc, #184]	; (1a0008d8 <main+0x1e4>)
1a00081e:	482f      	ldr	r0, [pc, #188]	; (1a0008dc <main+0x1e8>)
1a000820:	f003 fadd 	bl	1a003dde <xTaskCreate>
	vTaskStartScheduler();
1a000824:	f003 fb0e 	bl	1a003e44 <vTaskStartScheduler>
	printf ("Inicio Scheduler.\r\n");
1a000828:	482d      	ldr	r0, [pc, #180]	; (1a0008e0 <main+0x1ec>)
1a00082a:	f007 fecf 	bl	1a0085cc <puts>
	  printf ("No pudo inicializar el Scheduler !!!\r\n");
1a00082e:	482d      	ldr	r0, [pc, #180]	; (1a0008e4 <main+0x1f0>)
1a000830:	f007 fecc 	bl	1a0085cc <puts>
1a000834:	e7fb      	b.n	1a00082e <main+0x13a>
		printf("RTC configurado.\r\n");
1a000836:	482c      	ldr	r0, [pc, #176]	; (1a0008e8 <main+0x1f4>)
1a000838:	f007 fec8 	bl	1a0085cc <puts>
1a00083c:	e7ad      	b.n	1a00079a <main+0xa6>
	printf("RTC leido correctamente.\r\n");
1a00083e:	482b      	ldr	r0, [pc, #172]	; (1a0008ec <main+0x1f8>)
1a000840:	f007 fec4 	bl	1a0085cc <puts>
			rtc.hour,
1a000844:	4814      	ldr	r0, [pc, #80]	; (1a000898 <main+0x1a4>)
1a000846:	7941      	ldrb	r1, [r0, #5]
			rtc.min,
1a000848:	7982      	ldrb	r2, [r0, #6]
			rtc.mday,
1a00084a:	78c3      	ldrb	r3, [r0, #3]
			rtc.month,
1a00084c:	7884      	ldrb	r4, [r0, #2]
			rtc.year);
1a00084e:	8800      	ldrh	r0, [r0, #0]
	printf("Son las %d hs %d minutos del dia %d/%d/%d.\r\n",
1a000850:	9001      	str	r0, [sp, #4]
1a000852:	9400      	str	r4, [sp, #0]
1a000854:	4826      	ldr	r0, [pc, #152]	; (1a0008f0 <main+0x1fc>)
1a000856:	f007 fe45 	bl	1a0084e4 <iprintf>
1a00085a:	e7a8      	b.n	1a0007ae <main+0xba>
		   printf ("Cola no creada.\r\n");
1a00085c:	4825      	ldr	r0, [pc, #148]	; (1a0008f4 <main+0x200>)
1a00085e:	f007 feb5 	bl	1a0085cc <puts>
1a000862:	e7b0      	b.n	1a0007c6 <main+0xd2>
1a000864:	1a0092d0 	.word	0x1a0092d0
1a000868:	1a0092fc 	.word	0x1a0092fc
1a00086c:	1a00932c 	.word	0x1a00932c
1a000870:	10000000 	.word	0x10000000
1a000874:	1a00934c 	.word	0x1a00934c
1a000878:	1a009384 	.word	0x1a009384
1a00087c:	1a0093a4 	.word	0x1a0093a4
1a000880:	1a0093b8 	.word	0x1a0093b8
1a000884:	1a0093cc 	.word	0x1a0093cc
1a000888:	1a0093e0 	.word	0x1a0093e0
1a00088c:	1a0093f4 	.word	0x1a0093f4
1a000890:	1a009408 	.word	0x1a009408
1a000894:	1a009424 	.word	0x1a009424
1a000898:	100035f8 	.word	0x100035f8
1a00089c:	10000591 	.word	0x10000591
1a0008a0:	1a009450 	.word	0x1a009450
1a0008a4:	1a009484 	.word	0x1a009484
1a0008a8:	10003600 	.word	0x10003600
1a0008ac:	1a009500 	.word	0x1a009500
1a0008b0:	1a009510 	.word	0x1a009510
1a0008b4:	1a009534 	.word	0x1a009534
1a0008b8:	1a000451 	.word	0x1a000451
1a0008bc:	1a009548 	.word	0x1a009548
1a0008c0:	1a00956c 	.word	0x1a00956c
1a0008c4:	1a000609 	.word	0x1a000609
1a0008c8:	1a00957c 	.word	0x1a00957c
1a0008cc:	1a0095a4 	.word	0x1a0095a4
1a0008d0:	1a0005c9 	.word	0x1a0005c9
1a0008d4:	1a0095b8 	.word	0x1a0095b8
1a0008d8:	1a0095d4 	.word	0x1a0095d4
1a0008dc:	1a0005e1 	.word	0x1a0005e1
1a0008e0:	1a0095e0 	.word	0x1a0095e0
1a0008e4:	1a0095f4 	.word	0x1a0095f4
1a0008e8:	1a009470 	.word	0x1a009470
1a0008ec:	1a0094a0 	.word	0x1a0094a0
1a0008f0:	1a0094bc 	.word	0x1a0094bc
1a0008f4:	1a0094ec 	.word	0x1a0094ec

1a0008f8 <ciaaI2CInit>:

#include "ciaaI2C.h"


void ciaaI2CInit(void)
{
1a0008f8:	b508      	push	{r3, lr}
	//configuro i2c y lo activo
	Chip_I2C_Init(I2C0);
1a0008fa:	2000      	movs	r0, #0
1a0008fc:	f005 fe86 	bl	1a00660c <Chip_I2C_Init>
	Chip_I2C_SetClockRate(I2C0, 400000);
1a000900:	4904      	ldr	r1, [pc, #16]	; (1a000914 <ciaaI2CInit+0x1c>)
1a000902:	2000      	movs	r0, #0
1a000904:	f005 fe94 	bl	1a006630 <Chip_I2C_SetClockRate>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000908:	4b03      	ldr	r3, [pc, #12]	; (1a000918 <ciaaI2CInit+0x20>)
1a00090a:	f640 0208 	movw	r2, #2056	; 0x808
1a00090e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
	Chip_SCU_I2C0PinConfig(I2C0_STANDARD_FAST_MODE);

}
1a000912:	bd08      	pop	{r3, pc}
1a000914:	00061a80 	.word	0x00061a80
1a000918:	40086000 	.word	0x40086000

1a00091c <initialise_monitor_handles>:
}
1a00091c:	4770      	bx	lr
1a00091e:	Address 0x000000001a00091e is out of bounds.


1a000920 <Reset_Handler>:
void Reset_Handler(void) {
1a000920:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000922:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000924:	4b19      	ldr	r3, [pc, #100]	; (1a00098c <Reset_Handler+0x6c>)
1a000926:	4a1a      	ldr	r2, [pc, #104]	; (1a000990 <Reset_Handler+0x70>)
1a000928:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00092a:	3304      	adds	r3, #4
1a00092c:	4a19      	ldr	r2, [pc, #100]	; (1a000994 <Reset_Handler+0x74>)
1a00092e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000930:	2300      	movs	r3, #0
1a000932:	e005      	b.n	1a000940 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000934:	4a18      	ldr	r2, [pc, #96]	; (1a000998 <Reset_Handler+0x78>)
1a000936:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a00093a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00093e:	3301      	adds	r3, #1
1a000940:	2b07      	cmp	r3, #7
1a000942:	d9f7      	bls.n	1a000934 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000944:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000946:	4b15      	ldr	r3, [pc, #84]	; (1a00099c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000948:	e007      	b.n	1a00095a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00094a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00094e:	689a      	ldr	r2, [r3, #8]
1a000950:	6859      	ldr	r1, [r3, #4]
1a000952:	6818      	ldr	r0, [r3, #0]
1a000954:	f7ff fc19 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000958:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00095a:	4a11      	ldr	r2, [pc, #68]	; (1a0009a0 <Reset_Handler+0x80>)
1a00095c:	4293      	cmp	r3, r2
1a00095e:	d3f4      	bcc.n	1a00094a <Reset_Handler+0x2a>
1a000960:	e006      	b.n	1a000970 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000962:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000964:	6859      	ldr	r1, [r3, #4]
1a000966:	f854 0b08 	ldr.w	r0, [r4], #8
1a00096a:	f7ff fc1d 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00096e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000970:	4a0c      	ldr	r2, [pc, #48]	; (1a0009a4 <Reset_Handler+0x84>)
1a000972:	4293      	cmp	r3, r2
1a000974:	d3f5      	bcc.n	1a000962 <Reset_Handler+0x42>
    SystemInit();
1a000976:	f005 ffd9 	bl	1a00692c <SystemInit>
    __libc_init_array();
1a00097a:	f007 fccb 	bl	1a008314 <__libc_init_array>
    initialise_monitor_handles();
1a00097e:	f7ff ffcd 	bl	1a00091c <initialise_monitor_handles>
    main();
1a000982:	f7ff feb7 	bl	1a0006f4 <main>
        __asm__ volatile("wfi");
1a000986:	bf30      	wfi
1a000988:	e7fd      	b.n	1a000986 <Reset_Handler+0x66>
1a00098a:	bf00      	nop
1a00098c:	40053100 	.word	0x40053100
1a000990:	10df1000 	.word	0x10df1000
1a000994:	01dff7ff 	.word	0x01dff7ff
1a000998:	e000e280 	.word	0xe000e280
1a00099c:	1a000114 	.word	0x1a000114
1a0009a0:	1a000150 	.word	0x1a000150
1a0009a4:	1a000178 	.word	0x1a000178

1a0009a8 <_fini>:
void _fini(void) {}
1a0009a8:	4770      	bx	lr

1a0009aa <_init>:
void _init(void) {}
1a0009aa:	4770      	bx	lr

1a0009ac <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0009ac:	2309      	movs	r3, #9
1a0009ae:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009b4:	4770      	bx	lr

1a0009b6 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0009b6:	2358      	movs	r3, #88	; 0x58
1a0009b8:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009be:	4770      	bx	lr

1a0009c0 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a0009c0:	2902      	cmp	r1, #2
1a0009c2:	d801      	bhi.n	1a0009c8 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a0009c4:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a0009c6:	4770      	bx	lr
       SET_ERR(EBADF);
1a0009c8:	2309      	movs	r3, #9
1a0009ca:	6003      	str	r3, [r0, #0]
       return -1;
1a0009cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009d0:	4770      	bx	lr

1a0009d2 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a0009d2:	2358      	movs	r3, #88	; 0x58
1a0009d4:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0009d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0009da:	4770      	bx	lr

1a0009dc <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a0009dc:	2902      	cmp	r1, #2
1a0009de:	d81f      	bhi.n	1a000a20 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a0009e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009e4:	461d      	mov	r5, r3
1a0009e6:	4617      	mov	r7, r2
1a0009e8:	4606      	mov	r6, r0
  size_t i = 0;
1a0009ea:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a0009ec:	42ac      	cmp	r4, r5
1a0009ee:	d211      	bcs.n	1a000a14 <_read_r+0x38>
         int c = __stdio_getchar();
1a0009f0:	f004 ff33 	bl	1a00585a <__stdio_getchar>
         if( c != -1 ){
1a0009f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0009f8:	d0f8      	beq.n	1a0009ec <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a0009fa:	f104 0801 	add.w	r8, r4, #1
1a0009fe:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000a00:	280d      	cmp	r0, #13
1a000a02:	d003      	beq.n	1a000a0c <_read_r+0x30>
1a000a04:	280a      	cmp	r0, #10
1a000a06:	d001      	beq.n	1a000a0c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000a08:	4644      	mov	r4, r8
1a000a0a:	e7ef      	b.n	1a0009ec <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000a0c:	f004 ff25 	bl	1a00585a <__stdio_getchar>
               return i;
1a000a10:	4640      	mov	r0, r8
1a000a12:	e003      	b.n	1a000a1c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000a14:	2313      	movs	r3, #19
1a000a16:	6033      	str	r3, [r6, #0]
      return -1;
1a000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000a20:	2313      	movs	r3, #19
1a000a22:	6003      	str	r3, [r0, #0]
      return -1;
1a000a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000a28:	4770      	bx	lr

1a000a2a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000a2a:	2902      	cmp	r1, #2
1a000a2c:	d80c      	bhi.n	1a000a48 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000a2e:	b570      	push	{r4, r5, r6, lr}
1a000a30:	461d      	mov	r5, r3
1a000a32:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000a34:	2400      	movs	r4, #0
1a000a36:	e003      	b.n	1a000a40 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000a38:	5d30      	ldrb	r0, [r6, r4]
1a000a3a:	f004 ff09 	bl	1a005850 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000a3e:	3401      	adds	r4, #1
1a000a40:	42ac      	cmp	r4, r5
1a000a42:	d3f9      	bcc.n	1a000a38 <_write_r+0xe>
       return n;
1a000a44:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000a46:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000a48:	2313      	movs	r3, #19
1a000a4a:	6003      	str	r3, [r0, #0]
       return -1;
1a000a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000a50:	4770      	bx	lr
1a000a52:	Address 0x000000001a000a52 is out of bounds.


1a000a54 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000a54:	4b05      	ldr	r3, [pc, #20]	; (1a000a6c <_sbrk_r+0x18>)
1a000a56:	681b      	ldr	r3, [r3, #0]
1a000a58:	b123      	cbz	r3, 1a000a64 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000a5a:	4b04      	ldr	r3, [pc, #16]	; (1a000a6c <_sbrk_r+0x18>)
1a000a5c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000a5e:	4401      	add	r1, r0
1a000a60:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000a62:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000a64:	4b01      	ldr	r3, [pc, #4]	; (1a000a6c <_sbrk_r+0x18>)
1a000a66:	4a02      	ldr	r2, [pc, #8]	; (1a000a70 <_sbrk_r+0x1c>)
1a000a68:	601a      	str	r2, [r3, #0]
1a000a6a:	e7f6      	b.n	1a000a5a <_sbrk_r+0x6>
1a000a6c:	10000594 	.word	0x10000594
1a000a70:	10003654 	.word	0x10003654

1a000a74 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000a74:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000a76:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000a78:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a000a7c:	4770      	bx	lr

1a000a7e <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a000a7e:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a000a80:	7883      	ldrb	r3, [r0, #2]
1a000a82:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000a86:	7843      	ldrb	r3, [r0, #1]
1a000a88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a000a8c:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000a8e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000a92:	4770      	bx	lr

1a000a94 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
1a000a94:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
	QWORD rv;

	rv = ptr[7];
1a000a98:	79c2      	ldrb	r2, [r0, #7]
	rv = rv << 8 | ptr[6];
1a000a9a:	2500      	movs	r5, #0
1a000a9c:	0214      	lsls	r4, r2, #8
1a000a9e:	7982      	ldrb	r2, [r0, #6]
1a000aa0:	2300      	movs	r3, #0
1a000aa2:	ea44 0b02 	orr.w	fp, r4, r2
1a000aa6:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[5];
1a000aaa:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000aae:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000ab2:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000ab6:	7944      	ldrb	r4, [r0, #5]
1a000ab8:	2500      	movs	r5, #0
1a000aba:	ea44 0b02 	orr.w	fp, r4, r2
1a000abe:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[4];
1a000ac2:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000ac6:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000aca:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000ace:	7904      	ldrb	r4, [r0, #4]
1a000ad0:	2500      	movs	r5, #0
1a000ad2:	ea44 0b02 	orr.w	fp, r4, r2
1a000ad6:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[3];
1a000ada:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000ade:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000ae2:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000ae6:	78c4      	ldrb	r4, [r0, #3]
1a000ae8:	2500      	movs	r5, #0
1a000aea:	ea44 0b02 	orr.w	fp, r4, r2
1a000aee:	ea45 0c03 	orr.w	ip, r5, r3
	rv = rv << 8 | ptr[2];
1a000af2:	ea4f 230c 	mov.w	r3, ip, lsl #8
1a000af6:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
1a000afa:	ea4f 220b 	mov.w	r2, fp, lsl #8
1a000afe:	7884      	ldrb	r4, [r0, #2]
1a000b00:	2500      	movs	r5, #0
1a000b02:	ea44 0602 	orr.w	r6, r4, r2
1a000b06:	ea45 0703 	orr.w	r7, r5, r3
	rv = rv << 8 | ptr[1];
1a000b0a:	ea4f 2c07 	mov.w	ip, r7, lsl #8
1a000b0e:	ea4c 6c16 	orr.w	ip, ip, r6, lsr #24
1a000b12:	ea4f 2b06 	mov.w	fp, r6, lsl #8
1a000b16:	7844      	ldrb	r4, [r0, #1]
1a000b18:	2500      	movs	r5, #0
1a000b1a:	ea4b 0204 	orr.w	r2, fp, r4
1a000b1e:	ea4c 0305 	orr.w	r3, ip, r5
	rv = rv << 8 | ptr[0];
1a000b22:	021d      	lsls	r5, r3, #8
1a000b24:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
1a000b28:	0214      	lsls	r4, r2, #8
1a000b2a:	7802      	ldrb	r2, [r0, #0]
1a000b2c:	2300      	movs	r3, #0
	return rv;
}
1a000b2e:	ea42 0004 	orr.w	r0, r2, r4
1a000b32:	ea43 0105 	orr.w	r1, r3, r5
1a000b36:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
1a000b3a:	4770      	bx	lr

1a000b3c <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000b3c:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a000b3e:	0a09      	lsrs	r1, r1, #8
1a000b40:	7041      	strb	r1, [r0, #1]
}
1a000b42:	4770      	bx	lr

1a000b44 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000b44:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b46:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a000b4a:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b4c:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a000b50:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a000b52:	0e09      	lsrs	r1, r1, #24
1a000b54:	70c1      	strb	r1, [r0, #3]
}
1a000b56:	4770      	bx	lr

1a000b58 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a000b58:	7002      	strb	r2, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b5a:	f3c2 2107 	ubfx	r1, r2, #8, #8
1a000b5e:	7041      	strb	r1, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b60:	f3c2 4107 	ubfx	r1, r2, #16, #8
1a000b64:	7081      	strb	r1, [r0, #2]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b66:	0e12      	lsrs	r2, r2, #24
1a000b68:	70c2      	strb	r2, [r0, #3]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b6a:	7103      	strb	r3, [r0, #4]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000b70:	7142      	strb	r2, [r0, #5]
	*ptr++ = (BYTE)val; val >>= 8;
1a000b72:	f3c3 4207 	ubfx	r2, r3, #16, #8
1a000b76:	7182      	strb	r2, [r0, #6]
	*ptr++ = (BYTE)val;
1a000b78:	0e1b      	lsrs	r3, r3, #24
1a000b7a:	71c3      	strb	r3, [r0, #7]
}
1a000b7c:	4770      	bx	lr

1a000b7e <mem_cpy>:
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
1a000b7e:	4613      	mov	r3, r2
1a000b80:	b12a      	cbz	r2, 1a000b8e <mem_cpy+0x10>
		do {
			*d++ = *s++;
1a000b82:	780a      	ldrb	r2, [r1, #0]
1a000b84:	7002      	strb	r2, [r0, #0]
1a000b86:	3001      	adds	r0, #1
1a000b88:	3101      	adds	r1, #1
		} while (--cnt);
1a000b8a:	3b01      	subs	r3, #1
1a000b8c:	d1f9      	bne.n	1a000b82 <mem_cpy+0x4>
	}
}
1a000b8e:	4770      	bx	lr

1a000b90 <mem_set>:
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
1a000b90:	7001      	strb	r1, [r0, #0]
1a000b92:	3001      	adds	r0, #1
	} while (--cnt);
1a000b94:	3a01      	subs	r2, #1
1a000b96:	d1fb      	bne.n	1a000b90 <mem_set>
}
1a000b98:	4770      	bx	lr

1a000b9a <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
1a000b9a:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000b9c:	1c45      	adds	r5, r0, #1
1a000b9e:	7803      	ldrb	r3, [r0, #0]
1a000ba0:	7808      	ldrb	r0, [r1, #0]
1a000ba2:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a000ba4:	3a01      	subs	r2, #1
1a000ba6:	d004      	beq.n	1a000bb2 <mem_cmp+0x18>
1a000ba8:	1c4c      	adds	r4, r1, #1
		r = *d++ - *s++;
1a000baa:	4628      	mov	r0, r5
1a000bac:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a000bae:	2b00      	cmp	r3, #0
1a000bb0:	d0f4      	beq.n	1a000b9c <mem_cmp+0x2>

	return r;
}
1a000bb2:	4618      	mov	r0, r3
1a000bb4:	bc30      	pop	{r4, r5}
1a000bb6:	4770      	bx	lr

1a000bb8 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
1a000bb8:	e000      	b.n	1a000bbc <chk_chr+0x4>
1a000bba:	3001      	adds	r0, #1
1a000bbc:	7803      	ldrb	r3, [r0, #0]
1a000bbe:	b10b      	cbz	r3, 1a000bc4 <chk_chr+0xc>
1a000bc0:	428b      	cmp	r3, r1
1a000bc2:	d1fa      	bne.n	1a000bba <chk_chr+0x2>
	return *str;
}
1a000bc4:	4618      	mov	r0, r3
1a000bc6:	4770      	bx	lr

1a000bc8 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
1a000bc8:	2000      	movs	r0, #0
1a000bca:	4770      	bx	lr

1a000bcc <tchar2uni>:
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
	DWORD uc;
	const TCHAR *p = *str;
1a000bcc:	6802      	ldr	r2, [r0, #0]

#elif FF_LFN_UNICODE == 2	/* UTF-8 input */
	BYTE b;
	int nf;

	uc = (BYTE)*p++;	/* Get a unit */
1a000bce:	1c53      	adds	r3, r2, #1
1a000bd0:	7811      	ldrb	r1, [r2, #0]
1a000bd2:	460a      	mov	r2, r1
	if (uc & 0x80) {	/* Multiple byte code? */
1a000bd4:	f011 0f80 	tst.w	r1, #128	; 0x80
1a000bd8:	d101      	bne.n	1a000bde <tchar2uni+0x12>
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
	}
	uc = wc;

#endif
	*str = p;	/* Next read pointer */
1a000bda:	6003      	str	r3, [r0, #0]
1a000bdc:	e046      	b.n	1a000c6c <tchar2uni+0xa0>
		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
1a000bde:	f001 02e0 	and.w	r2, r1, #224	; 0xe0
1a000be2:	2ac0      	cmp	r2, #192	; 0xc0
1a000be4:	d00b      	beq.n	1a000bfe <tchar2uni+0x32>
			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
1a000be6:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
1a000bea:	2ae0      	cmp	r2, #224	; 0xe0
1a000bec:	d036      	beq.n	1a000c5c <tchar2uni+0x90>
				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
1a000bee:	f001 02f8 	and.w	r2, r1, #248	; 0xf8
1a000bf2:	2af0      	cmp	r2, #240	; 0xf0
1a000bf4:	d138      	bne.n	1a000c68 <tchar2uni+0x9c>
					uc &= 0x07; nf = 3;
1a000bf6:	f001 0207 	and.w	r2, r1, #7
1a000bfa:	2103      	movs	r1, #3
1a000bfc:	e002      	b.n	1a000c04 <tchar2uni+0x38>
			uc &= 0x1F; nf = 1;
1a000bfe:	f001 021f 	and.w	r2, r1, #31
1a000c02:	2101      	movs	r1, #1
{
1a000c04:	b430      	push	{r4, r5}
			b = (BYTE)*p++;
1a000c06:	1c5d      	adds	r5, r3, #1
1a000c08:	781b      	ldrb	r3, [r3, #0]
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000c0a:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
1a000c0e:	2c80      	cmp	r4, #128	; 0x80
1a000c10:	d12e      	bne.n	1a000c70 <tchar2uni+0xa4>
			uc = uc << 6 | (b & 0x3F);
1a000c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000c16:	ea43 1282 	orr.w	r2, r3, r2, lsl #6
			b = (BYTE)*p++;
1a000c1a:	462b      	mov	r3, r5
		} while (--nf != 0);
1a000c1c:	3901      	subs	r1, #1
1a000c1e:	d1f2      	bne.n	1a000c06 <tchar2uni+0x3a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000c20:	2a7f      	cmp	r2, #127	; 0x7f
1a000c22:	d928      	bls.n	1a000c76 <tchar2uni+0xaa>
1a000c24:	f5a2 4358 	sub.w	r3, r2, #55296	; 0xd800
1a000c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
1a000c2c:	d326      	bcc.n	1a000c7c <tchar2uni+0xb0>
1a000c2e:	f5b2 1f88 	cmp.w	r2, #1114112	; 0x110000
1a000c32:	d226      	bcs.n	1a000c82 <tchar2uni+0xb6>
		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a surrogate pair if needed */
1a000c34:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
1a000c38:	d314      	bcc.n	1a000c64 <tchar2uni+0x98>
1a000c3a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
1a000c3e:	4b12      	ldr	r3, [pc, #72]	; (1a000c88 <tchar2uni+0xbc>)
1a000c40:	ea03 1381 	and.w	r3, r3, r1, lsl #6
1a000c44:	f3c2 0209 	ubfx	r2, r2, #0, #10
1a000c48:	431a      	orrs	r2, r3
1a000c4a:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
1a000c4e:	f442 425c 	orr.w	r2, r2, #56320	; 0xdc00
			b = (BYTE)*p++;
1a000c52:	462b      	mov	r3, r5
	*str = p;	/* Next read pointer */
1a000c54:	6003      	str	r3, [r0, #0]
	return uc;
}
1a000c56:	4610      	mov	r0, r2
1a000c58:	bc30      	pop	{r4, r5}
1a000c5a:	4770      	bx	lr
				uc &= 0x0F; nf = 2;
1a000c5c:	f001 020f 	and.w	r2, r1, #15
1a000c60:	2102      	movs	r1, #2
1a000c62:	e7cf      	b.n	1a000c04 <tchar2uni+0x38>
			b = (BYTE)*p++;
1a000c64:	462b      	mov	r3, r5
1a000c66:	e7f5      	b.n	1a000c54 <tchar2uni+0x88>
					return 0xFFFFFFFF;
1a000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
1a000c6c:	4610      	mov	r0, r2
1a000c6e:	4770      	bx	lr
			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
1a000c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c74:	e7ef      	b.n	1a000c56 <tchar2uni+0x8a>
		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
1a000c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c7a:	e7ec      	b.n	1a000c56 <tchar2uni+0x8a>
1a000c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c80:	e7e9      	b.n	1a000c56 <tchar2uni+0x8a>
1a000c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a000c86:	e7e6      	b.n	1a000c56 <tchar2uni+0x8a>
1a000c88:	03ff0000 	.word	0x03ff0000

1a000c8c <clst2sect>:
static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
1a000c8c:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000c8e:	69c3      	ldr	r3, [r0, #28]
1a000c90:	3b02      	subs	r3, #2
1a000c92:	428b      	cmp	r3, r1
1a000c94:	d904      	bls.n	1a000ca0 <clst2sect+0x14>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
1a000c96:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a000c98:	8940      	ldrh	r0, [r0, #10]
1a000c9a:	fb01 3000 	mla	r0, r1, r0, r3
1a000c9e:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
1a000ca0:	2000      	movs	r0, #0
}
1a000ca2:	4770      	bx	lr

1a000ca4 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
1a000ca4:	b570      	push	{r4, r5, r6, lr}
1a000ca6:	4606      	mov	r6, r0
1a000ca8:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000caa:	f101 001a 	add.w	r0, r1, #26
1a000cae:	f7ff fee1 	bl	1a000a74 <ld_word>
	if (fs->fs_type == FS_FAT32) {
1a000cb2:	7833      	ldrb	r3, [r6, #0]
1a000cb4:	2b03      	cmp	r3, #3
1a000cb6:	d000      	beq.n	1a000cba <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
1a000cb8:	bd70      	pop	{r4, r5, r6, pc}
1a000cba:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000cbc:	f105 0014 	add.w	r0, r5, #20
1a000cc0:	f7ff fed8 	bl	1a000a74 <ld_word>
1a000cc4:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
1a000cc8:	e7f6      	b.n	1a000cb8 <ld_clust+0x14>

1a000cca <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000cca:	b570      	push	{r4, r5, r6, lr}
1a000ccc:	4606      	mov	r6, r0
1a000cce:	460c      	mov	r4, r1
1a000cd0:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000cd2:	b291      	uxth	r1, r2
1a000cd4:	f104 001a 	add.w	r0, r4, #26
1a000cd8:	f7ff ff30 	bl	1a000b3c <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000cdc:	7833      	ldrb	r3, [r6, #0]
1a000cde:	2b03      	cmp	r3, #3
1a000ce0:	d000      	beq.n	1a000ce4 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
1a000ce2:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000ce4:	0c29      	lsrs	r1, r5, #16
1a000ce6:	f104 0014 	add.w	r0, r4, #20
1a000cea:	f7ff ff27 	bl	1a000b3c <st_word>
}
1a000cee:	e7f8      	b.n	1a000ce2 <st_clust+0x18>

1a000cf0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
1a000cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000cf4:	4607      	mov	r7, r0
1a000cf6:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000cf8:	f101 001a 	add.w	r0, r1, #26
1a000cfc:	f7ff feba 	bl	1a000a74 <ld_word>
1a000d00:	bb60      	cbnz	r0, 1a000d5c <pick_lfn+0x6c>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1a000d02:	7835      	ldrb	r5, [r6, #0]
1a000d04:	f025 0540 	bic.w	r5, r5, #64	; 0x40
1a000d08:	3d01      	subs	r5, #1
1a000d0a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000d0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000d12:	f04f 0801 	mov.w	r8, #1
1a000d16:	2400      	movs	r4, #0
1a000d18:	e004      	b.n	1a000d24 <pick_lfn+0x34>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc != 0) {
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000d1e:	4298      	cmp	r0, r3
1a000d20:	d121      	bne.n	1a000d66 <pick_lfn+0x76>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a000d22:	3401      	adds	r4, #1
1a000d24:	2c0c      	cmp	r4, #12
1a000d26:	d80e      	bhi.n	1a000d46 <pick_lfn+0x56>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a000d28:	4b12      	ldr	r3, [pc, #72]	; (1a000d74 <pick_lfn+0x84>)
1a000d2a:	5d18      	ldrb	r0, [r3, r4]
1a000d2c:	4430      	add	r0, r6
1a000d2e:	f7ff fea1 	bl	1a000a74 <ld_word>
		if (wc != 0) {
1a000d32:	f1b8 0f00 	cmp.w	r8, #0
1a000d36:	d0f0      	beq.n	1a000d1a <pick_lfn+0x2a>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000d38:	2dfe      	cmp	r5, #254	; 0xfe
1a000d3a:	d812      	bhi.n	1a000d62 <pick_lfn+0x72>
			lfnbuf[i++] = wc = uc;			/* Store it */
1a000d3c:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
1a000d40:	4680      	mov	r8, r0
1a000d42:	3501      	adds	r5, #1
1a000d44:	e7ed      	b.n	1a000d22 <pick_lfn+0x32>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
1a000d46:	7833      	ldrb	r3, [r6, #0]
1a000d48:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000d4c:	d00d      	beq.n	1a000d6a <pick_lfn+0x7a>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000d4e:	2dfe      	cmp	r5, #254	; 0xfe
1a000d50:	d80d      	bhi.n	1a000d6e <pick_lfn+0x7e>
		lfnbuf[i] = 0;
1a000d52:	2300      	movs	r3, #0
1a000d54:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
1a000d58:	2001      	movs	r0, #1
1a000d5a:	e000      	b.n	1a000d5e <pick_lfn+0x6e>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1a000d5c:	2000      	movs	r0, #0
}
1a000d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
1a000d62:	2000      	movs	r0, #0
1a000d64:	e7fb      	b.n	1a000d5e <pick_lfn+0x6e>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a000d66:	2000      	movs	r0, #0
1a000d68:	e7f9      	b.n	1a000d5e <pick_lfn+0x6e>
	return 1;		/* The part of LFN is valid */
1a000d6a:	2001      	movs	r0, #1
1a000d6c:	e7f7      	b.n	1a000d5e <pick_lfn+0x6e>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
1a000d6e:	2000      	movs	r0, #0
1a000d70:	e7f5      	b.n	1a000d5e <pick_lfn+0x6e>
1a000d72:	bf00      	nop
1a000d74:	1a00969c 	.word	0x1a00969c

1a000d78 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
1a000d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000d7c:	4680      	mov	r8, r0
1a000d7e:	460f      	mov	r7, r1
1a000d80:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
1a000d82:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1a000d84:	230f      	movs	r3, #15
1a000d86:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
1a000d88:	2400      	movs	r4, #0
1a000d8a:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
1a000d8c:	4621      	mov	r1, r4
1a000d8e:	f107 001a 	add.w	r0, r7, #26
1a000d92:	f7ff fed3 	bl	1a000b3c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1a000d96:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
1a000d9a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
1a000d9e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
1a000da2:	4625      	mov	r5, r4
1a000da4:	e002      	b.n	1a000dac <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
1a000da6:	3401      	adds	r4, #1
1a000da8:	2c0c      	cmp	r4, #12
1a000daa:	d811      	bhi.n	1a000dd0 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1a000dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000db0:	429d      	cmp	r5, r3
1a000db2:	d002      	beq.n	1a000dba <put_lfn+0x42>
1a000db4:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a000db8:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
1a000dba:	4b0c      	ldr	r3, [pc, #48]	; (1a000dec <put_lfn+0x74>)
1a000dbc:	5d18      	ldrb	r0, [r3, r4]
1a000dbe:	4629      	mov	r1, r5
1a000dc0:	4438      	add	r0, r7
1a000dc2:	f7ff febb 	bl	1a000b3c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
1a000dc6:	2d00      	cmp	r5, #0
1a000dc8:	d1ed      	bne.n	1a000da6 <put_lfn+0x2e>
1a000dca:	f64f 75ff 	movw	r5, #65535	; 0xffff
1a000dce:	e7ea      	b.n	1a000da6 <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1a000dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000dd4:	429d      	cmp	r5, r3
1a000dd6:	d002      	beq.n	1a000dde <put_lfn+0x66>
1a000dd8:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
1a000ddc:	b90b      	cbnz	r3, 1a000de2 <put_lfn+0x6a>
1a000dde:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1a000de2:	f887 9000 	strb.w	r9, [r7]
}
1a000de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000dea:	bf00      	nop
1a000dec:	1a00969c 	.word	0x1a00969c

1a000df0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
1a000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000df2:	b083      	sub	sp, #12
1a000df4:	4607      	mov	r7, r0
1a000df6:	4615      	mov	r5, r2
1a000df8:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
1a000dfa:	220b      	movs	r2, #11
1a000dfc:	f7ff febf 	bl	1a000b7e <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
1a000e00:	2c05      	cmp	r4, #5
1a000e02:	d811      	bhi.n	1a000e28 <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC as hash value */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
1a000e04:	2607      	movs	r6, #7
1a000e06:	e01d      	b.n	1a000e44 <gen_numname+0x54>
1a000e08:	3201      	adds	r2, #1
1a000e0a:	2a0f      	cmp	r2, #15
1a000e0c:	d80c      	bhi.n	1a000e28 <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
1a000e0e:	f003 0101 	and.w	r1, r3, #1
1a000e12:	eb01 0444 	add.w	r4, r1, r4, lsl #1
				wc >>= 1;
1a000e16:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
1a000e18:	f414 3f80 	tst.w	r4, #65536	; 0x10000
1a000e1c:	d0f4      	beq.n	1a000e08 <gen_numname+0x18>
1a000e1e:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
1a000e22:	f084 0421 	eor.w	r4, r4, #33	; 0x21
1a000e26:	e7ef      	b.n	1a000e08 <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC as hash value */
1a000e28:	882b      	ldrh	r3, [r5, #0]
1a000e2a:	2b00      	cmp	r3, #0
1a000e2c:	d0ea      	beq.n	1a000e04 <gen_numname+0x14>
			wc = *lfn++;
1a000e2e:	3502      	adds	r5, #2
			for (i = 0; i < 16; i++) {
1a000e30:	2200      	movs	r2, #0
1a000e32:	e7ea      	b.n	1a000e0a <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
1a000e34:	1e75      	subs	r5, r6, #1
1a000e36:	aa02      	add	r2, sp, #8
1a000e38:	4432      	add	r2, r6
1a000e3a:	f802 3c08 	strb.w	r3, [r2, #-8]
		seq /= 16;
	} while (seq);
1a000e3e:	0924      	lsrs	r4, r4, #4
1a000e40:	d009      	beq.n	1a000e56 <gen_numname+0x66>
		ns[i--] = c;
1a000e42:	462e      	mov	r6, r5
		c = (BYTE)((seq % 16) + '0');
1a000e44:	f004 020f 	and.w	r2, r4, #15
1a000e48:	f102 0330 	add.w	r3, r2, #48	; 0x30
		if (c > '9') c += 7;
1a000e4c:	2b39      	cmp	r3, #57	; 0x39
1a000e4e:	d9f1      	bls.n	1a000e34 <gen_numname+0x44>
1a000e50:	f102 0337 	add.w	r3, r2, #55	; 0x37
1a000e54:	e7ee      	b.n	1a000e34 <gen_numname+0x44>
	ns[i] = '~';
1a000e56:	227e      	movs	r2, #126	; 0x7e
1a000e58:	ab02      	add	r3, sp, #8
1a000e5a:	442b      	add	r3, r5
1a000e5c:	f803 2c08 	strb.w	r2, [r3, #-8]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
1a000e60:	e000      	b.n	1a000e64 <gen_numname+0x74>
1a000e62:	3401      	adds	r4, #1
1a000e64:	42ac      	cmp	r4, r5
1a000e66:	d211      	bcs.n	1a000e8c <gen_numname+0x9c>
1a000e68:	5d38      	ldrb	r0, [r7, r4]
1a000e6a:	2820      	cmp	r0, #32
1a000e6c:	d00e      	beq.n	1a000e8c <gen_numname+0x9c>
		if (dbc_1st(dst[j])) {
1a000e6e:	f7ff feab 	bl	1a000bc8 <dbc_1st>
1a000e72:	2800      	cmp	r0, #0
1a000e74:	d0f5      	beq.n	1a000e62 <gen_numname+0x72>
			if (j == i - 1) break;
1a000e76:	1eb3      	subs	r3, r6, #2
1a000e78:	42a3      	cmp	r3, r4
1a000e7a:	d007      	beq.n	1a000e8c <gen_numname+0x9c>
			j++;
1a000e7c:	3401      	adds	r4, #1
1a000e7e:	e7f0      	b.n	1a000e62 <gen_numname+0x72>
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000e80:	2220      	movs	r2, #32
1a000e82:	1c63      	adds	r3, r4, #1
1a000e84:	553a      	strb	r2, [r7, r4]
	} while (j < 8);
1a000e86:	2b07      	cmp	r3, #7
1a000e88:	d808      	bhi.n	1a000e9c <gen_numname+0xac>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
1a000e8a:	461c      	mov	r4, r3
1a000e8c:	2d07      	cmp	r5, #7
1a000e8e:	d8f7      	bhi.n	1a000e80 <gen_numname+0x90>
1a000e90:	ab02      	add	r3, sp, #8
1a000e92:	442b      	add	r3, r5
1a000e94:	f813 2c08 	ldrb.w	r2, [r3, #-8]
1a000e98:	3501      	adds	r5, #1
1a000e9a:	e7f2      	b.n	1a000e82 <gen_numname+0x92>
}
1a000e9c:	b003      	add	sp, #12
1a000e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a000ea0 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
1a000ea0:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
1a000ea2:	220b      	movs	r2, #11
	BYTE sum = 0;
1a000ea4:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
1a000ea6:	01c3      	lsls	r3, r0, #7
1a000ea8:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
1a000eac:	7808      	ldrb	r0, [r1, #0]
1a000eae:	fa50 f383 	uxtab	r3, r0, r3
1a000eb2:	b2d8      	uxtb	r0, r3
1a000eb4:	3101      	adds	r1, #1
	} while (--n);
1a000eb6:	3a01      	subs	r2, #1
1a000eb8:	d1f5      	bne.n	1a000ea6 <sum_sfn+0x6>
	return sum;
}
1a000eba:	4770      	bx	lr

1a000ebc <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
1a000ebc:	b430      	push	{r4, r5}
1a000ebe:	4605      	mov	r5, r0
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
1a000ec0:	7841      	ldrb	r1, [r0, #1]
1a000ec2:	3101      	adds	r1, #1
1a000ec4:	0149      	lsls	r1, r1, #5
	for (i = sum = 0; i < szblk; i++) {
1a000ec6:	2000      	movs	r0, #0
1a000ec8:	4603      	mov	r3, r0
1a000eca:	e001      	b.n	1a000ed0 <xdir_sum+0x14>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
			i++;
1a000ecc:	3301      	adds	r3, #1
	for (i = sum = 0; i < szblk; i++) {
1a000ece:	3301      	adds	r3, #1
1a000ed0:	428b      	cmp	r3, r1
1a000ed2:	d209      	bcs.n	1a000ee8 <xdir_sum+0x2c>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
1a000ed4:	2b02      	cmp	r3, #2
1a000ed6:	d0f9      	beq.n	1a000ecc <xdir_sum+0x10>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
1a000ed8:	0842      	lsrs	r2, r0, #1
1a000eda:	eb02 32c0 	add.w	r2, r2, r0, lsl #15
1a000ede:	5cec      	ldrb	r4, [r5, r3]
1a000ee0:	fa14 f282 	uxtah	r2, r4, r2
1a000ee4:	b290      	uxth	r0, r2
1a000ee6:	e7f2      	b.n	1a000ece <xdir_sum+0x12>
		}
	}
	return sum;
}
1a000ee8:	bc30      	pop	{r4, r5}
1a000eea:	4770      	bx	lr

1a000eec <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
1a000eec:	b538      	push	{r3, r4, r5, lr}
1a000eee:	4605      	mov	r5, r0
1a000ef0:	460c      	mov	r4, r1
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
1a000ef2:	6900      	ldr	r0, [r0, #16]
1a000ef4:	3034      	adds	r0, #52	; 0x34
1a000ef6:	f7ff fdc2 	bl	1a000a7e <ld_dword>
1a000efa:	60a0      	str	r0, [r4, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
1a000efc:	6928      	ldr	r0, [r5, #16]
1a000efe:	3038      	adds	r0, #56	; 0x38
1a000f00:	f7ff fdc8 	bl	1a000a94 <ld_qword>
1a000f04:	e9c4 0104 	strd	r0, r1, [r4, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
1a000f08:	692b      	ldr	r3, [r5, #16]
1a000f0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
1a000f0e:	f003 0302 	and.w	r3, r3, #2
1a000f12:	71e3      	strb	r3, [r4, #7]
	obj->n_frag = 0;										/* No last fragment info */
1a000f14:	2300      	movs	r3, #0
1a000f16:	61e3      	str	r3, [r4, #28]
}
1a000f18:	bd38      	pop	{r3, r4, r5, pc}
1a000f1a:	Address 0x000000001a000f1a is out of bounds.


1a000f1c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
1a000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
1a000f1e:	6807      	ldr	r7, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
1a000f20:	2f00      	cmp	r7, #0
1a000f22:	d04a      	beq.n	1a000fba <get_ldnumber+0x9e>
	tt = tp = *path;
1a000f24:	463a      	mov	r2, r7
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
1a000f26:	1c54      	adds	r4, r2, #1
1a000f28:	7813      	ldrb	r3, [r2, #0]
1a000f2a:	2b1f      	cmp	r3, #31
1a000f2c:	d902      	bls.n	1a000f34 <get_ldnumber+0x18>
1a000f2e:	4622      	mov	r2, r4
1a000f30:	2b3a      	cmp	r3, #58	; 0x3a
1a000f32:	d1f8      	bne.n	1a000f26 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
1a000f34:	2b3a      	cmp	r3, #58	; 0x3a
1a000f36:	d003      	beq.n	1a000f40 <get_ldnumber+0x24>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
1a000f38:	f04f 0e00 	mov.w	lr, #0
}
1a000f3c:	4670      	mov	r0, lr
1a000f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
1a000f40:	f897 e000 	ldrb.w	lr, [r7]
1a000f44:	f1ae 0330 	sub.w	r3, lr, #48	; 0x30
1a000f48:	b2db      	uxtb	r3, r3
1a000f4a:	2b09      	cmp	r3, #9
1a000f4c:	d808      	bhi.n	1a000f60 <get_ldnumber+0x44>
1a000f4e:	1cbb      	adds	r3, r7, #2
1a000f50:	42a3      	cmp	r3, r4
1a000f52:	d002      	beq.n	1a000f5a <get_ldnumber+0x3e>
1a000f54:	f04f 0e00 	mov.w	lr, #0
1a000f58:	e004      	b.n	1a000f64 <get_ldnumber+0x48>
			i = (int)*tp - '0';	/* Get the LD number */
1a000f5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
1a000f5e:	e027      	b.n	1a000fb0 <get_ldnumber+0x94>
1a000f60:	f04f 0e00 	mov.w	lr, #0
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
1a000f64:	4b18      	ldr	r3, [pc, #96]	; (1a000fc8 <get_ldnumber+0xac>)
1a000f66:	f853 502e 	ldr.w	r5, [r3, lr, lsl #2]
1a000f6a:	4639      	mov	r1, r7
1a000f6c:	e004      	b.n	1a000f78 <get_ldnumber+0x5c>
				} while (c && (TCHAR)c == tc);
1a000f6e:	b1bb      	cbz	r3, 1a000fa0 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000f70:	4631      	mov	r1, r6
1a000f72:	4665      	mov	r5, ip
				} while (c && (TCHAR)c == tc);
1a000f74:	429a      	cmp	r2, r3
1a000f76:	d113      	bne.n	1a000fa0 <get_ldnumber+0x84>
					c = *sp++; tc = *tp++;
1a000f78:	f105 0c01 	add.w	ip, r5, #1
1a000f7c:	782b      	ldrb	r3, [r5, #0]
1a000f7e:	1c4e      	adds	r6, r1, #1
1a000f80:	780a      	ldrb	r2, [r1, #0]
					if (IsLower(c)) c -= 0x20;
1a000f82:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
1a000f86:	b2c9      	uxtb	r1, r1
1a000f88:	2919      	cmp	r1, #25
1a000f8a:	d801      	bhi.n	1a000f90 <get_ldnumber+0x74>
1a000f8c:	3b20      	subs	r3, #32
1a000f8e:	b2db      	uxtb	r3, r3
					if (IsLower(tc)) tc -= 0x20;
1a000f90:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
1a000f94:	b2c9      	uxtb	r1, r1
1a000f96:	2919      	cmp	r1, #25
1a000f98:	d8e9      	bhi.n	1a000f6e <get_ldnumber+0x52>
1a000f9a:	3a20      	subs	r2, #32
1a000f9c:	b2d2      	uxtb	r2, r2
1a000f9e:	e7e6      	b.n	1a000f6e <get_ldnumber+0x52>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
1a000fa0:	b90b      	cbnz	r3, 1a000fa6 <get_ldnumber+0x8a>
1a000fa2:	42b4      	cmp	r4, r6
1a000fa4:	d004      	beq.n	1a000fb0 <get_ldnumber+0x94>
1a000fa6:	f10e 0e01 	add.w	lr, lr, #1
1a000faa:	f1be 0f01 	cmp.w	lr, #1
1a000fae:	ddd9      	ble.n	1a000f64 <get_ldnumber+0x48>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
1a000fb0:	f1be 0f01 	cmp.w	lr, #1
1a000fb4:	dc04      	bgt.n	1a000fc0 <get_ldnumber+0xa4>
			*path = tt;		/* Snip the drive prefix off */
1a000fb6:	6004      	str	r4, [r0, #0]
1a000fb8:	e7c0      	b.n	1a000f3c <get_ldnumber+0x20>
	if (!tp) return vol;	/* Invalid path name? */
1a000fba:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000fbe:	e7bd      	b.n	1a000f3c <get_ldnumber+0x20>
	int i, vol = -1;
1a000fc0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
1a000fc4:	e7ba      	b.n	1a000f3c <get_ldnumber+0x20>
1a000fc6:	bf00      	nop
1a000fc8:	1a0096ac 	.word	0x1a0096ac

1a000fcc <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
1a000fcc:	b538      	push	{r3, r4, r5, lr}
1a000fce:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
1a000fd0:	b1a8      	cbz	r0, 1a000ffe <validate+0x32>
1a000fd2:	4604      	mov	r4, r0
1a000fd4:	6803      	ldr	r3, [r0, #0]
1a000fd6:	b1ab      	cbz	r3, 1a001004 <validate+0x38>
1a000fd8:	781a      	ldrb	r2, [r3, #0]
1a000fda:	b1aa      	cbz	r2, 1a001008 <validate+0x3c>
1a000fdc:	8881      	ldrh	r1, [r0, #4]
1a000fde:	88da      	ldrh	r2, [r3, #6]
1a000fe0:	4291      	cmp	r1, r2
1a000fe2:	d003      	beq.n	1a000fec <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
1a000fe4:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000fe6:	2300      	movs	r3, #0
1a000fe8:	602b      	str	r3, [r5, #0]
	return res;
}
1a000fea:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
1a000fec:	7858      	ldrb	r0, [r3, #1]
1a000fee:	f004 fb05 	bl	1a0055fc <disk_status>
1a000ff2:	f010 0f01 	tst.w	r0, #1
1a000ff6:	d10a      	bne.n	1a00100e <validate+0x42>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a000ff8:	6823      	ldr	r3, [r4, #0]
			res = FR_OK;
1a000ffa:	2000      	movs	r0, #0
1a000ffc:	e7f4      	b.n	1a000fe8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a000ffe:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001000:	2300      	movs	r3, #0
1a001002:	e7f1      	b.n	1a000fe8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a001004:	2009      	movs	r0, #9
1a001006:	e7ef      	b.n	1a000fe8 <validate+0x1c>
1a001008:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a00100a:	2300      	movs	r3, #0
1a00100c:	e7ec      	b.n	1a000fe8 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
1a00100e:	2009      	movs	r0, #9
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
1a001010:	2300      	movs	r3, #0
1a001012:	e7e9      	b.n	1a000fe8 <validate+0x1c>

1a001014 <sync_window>:
{
1a001014:	b538      	push	{r3, r4, r5, lr}
	if (fs->wflag) {	/* Is the disk access window dirty */
1a001016:	78c3      	ldrb	r3, [r0, #3]
1a001018:	b90b      	cbnz	r3, 1a00101e <sync_window+0xa>
	FRESULT res = FR_OK;
1a00101a:	2000      	movs	r0, #0
}
1a00101c:	bd38      	pop	{r3, r4, r5, pc}
1a00101e:	4604      	mov	r4, r0
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
1a001020:	f100 0538 	add.w	r5, r0, #56	; 0x38
1a001024:	2301      	movs	r3, #1
1a001026:	6b42      	ldr	r2, [r0, #52]	; 0x34
1a001028:	4629      	mov	r1, r5
1a00102a:	7840      	ldrb	r0, [r0, #1]
1a00102c:	f004 fb04 	bl	1a005638 <disk_write>
1a001030:	b9a0      	cbnz	r0, 1a00105c <sync_window+0x48>
			fs->wflag = 0;	/* Clear window dirty flag */
1a001032:	2300      	movs	r3, #0
1a001034:	70e3      	strb	r3, [r4, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
1a001036:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
1a00103a:	1acb      	subs	r3, r1, r3
1a00103c:	6a22      	ldr	r2, [r4, #32]
1a00103e:	4293      	cmp	r3, r2
1a001040:	d20e      	bcs.n	1a001060 <sync_window+0x4c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a001042:	78a3      	ldrb	r3, [r4, #2]
1a001044:	2b02      	cmp	r3, #2
1a001046:	d001      	beq.n	1a00104c <sync_window+0x38>
	FRESULT res = FR_OK;
1a001048:	2000      	movs	r0, #0
1a00104a:	e7e7      	b.n	1a00101c <sync_window+0x8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
1a00104c:	2301      	movs	r3, #1
1a00104e:	440a      	add	r2, r1
1a001050:	4629      	mov	r1, r5
1a001052:	7860      	ldrb	r0, [r4, #1]
1a001054:	f004 faf0 	bl	1a005638 <disk_write>
	FRESULT res = FR_OK;
1a001058:	2000      	movs	r0, #0
1a00105a:	e7df      	b.n	1a00101c <sync_window+0x8>
			res = FR_DISK_ERR;
1a00105c:	2001      	movs	r0, #1
1a00105e:	e7dd      	b.n	1a00101c <sync_window+0x8>
	FRESULT res = FR_OK;
1a001060:	2000      	movs	r0, #0
1a001062:	e7db      	b.n	1a00101c <sync_window+0x8>

1a001064 <move_window>:
{
1a001064:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
1a001066:	6b43      	ldr	r3, [r0, #52]	; 0x34
1a001068:	428b      	cmp	r3, r1
1a00106a:	d012      	beq.n	1a001092 <move_window+0x2e>
1a00106c:	4604      	mov	r4, r0
1a00106e:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
1a001070:	f7ff ffd0 	bl	1a001014 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
1a001074:	4606      	mov	r6, r0
1a001076:	b968      	cbnz	r0, 1a001094 <move_window+0x30>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
1a001078:	2301      	movs	r3, #1
1a00107a:	462a      	mov	r2, r5
1a00107c:	f104 0138 	add.w	r1, r4, #56	; 0x38
1a001080:	7860      	ldrb	r0, [r4, #1]
1a001082:	f004 fac9 	bl	1a005618 <disk_read>
1a001086:	b110      	cbz	r0, 1a00108e <move_window+0x2a>
				res = FR_DISK_ERR;
1a001088:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
1a00108a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
1a00108e:	6365      	str	r5, [r4, #52]	; 0x34
1a001090:	e000      	b.n	1a001094 <move_window+0x30>
	FRESULT res = FR_OK;
1a001092:	2600      	movs	r6, #0
}
1a001094:	4630      	mov	r0, r6
1a001096:	bd70      	pop	{r4, r5, r6, pc}

1a001098 <check_fs>:
{
1a001098:	b510      	push	{r4, lr}
1a00109a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a00109c:	2300      	movs	r3, #0
1a00109e:	70c3      	strb	r3, [r0, #3]
1a0010a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0010a4:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0010a6:	f7ff ffdd 	bl	1a001064 <move_window>
1a0010aa:	bb30      	cbnz	r0, 1a0010fa <check_fs+0x62>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a0010ac:	f204 2036 	addw	r0, r4, #566	; 0x236
1a0010b0:	f7ff fce0 	bl	1a000a74 <ld_word>
1a0010b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a0010b8:	4298      	cmp	r0, r3
1a0010ba:	d120      	bne.n	1a0010fe <check_fs+0x66>
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a0010bc:	220b      	movs	r2, #11
1a0010be:	4914      	ldr	r1, [pc, #80]	; (1a001110 <check_fs+0x78>)
1a0010c0:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0010c4:	f7ff fd69 	bl	1a000b9a <mem_cmp>
1a0010c8:	b1d8      	cbz	r0, 1a001102 <check_fs+0x6a>
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
1a0010ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
1a0010ce:	2be9      	cmp	r3, #233	; 0xe9
1a0010d0:	d003      	beq.n	1a0010da <check_fs+0x42>
1a0010d2:	2beb      	cmp	r3, #235	; 0xeb
1a0010d4:	d001      	beq.n	1a0010da <check_fs+0x42>
1a0010d6:	2be8      	cmp	r3, #232	; 0xe8
1a0010d8:	d115      	bne.n	1a001106 <check_fs+0x6e>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a0010da:	2203      	movs	r2, #3
1a0010dc:	490d      	ldr	r1, [pc, #52]	; (1a001114 <check_fs+0x7c>)
1a0010de:	f104 006e 	add.w	r0, r4, #110	; 0x6e
1a0010e2:	f7ff fd5a 	bl	1a000b9a <mem_cmp>
1a0010e6:	b180      	cbz	r0, 1a00110a <check_fs+0x72>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
1a0010e8:	2205      	movs	r2, #5
1a0010ea:	490b      	ldr	r1, [pc, #44]	; (1a001118 <check_fs+0x80>)
1a0010ec:	f104 008a 	add.w	r0, r4, #138	; 0x8a
1a0010f0:	f7ff fd53 	bl	1a000b9a <mem_cmp>
1a0010f4:	b120      	cbz	r0, 1a001100 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a0010f6:	2002      	movs	r0, #2
1a0010f8:	e002      	b.n	1a001100 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0010fa:	2004      	movs	r0, #4
1a0010fc:	e000      	b.n	1a001100 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
1a0010fe:	2003      	movs	r0, #3
}
1a001100:	bd10      	pop	{r4, pc}
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
1a001102:	2001      	movs	r0, #1
1a001104:	e7fc      	b.n	1a001100 <check_fs+0x68>
	return 2;	/* Valid BS but not FAT */
1a001106:	2002      	movs	r0, #2
1a001108:	e7fa      	b.n	1a001100 <check_fs+0x68>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
1a00110a:	2000      	movs	r0, #0
1a00110c:	e7f8      	b.n	1a001100 <check_fs+0x68>
1a00110e:	bf00      	nop
1a001110:	1a0096b4 	.word	0x1a0096b4
1a001114:	1a0096c0 	.word	0x1a0096c0
1a001118:	1a0096c4 	.word	0x1a0096c4

1a00111c <find_volume>:
{
1a00111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001120:	b084      	sub	sp, #16
1a001122:	460d      	mov	r5, r1
1a001124:	4617      	mov	r7, r2
	*rfs = 0;
1a001126:	2300      	movs	r3, #0
1a001128:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a00112a:	f7ff fef7 	bl	1a000f1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a00112e:	1e06      	subs	r6, r0, #0
1a001130:	f2c0 8205 	blt.w	1a00153e <find_volume+0x422>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
1a001134:	4bbf      	ldr	r3, [pc, #764]	; (1a001434 <find_volume+0x318>)
1a001136:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a00113a:	2c00      	cmp	r4, #0
1a00113c:	f000 8203 	beq.w	1a001546 <find_volume+0x42a>
	*rfs = fs;							/* Return pointer to the filesystem object */
1a001140:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
1a001142:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
1a001146:	7823      	ldrb	r3, [r4, #0]
1a001148:	b173      	cbz	r3, 1a001168 <find_volume+0x4c>
		stat = disk_status(fs->pdrv);
1a00114a:	7860      	ldrb	r0, [r4, #1]
1a00114c:	f004 fa56 	bl	1a0055fc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a001150:	f010 0f01 	tst.w	r0, #1
1a001154:	d108      	bne.n	1a001168 <find_volume+0x4c>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a001156:	2f00      	cmp	r7, #0
1a001158:	f000 81f7 	beq.w	1a00154a <find_volume+0x42e>
1a00115c:	f010 0f04 	tst.w	r0, #4
1a001160:	f040 81f5 	bne.w	1a00154e <find_volume+0x432>
			return FR_OK;				/* The filesystem object is valid */
1a001164:	2000      	movs	r0, #0
1a001166:	e1eb      	b.n	1a001540 <find_volume+0x424>
	fs->fs_type = 0;					/* Clear the filesystem object */
1a001168:	2300      	movs	r3, #0
1a00116a:	7023      	strb	r3, [r4, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a00116c:	4bb2      	ldr	r3, [pc, #712]	; (1a001438 <find_volume+0x31c>)
1a00116e:	f813 0016 	ldrb.w	r0, [r3, r6, lsl #1]
1a001172:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
1a001174:	f004 fa49 	bl	1a00560a <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a001178:	f010 0f01 	tst.w	r0, #1
1a00117c:	f040 81e9 	bne.w	1a001552 <find_volume+0x436>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a001180:	b11f      	cbz	r7, 1a00118a <find_volume+0x6e>
1a001182:	f010 0f04 	tst.w	r0, #4
1a001186:	f040 81e6 	bne.w	1a001556 <find_volume+0x43a>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a00118a:	2100      	movs	r1, #0
1a00118c:	4620      	mov	r0, r4
1a00118e:	f7ff ff83 	bl	1a001098 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001192:	2802      	cmp	r0, #2
1a001194:	f000 8095 	beq.w	1a0012c2 <find_volume+0x1a6>
1a001198:	2801      	cmp	r0, #1
1a00119a:	d975      	bls.n	1a001288 <find_volume+0x16c>
	bsect = 0;
1a00119c:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00119e:	2804      	cmp	r0, #4
1a0011a0:	f000 81db 	beq.w	1a00155a <find_volume+0x43e>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0011a4:	2801      	cmp	r0, #1
1a0011a6:	f200 81da 	bhi.w	1a00155e <find_volume+0x442>
	if (fmt == 1) {
1a0011aa:	f000 8120 	beq.w	1a0013ee <find_volume+0x2d2>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a0011ae:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a0011b2:	f7ff fc5f 	bl	1a000a74 <ld_word>
1a0011b6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0011ba:	f040 81e6 	bne.w	1a00158a <find_volume+0x46e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
1a0011be:	f104 004e 	add.w	r0, r4, #78	; 0x4e
1a0011c2:	f7ff fc57 	bl	1a000a74 <ld_word>
1a0011c6:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a0011c8:	b920      	cbnz	r0, 1a0011d4 <find_volume+0xb8>
1a0011ca:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0011ce:	f7ff fc56 	bl	1a000a7e <ld_dword>
1a0011d2:	4606      	mov	r6, r0
		fs->fsize = fasize;
1a0011d4:	6226      	str	r6, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
1a0011d6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
1a0011da:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a0011dc:	1e53      	subs	r3, r2, #1
1a0011de:	b2db      	uxtb	r3, r3
1a0011e0:	2b01      	cmp	r3, #1
1a0011e2:	f200 81d4 	bhi.w	1a00158e <find_volume+0x472>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
1a0011e6:	fb06 f502 	mul.w	r5, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
1a0011ea:	f894 8045 	ldrb.w	r8, [r4, #69]	; 0x45
1a0011ee:	f8a4 800a 	strh.w	r8, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a0011f2:	f1b8 0f00 	cmp.w	r8, #0
1a0011f6:	f000 81cc 	beq.w	1a001592 <find_volume+0x476>
1a0011fa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a0011fe:	ea18 0f03 	tst.w	r8, r3
1a001202:	f040 81c8 	bne.w	1a001596 <find_volume+0x47a>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a001206:	f104 0049 	add.w	r0, r4, #73	; 0x49
1a00120a:	f7ff fc33 	bl	1a000a74 <ld_word>
1a00120e:	4682      	mov	sl, r0
1a001210:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a001212:	f010 0f0f 	tst.w	r0, #15
1a001216:	f040 81c0 	bne.w	1a00159a <find_volume+0x47e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
1a00121a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
1a00121e:	f7ff fc29 	bl	1a000a74 <ld_word>
1a001222:	4681      	mov	r9, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a001224:	b920      	cbnz	r0, 1a001230 <find_volume+0x114>
1a001226:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00122a:	f7ff fc28 	bl	1a000a7e <ld_dword>
1a00122e:	4681      	mov	r9, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
1a001230:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a001234:	f7ff fc1e 	bl	1a000a74 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a001238:	4601      	mov	r1, r0
1a00123a:	2800      	cmp	r0, #0
1a00123c:	f000 81af 	beq.w	1a00159e <find_volume+0x482>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a001240:	1942      	adds	r2, r0, r5
1a001242:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a001246:	4591      	cmp	r9, r2
1a001248:	f0c0 81ab 	bcc.w	1a0015a2 <find_volume+0x486>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
1a00124c:	eba9 0302 	sub.w	r3, r9, r2
1a001250:	fbb3 f3f8 	udiv	r3, r3, r8
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a001254:	2b00      	cmp	r3, #0
1a001256:	f000 81a6 	beq.w	1a0015a6 <find_volume+0x48a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a00125a:	4878      	ldr	r0, [pc, #480]	; (1a00143c <find_volume+0x320>)
1a00125c:	4283      	cmp	r3, r0
1a00125e:	f240 80e5 	bls.w	1a00142c <find_volume+0x310>
		fmt = 0;
1a001262:	f04f 0900 	mov.w	r9, #0
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a001266:	f64f 70f5 	movw	r0, #65525	; 0xfff5
1a00126a:	4283      	cmp	r3, r0
1a00126c:	d801      	bhi.n	1a001272 <find_volume+0x156>
1a00126e:	f04f 0902 	mov.w	r9, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001272:	f640 70f5 	movw	r0, #4085	; 0xff5
1a001276:	4283      	cmp	r3, r0
1a001278:	f240 80e4 	bls.w	1a001444 <find_volume+0x328>
		if (fmt == 0) return FR_NO_FILESYSTEM;
1a00127c:	f1b9 0f00 	cmp.w	r9, #0
1a001280:	f040 80e2 	bne.w	1a001448 <find_volume+0x32c>
1a001284:	200d      	movs	r0, #13
1a001286:	e15b      	b.n	1a001540 <find_volume+0x424>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a001288:	4b6b      	ldr	r3, [pc, #428]	; (1a001438 <find_volume+0x31c>)
1a00128a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a00128e:	785b      	ldrb	r3, [r3, #1]
1a001290:	b9cb      	cbnz	r3, 1a0012c6 <find_volume+0x1aa>
	bsect = 0;
1a001292:	2700      	movs	r7, #0
1a001294:	e783      	b.n	1a00119e <find_volume+0x82>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a001296:	2000      	movs	r0, #0
1a001298:	ab04      	add	r3, sp, #16
1a00129a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00129e:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
1a0012a2:	3501      	adds	r5, #1
1a0012a4:	2d03      	cmp	r5, #3
1a0012a6:	d810      	bhi.n	1a0012ca <find_volume+0x1ae>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0012a8:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a0012ac:	012b      	lsls	r3, r5, #4
1a0012ae:	f503 73df 	add.w	r3, r3, #446	; 0x1be
1a0012b2:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0012b4:	7903      	ldrb	r3, [r0, #4]
1a0012b6:	2b00      	cmp	r3, #0
1a0012b8:	d0ed      	beq.n	1a001296 <find_volume+0x17a>
1a0012ba:	3008      	adds	r0, #8
1a0012bc:	f7ff fbdf 	bl	1a000a7e <ld_dword>
1a0012c0:	e7ea      	b.n	1a001298 <find_volume+0x17c>
1a0012c2:	2500      	movs	r5, #0
1a0012c4:	e7ee      	b.n	1a0012a4 <find_volume+0x188>
1a0012c6:	2500      	movs	r5, #0
1a0012c8:	e7ec      	b.n	1a0012a4 <find_volume+0x188>
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
1a0012ca:	4b5b      	ldr	r3, [pc, #364]	; (1a001438 <find_volume+0x31c>)
1a0012cc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a0012d0:	785d      	ldrb	r5, [r3, #1]
		if (i != 0) i--;
1a0012d2:	b19d      	cbz	r5, 1a0012fc <find_volume+0x1e0>
1a0012d4:	3d01      	subs	r5, #1
1a0012d6:	e011      	b.n	1a0012fc <find_volume+0x1e0>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a0012d8:	4639      	mov	r1, r7
1a0012da:	4620      	mov	r0, r4
1a0012dc:	f7ff fedc 	bl	1a001098 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
1a0012e0:	4b55      	ldr	r3, [pc, #340]	; (1a001438 <find_volume+0x31c>)
1a0012e2:	eb03 0346 	add.w	r3, r3, r6, lsl #1
1a0012e6:	785b      	ldrb	r3, [r3, #1]
1a0012e8:	2b00      	cmp	r3, #0
1a0012ea:	f47f af58 	bne.w	1a00119e <find_volume+0x82>
1a0012ee:	2801      	cmp	r0, #1
1a0012f0:	f67f af55 	bls.w	1a00119e <find_volume+0x82>
1a0012f4:	3501      	adds	r5, #1
1a0012f6:	2d03      	cmp	r5, #3
1a0012f8:	f63f af51 	bhi.w	1a00119e <find_volume+0x82>
			bsect = br[i];
1a0012fc:	ab04      	add	r3, sp, #16
1a0012fe:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a001302:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a001306:	2f00      	cmp	r7, #0
1a001308:	d1e6      	bne.n	1a0012d8 <find_volume+0x1bc>
1a00130a:	2003      	movs	r0, #3
1a00130c:	e7e8      	b.n	1a0012e0 <find_volume+0x1c4>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a00130e:	3301      	adds	r3, #1
1a001310:	2b3f      	cmp	r3, #63	; 0x3f
1a001312:	d804      	bhi.n	1a00131e <find_volume+0x202>
1a001314:	18e2      	adds	r2, r4, r3
1a001316:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a00131a:	2a00      	cmp	r2, #0
1a00131c:	d0f7      	beq.n	1a00130e <find_volume+0x1f2>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a00131e:	2b3f      	cmp	r3, #63	; 0x3f
1a001320:	f240 811f 	bls.w	1a001562 <find_volume+0x446>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001324:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
1a001328:	f7ff fba4 	bl	1a000a74 <ld_word>
1a00132c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
1a001330:	f040 8119 	bne.w	1a001566 <find_volume+0x44a>
		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
1a001334:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
1a001338:	2b09      	cmp	r3, #9
1a00133a:	f040 8116 	bne.w	1a00156a <find_volume+0x44e>
		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
1a00133e:	f104 0080 	add.w	r0, r4, #128	; 0x80
1a001342:	f7ff fba7 	bl	1a000a94 <ld_qword>
1a001346:	eb10 0807 	adds.w	r8, r0, r7
1a00134a:	f141 0900 	adc.w	r9, r1, #0
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a00134e:	f1b9 0f01 	cmp.w	r9, #1
1a001352:	bf08      	it	eq
1a001354:	f1b8 0f00 	cmpeq.w	r8, #0
1a001358:	f080 8109 	bcs.w	1a00156e <find_volume+0x452>
		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
1a00135c:	f104 008c 	add.w	r0, r4, #140	; 0x8c
1a001360:	f7ff fb8d 	bl	1a000a7e <ld_dword>
1a001364:	6220      	str	r0, [r4, #32]
		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
1a001366:	f894 30a6 	ldrb.w	r3, [r4, #166]	; 0xa6
1a00136a:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a00136c:	2b01      	cmp	r3, #1
1a00136e:	f040 8100 	bne.w	1a001572 <find_volume+0x456>
		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
1a001372:	f894 30a5 	ldrb.w	r3, [r4, #165]	; 0xa5
1a001376:	2501      	movs	r5, #1
1a001378:	409d      	lsls	r5, r3
1a00137a:	b2ad      	uxth	r5, r5
1a00137c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a00137e:	2d00      	cmp	r5, #0
1a001380:	f000 80f9 	beq.w	1a001576 <find_volume+0x45a>
		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
1a001384:	f104 0094 	add.w	r0, r4, #148	; 0x94
1a001388:	f7ff fb79 	bl	1a000a7e <ld_dword>
1a00138c:	4682      	mov	sl, r0
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00138e:	4b2c      	ldr	r3, [pc, #176]	; (1a001440 <find_volume+0x324>)
1a001390:	4298      	cmp	r0, r3
1a001392:	f200 80f2 	bhi.w	1a00157a <find_volume+0x45e>
		fs->n_fatent = nclst + 2;
1a001396:	1c83      	adds	r3, r0, #2
1a001398:	61e3      	str	r3, [r4, #28]
		fs->volbase = bsect;
1a00139a:	6267      	str	r7, [r4, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
1a00139c:	f104 0090 	add.w	r0, r4, #144	; 0x90
1a0013a0:	f7ff fb6d 	bl	1a000a7e <ld_dword>
1a0013a4:	19c6      	adds	r6, r0, r7
1a0013a6:	6326      	str	r6, [r4, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
1a0013a8:	f104 0088 	add.w	r0, r4, #136	; 0x88
1a0013ac:	f7ff fb67 	bl	1a000a7e <ld_dword>
1a0013b0:	4438      	add	r0, r7
1a0013b2:	62a0      	str	r0, [r4, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a0013b4:	fb0a f205 	mul.w	r2, sl, r5
1a0013b8:	2100      	movs	r1, #0
1a0013ba:	1992      	adds	r2, r2, r6
1a0013bc:	f141 0300 	adc.w	r3, r1, #0
1a0013c0:	4599      	cmp	r9, r3
1a0013c2:	bf08      	it	eq
1a0013c4:	4590      	cmpeq	r8, r2
1a0013c6:	f0c0 80da 	bcc.w	1a00157e <find_volume+0x462>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
1a0013ca:	f104 0098 	add.w	r0, r4, #152	; 0x98
1a0013ce:	f7ff fb56 	bl	1a000a7e <ld_dword>
1a0013d2:	4601      	mov	r1, r0
1a0013d4:	62e0      	str	r0, [r4, #44]	; 0x2c
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a0013d6:	4620      	mov	r0, r4
1a0013d8:	f7ff fc58 	bl	1a000c8c <clst2sect>
1a0013dc:	4601      	mov	r1, r0
1a0013de:	4620      	mov	r0, r4
1a0013e0:	f7ff fe40 	bl	1a001064 <move_window>
1a0013e4:	2800      	cmp	r0, #0
1a0013e6:	f040 80cc 	bne.w	1a001582 <find_volume+0x466>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0013ea:	2500      	movs	r5, #0
1a0013ec:	e002      	b.n	1a0013f4 <find_volume+0x2d8>
		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
1a0013ee:	230b      	movs	r3, #11
1a0013f0:	e78e      	b.n	1a001310 <find_volume+0x1f4>
		for (i = 0; i < SS(fs); i += SZDIRE) {
1a0013f2:	3520      	adds	r5, #32
1a0013f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0013f8:	d20d      	bcs.n	1a001416 <find_volume+0x2fa>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
1a0013fa:	1963      	adds	r3, r4, r5
1a0013fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001400:	2b81      	cmp	r3, #129	; 0x81
1a001402:	d1f6      	bne.n	1a0013f2 <find_volume+0x2d6>
1a001404:	f104 0338 	add.w	r3, r4, #56	; 0x38
1a001408:	f105 0014 	add.w	r0, r5, #20
1a00140c:	4418      	add	r0, r3
1a00140e:	f7ff fb36 	bl	1a000a7e <ld_dword>
1a001412:	2802      	cmp	r0, #2
1a001414:	d1ed      	bne.n	1a0013f2 <find_volume+0x2d6>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001416:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a00141a:	f000 80b4 	beq.w	1a001586 <find_volume+0x46a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a00141e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a001422:	61a3      	str	r3, [r4, #24]
1a001424:	6163      	str	r3, [r4, #20]
		fmt = FS_EXFAT;			/* FAT sub-type */
1a001426:	f04f 0904 	mov.w	r9, #4
1a00142a:	e037      	b.n	1a00149c <find_volume+0x380>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
1a00142c:	f04f 0903 	mov.w	r9, #3
1a001430:	e719      	b.n	1a001266 <find_volume+0x14a>
1a001432:	bf00      	nop
1a001434:	100007f8 	.word	0x100007f8
1a001438:	10000018 	.word	0x10000018
1a00143c:	0ffffff5 	.word	0x0ffffff5
1a001440:	7ffffffd 	.word	0x7ffffffd
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a001444:	f04f 0901 	mov.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
1a001448:	f103 0802 	add.w	r8, r3, #2
1a00144c:	f8c4 801c 	str.w	r8, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
1a001450:	6267      	str	r7, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
1a001452:	19cb      	adds	r3, r1, r7
1a001454:	62a3      	str	r3, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
1a001456:	443a      	add	r2, r7
1a001458:	6322      	str	r2, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
1a00145a:	f1b9 0f03 	cmp.w	r9, #3
1a00145e:	d02b      	beq.n	1a0014b8 <find_volume+0x39c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a001460:	f1ba 0f00 	cmp.w	sl, #0
1a001464:	f000 80a5 	beq.w	1a0015b2 <find_volume+0x496>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
1a001468:	442b      	add	r3, r5
1a00146a:	62e3      	str	r3, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a00146c:	f1b9 0f02 	cmp.w	r9, #2
1a001470:	d033      	beq.n	1a0014da <find_volume+0x3be>
1a001472:	eb08 0248 	add.w	r2, r8, r8, lsl #1
1a001476:	f008 0301 	and.w	r3, r8, #1
1a00147a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00147e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
1a001482:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
1a001486:	f0c0 8096 	bcc.w	1a0015b6 <find_volume+0x49a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a00148a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00148e:	61a3      	str	r3, [r4, #24]
1a001490:	6163      	str	r3, [r4, #20]
		fs->fsi_flag = 0x80;
1a001492:	2380      	movs	r3, #128	; 0x80
1a001494:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
1a001496:	f1b9 0f03 	cmp.w	r9, #3
1a00149a:	d021      	beq.n	1a0014e0 <find_volume+0x3c4>
	fs->fs_type = fmt;		/* FAT sub-type */
1a00149c:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* Volume mount ID */
1a0014a0:	4a46      	ldr	r2, [pc, #280]	; (1a0015bc <find_volume+0x4a0>)
1a0014a2:	8813      	ldrh	r3, [r2, #0]
1a0014a4:	3301      	adds	r3, #1
1a0014a6:	b29b      	uxth	r3, r3
1a0014a8:	8013      	strh	r3, [r2, #0]
1a0014aa:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
1a0014ac:	4b44      	ldr	r3, [pc, #272]	; (1a0015c0 <find_volume+0x4a4>)
1a0014ae:	60e3      	str	r3, [r4, #12]
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
1a0014b0:	4b44      	ldr	r3, [pc, #272]	; (1a0015c4 <find_volume+0x4a8>)
1a0014b2:	6123      	str	r3, [r4, #16]
	return FR_OK;
1a0014b4:	2000      	movs	r0, #0
1a0014b6:	e043      	b.n	1a001540 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a0014b8:	f104 0062 	add.w	r0, r4, #98	; 0x62
1a0014bc:	f7ff fada 	bl	1a000a74 <ld_word>
1a0014c0:	2800      	cmp	r0, #0
1a0014c2:	d172      	bne.n	1a0015aa <find_volume+0x48e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a0014c4:	f1ba 0f00 	cmp.w	sl, #0
1a0014c8:	d171      	bne.n	1a0015ae <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a0014ca:	f104 0064 	add.w	r0, r4, #100	; 0x64
1a0014ce:	f7ff fad6 	bl	1a000a7e <ld_dword>
1a0014d2:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
1a0014d4:	ea4f 0388 	mov.w	r3, r8, lsl #2
1a0014d8:	e7d1      	b.n	1a00147e <find_volume+0x362>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a0014da:	ea4f 0348 	mov.w	r3, r8, lsl #1
1a0014de:	e7ce      	b.n	1a00147e <find_volume+0x362>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a0014e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
1a0014e4:	f7ff fac6 	bl	1a000a74 <ld_word>
1a0014e8:	2801      	cmp	r0, #1
1a0014ea:	d1d7      	bne.n	1a00149c <find_volume+0x380>
			&& move_window(fs, bsect + 1) == FR_OK)
1a0014ec:	1c79      	adds	r1, r7, #1
1a0014ee:	4620      	mov	r0, r4
1a0014f0:	f7ff fdb8 	bl	1a001064 <move_window>
1a0014f4:	2800      	cmp	r0, #0
1a0014f6:	d1d1      	bne.n	1a00149c <find_volume+0x380>
			fs->fsi_flag = 0;
1a0014f8:	2300      	movs	r3, #0
1a0014fa:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
1a0014fc:	f204 2036 	addw	r0, r4, #566	; 0x236
1a001500:	f7ff fab8 	bl	1a000a74 <ld_word>
1a001504:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a001508:	4298      	cmp	r0, r3
1a00150a:	d1c7      	bne.n	1a00149c <find_volume+0x380>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a00150c:	f104 0038 	add.w	r0, r4, #56	; 0x38
1a001510:	f7ff fab5 	bl	1a000a7e <ld_dword>
1a001514:	4b2c      	ldr	r3, [pc, #176]	; (1a0015c8 <find_volume+0x4ac>)
1a001516:	4298      	cmp	r0, r3
1a001518:	d1c0      	bne.n	1a00149c <find_volume+0x380>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a00151a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a00151e:	f7ff faae 	bl	1a000a7e <ld_dword>
1a001522:	4b2a      	ldr	r3, [pc, #168]	; (1a0015cc <find_volume+0x4b0>)
1a001524:	4298      	cmp	r0, r3
1a001526:	d1b9      	bne.n	1a00149c <find_volume+0x380>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a001528:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a00152c:	f7ff faa7 	bl	1a000a7e <ld_dword>
1a001530:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a001532:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a001536:	f7ff faa2 	bl	1a000a7e <ld_dword>
1a00153a:	6160      	str	r0, [r4, #20]
1a00153c:	e7ae      	b.n	1a00149c <find_volume+0x380>
	if (vol < 0) return FR_INVALID_DRIVE;
1a00153e:	200b      	movs	r0, #11
}
1a001540:	b004      	add	sp, #16
1a001542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
1a001546:	200c      	movs	r0, #12
1a001548:	e7fa      	b.n	1a001540 <find_volume+0x424>
			return FR_OK;				/* The filesystem object is valid */
1a00154a:	2000      	movs	r0, #0
1a00154c:	e7f8      	b.n	1a001540 <find_volume+0x424>
				return FR_WRITE_PROTECTED;
1a00154e:	200a      	movs	r0, #10
1a001550:	e7f6      	b.n	1a001540 <find_volume+0x424>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a001552:	2003      	movs	r0, #3
1a001554:	e7f4      	b.n	1a001540 <find_volume+0x424>
		return FR_WRITE_PROTECTED;
1a001556:	200a      	movs	r0, #10
1a001558:	e7f2      	b.n	1a001540 <find_volume+0x424>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00155a:	2001      	movs	r0, #1
1a00155c:	e7f0      	b.n	1a001540 <find_volume+0x424>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a00155e:	200d      	movs	r0, #13
1a001560:	e7ee      	b.n	1a001540 <find_volume+0x424>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
1a001562:	200d      	movs	r0, #13
1a001564:	e7ec      	b.n	1a001540 <find_volume+0x424>
		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
1a001566:	200d      	movs	r0, #13
1a001568:	e7ea      	b.n	1a001540 <find_volume+0x424>
			return FR_NO_FILESYSTEM;
1a00156a:	200d      	movs	r0, #13
1a00156c:	e7e8      	b.n	1a001540 <find_volume+0x424>
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
1a00156e:	200d      	movs	r0, #13
1a001570:	e7e6      	b.n	1a001540 <find_volume+0x424>
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
1a001572:	200d      	movs	r0, #13
1a001574:	e7e4      	b.n	1a001540 <find_volume+0x424>
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
1a001576:	200d      	movs	r0, #13
1a001578:	e7e2      	b.n	1a001540 <find_volume+0x424>
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
1a00157a:	200d      	movs	r0, #13
1a00157c:	e7e0      	b.n	1a001540 <find_volume+0x424>
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
1a00157e:	200d      	movs	r0, #13
1a001580:	e7de      	b.n	1a001540 <find_volume+0x424>
		if (move_window(fs, clst2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
1a001582:	2001      	movs	r0, #1
1a001584:	e7dc      	b.n	1a001540 <find_volume+0x424>
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
1a001586:	200d      	movs	r0, #13
1a001588:	e7da      	b.n	1a001540 <find_volume+0x424>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a00158a:	200d      	movs	r0, #13
1a00158c:	e7d8      	b.n	1a001540 <find_volume+0x424>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a00158e:	200d      	movs	r0, #13
1a001590:	e7d6      	b.n	1a001540 <find_volume+0x424>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a001592:	200d      	movs	r0, #13
1a001594:	e7d4      	b.n	1a001540 <find_volume+0x424>
1a001596:	200d      	movs	r0, #13
1a001598:	e7d2      	b.n	1a001540 <find_volume+0x424>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a00159a:	200d      	movs	r0, #13
1a00159c:	e7d0      	b.n	1a001540 <find_volume+0x424>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
1a00159e:	200d      	movs	r0, #13
1a0015a0:	e7ce      	b.n	1a001540 <find_volume+0x424>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
1a0015a2:	200d      	movs	r0, #13
1a0015a4:	e7cc      	b.n	1a001540 <find_volume+0x424>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a0015a6:	200d      	movs	r0, #13
1a0015a8:	e7ca      	b.n	1a001540 <find_volume+0x424>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a0015aa:	200d      	movs	r0, #13
1a0015ac:	e7c8      	b.n	1a001540 <find_volume+0x424>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
1a0015ae:	200d      	movs	r0, #13
1a0015b0:	e7c6      	b.n	1a001540 <find_volume+0x424>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1a0015b2:	200d      	movs	r0, #13
1a0015b4:	e7c4      	b.n	1a001540 <find_volume+0x424>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a0015b6:	200d      	movs	r0, #13
1a0015b8:	e7c2      	b.n	1a001540 <find_volume+0x424>
1a0015ba:	bf00      	nop
1a0015bc:	10000800 	.word	0x10000800
1a0015c0:	10000804 	.word	0x10000804
1a0015c4:	10000598 	.word	0x10000598
1a0015c8:	41615252 	.word	0x41615252
1a0015cc:	61417272 	.word	0x61417272

1a0015d0 <find_bitmap>:
{
1a0015d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0015d4:	4605      	mov	r5, r0
1a0015d6:	4691      	mov	r9, r2
	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1a0015d8:	1e8f      	subs	r7, r1, #2
	if (clst >= fs->n_fatent - 2) clst = 0;
1a0015da:	69c3      	ldr	r3, [r0, #28]
1a0015dc:	3b02      	subs	r3, #2
1a0015de:	42bb      	cmp	r3, r7
1a0015e0:	d800      	bhi.n	1a0015e4 <find_bitmap+0x14>
1a0015e2:	2700      	movs	r7, #0
	scl = val = clst; ctr = 0;
1a0015e4:	46b8      	mov	r8, r7
1a0015e6:	463c      	mov	r4, r7
1a0015e8:	2600      	movs	r6, #0
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a0015ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a0015ec:	eb01 3114 	add.w	r1, r1, r4, lsr #12
1a0015f0:	4628      	mov	r0, r5
1a0015f2:	f7ff fd37 	bl	1a001064 <move_window>
1a0015f6:	bb40      	cbnz	r0, 1a00164a <find_bitmap+0x7a>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1a0015f8:	f3c4 00c8 	ubfx	r0, r4, #3, #9
1a0015fc:	f004 0207 	and.w	r2, r4, #7
1a001600:	2301      	movs	r3, #1
1a001602:	4093      	lsls	r3, r2
1a001604:	b2db      	uxtb	r3, r3
1a001606:	e009      	b.n	1a00161c <find_bitmap+0x4c>
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1a001608:	46a0      	mov	r8, r4
1a00160a:	2600      	movs	r6, #0
				if (val == clst) return 0;	/* All cluster scanned? */
1a00160c:	42a7      	cmp	r7, r4
1a00160e:	d01f      	beq.n	1a001650 <find_bitmap+0x80>
			} while (bm != 0);
1a001610:	b923      	cbnz	r3, 1a00161c <find_bitmap+0x4c>
		} while (++i < SS(fs));
1a001612:	3001      	adds	r0, #1
1a001614:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a001618:	d2e7      	bcs.n	1a0015ea <find_bitmap+0x1a>
			bm = 1;
1a00161a:	2301      	movs	r3, #1
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1a00161c:	182a      	adds	r2, r5, r0
1a00161e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
1a001622:	401a      	ands	r2, r3
1a001624:	005b      	lsls	r3, r3, #1
1a001626:	b2db      	uxtb	r3, r3
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1a001628:	3401      	adds	r4, #1
1a00162a:	69e9      	ldr	r1, [r5, #28]
1a00162c:	3902      	subs	r1, #2
1a00162e:	42a1      	cmp	r1, r4
1a001630:	d803      	bhi.n	1a00163a <find_bitmap+0x6a>
					val = 0; bm = 0; i = SS(fs);
1a001632:	2400      	movs	r4, #0
1a001634:	f44f 7000 	mov.w	r0, #512	; 0x200
1a001638:	4623      	mov	r3, r4
				if (bv == 0) {	/* Is it a free cluster? */
1a00163a:	2a00      	cmp	r2, #0
1a00163c:	d1e4      	bne.n	1a001608 <find_bitmap+0x38>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1a00163e:	3601      	adds	r6, #1
1a001640:	454e      	cmp	r6, r9
1a001642:	d1e3      	bne.n	1a00160c <find_bitmap+0x3c>
1a001644:	f108 0002 	add.w	r0, r8, #2
1a001648:	e003      	b.n	1a001652 <find_bitmap+0x82>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
1a00164a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00164e:	e000      	b.n	1a001652 <find_bitmap+0x82>
				if (val == clst) return 0;	/* All cluster scanned? */
1a001650:	2000      	movs	r0, #0
}
1a001652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a001656 <change_bitmap>:
{
1a001656:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00165a:	4606      	mov	r6, r0
1a00165c:	4617      	mov	r7, r2
1a00165e:	4698      	mov	r8, r3
	clst -= 2;	/* The first bit corresponds to cluster #2 */
1a001660:	1e8c      	subs	r4, r1, #2
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
1a001662:	6b01      	ldr	r1, [r0, #48]	; 0x30
1a001664:	eb01 3114 	add.w	r1, r1, r4, lsr #12
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
1a001668:	f3c4 05c8 	ubfx	r5, r4, #3, #9
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
1a00166c:	f004 0407 	and.w	r4, r4, #7
1a001670:	2301      	movs	r3, #1
1a001672:	fa03 f404 	lsl.w	r4, r3, r4
1a001676:	b2e4      	uxtb	r4, r4
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a001678:	f101 0901 	add.w	r9, r1, #1
1a00167c:	4630      	mov	r0, r6
1a00167e:	f7ff fcf1 	bl	1a001064 <move_window>
1a001682:	4601      	mov	r1, r0
1a001684:	b110      	cbz	r0, 1a00168c <change_bitmap+0x36>
1a001686:	2101      	movs	r1, #1
1a001688:	e01e      	b.n	1a0016c8 <change_bitmap+0x72>
			bm = 1;
1a00168a:	2401      	movs	r4, #1
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a00168c:	1973      	adds	r3, r6, r5
1a00168e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001692:	4223      	tst	r3, r4
1a001694:	bf14      	ite	ne
1a001696:	2201      	movne	r2, #1
1a001698:	2200      	moveq	r2, #0
1a00169a:	4542      	cmp	r2, r8
1a00169c:	d013      	beq.n	1a0016c6 <change_bitmap+0x70>
				fs->win[i] ^= bm;	/* Flip the bit */
1a00169e:	1972      	adds	r2, r6, r5
1a0016a0:	4063      	eors	r3, r4
1a0016a2:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
				fs->wflag = 1;
1a0016a6:	2301      	movs	r3, #1
1a0016a8:	70f3      	strb	r3, [r6, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1a0016aa:	3f01      	subs	r7, #1
1a0016ac:	d00c      	beq.n	1a0016c8 <change_bitmap+0x72>
			} while (bm <<= 1);		/* Next bit */
1a0016ae:	409c      	lsls	r4, r3
1a0016b0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
1a0016b4:	d1ea      	bne.n	1a00168c <change_bitmap+0x36>
		} while (++i < SS(fs));		/* Next byte */
1a0016b6:	441d      	add	r5, r3
			bm = 1;
1a0016b8:	461c      	mov	r4, r3
		} while (++i < SS(fs));		/* Next byte */
1a0016ba:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
1a0016be:	d3e4      	bcc.n	1a00168a <change_bitmap+0x34>
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1a0016c0:	4649      	mov	r1, r9
		i = 0;
1a0016c2:	2500      	movs	r5, #0
1a0016c4:	e7d8      	b.n	1a001678 <change_bitmap+0x22>
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1a0016c6:	2102      	movs	r1, #2
}
1a0016c8:	4608      	mov	r0, r1
1a0016ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0016ce <put_fat>:
{
1a0016ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a0016d2:	2901      	cmp	r1, #1
1a0016d4:	f240 8082 	bls.w	1a0017dc <put_fat+0x10e>
1a0016d8:	4605      	mov	r5, r0
1a0016da:	460c      	mov	r4, r1
1a0016dc:	4617      	mov	r7, r2
1a0016de:	69c3      	ldr	r3, [r0, #28]
1a0016e0:	428b      	cmp	r3, r1
1a0016e2:	d97d      	bls.n	1a0017e0 <put_fat+0x112>
		switch (fs->fs_type) {
1a0016e4:	7803      	ldrb	r3, [r0, #0]
1a0016e6:	3b01      	subs	r3, #1
1a0016e8:	2b03      	cmp	r3, #3
1a0016ea:	d87d      	bhi.n	1a0017e8 <put_fat+0x11a>
1a0016ec:	e8df f003 	tbb	[pc, r3]
1a0016f0:	53534002 	.word	0x53534002
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
1a0016f4:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0016f8:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a0016fa:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a0016fe:	f7ff fcb1 	bl	1a001064 <move_window>
			if (res != FR_OK) break;
1a001702:	4606      	mov	r6, r0
1a001704:	2800      	cmp	r0, #0
1a001706:	d16c      	bne.n	1a0017e2 <put_fat+0x114>
			p = fs->win + bc++ % SS(fs);
1a001708:	f105 0a38 	add.w	sl, r5, #56	; 0x38
1a00170c:	f108 0901 	add.w	r9, r8, #1
1a001710:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a001714:	f014 0401 	ands.w	r4, r4, #1
1a001718:	d01f      	beq.n	1a00175a <put_fat+0x8c>
1a00171a:	f91a 3008 	ldrsb.w	r3, [sl, r8]
1a00171e:	f003 030f 	and.w	r3, r3, #15
1a001722:	013a      	lsls	r2, r7, #4
1a001724:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
1a001728:	4313      	orrs	r3, r2
1a00172a:	b2db      	uxtb	r3, r3
1a00172c:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
1a001730:	2301      	movs	r3, #1
1a001732:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a001734:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001736:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a00173a:	4628      	mov	r0, r5
1a00173c:	f7ff fc92 	bl	1a001064 <move_window>
			if (res != FR_OK) break;
1a001740:	4606      	mov	r6, r0
1a001742:	2800      	cmp	r0, #0
1a001744:	d14d      	bne.n	1a0017e2 <put_fat+0x114>
			p = fs->win + bc % SS(fs);
1a001746:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a00174a:	b144      	cbz	r4, 1a00175e <put_fat+0x90>
1a00174c:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a001750:	f80a 7009 	strb.w	r7, [sl, r9]
			fs->wflag = 1;
1a001754:	2301      	movs	r3, #1
1a001756:	70eb      	strb	r3, [r5, #3]
			break;
1a001758:	e043      	b.n	1a0017e2 <put_fat+0x114>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
1a00175a:	b2fb      	uxtb	r3, r7
1a00175c:	e7e6      	b.n	1a00172c <put_fat+0x5e>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
1a00175e:	f91a 3009 	ldrsb.w	r3, [sl, r9]
1a001762:	f023 030f 	bic.w	r3, r3, #15
1a001766:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a00176a:	431f      	orrs	r7, r3
1a00176c:	b2ff      	uxtb	r7, r7
1a00176e:	e7ef      	b.n	1a001750 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a001770:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001772:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a001776:	f7ff fc75 	bl	1a001064 <move_window>
			if (res != FR_OK) break;
1a00177a:	4606      	mov	r6, r0
1a00177c:	bb88      	cbnz	r0, 1a0017e2 <put_fat+0x114>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
1a00177e:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a001782:	0064      	lsls	r4, r4, #1
1a001784:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a001788:	b2b9      	uxth	r1, r7
1a00178a:	4420      	add	r0, r4
1a00178c:	f7ff f9d6 	bl	1a000b3c <st_word>
			fs->wflag = 1;
1a001790:	2301      	movs	r3, #1
1a001792:	70eb      	strb	r3, [r5, #3]
			break;
1a001794:	e025      	b.n	1a0017e2 <put_fat+0x114>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a001796:	6a81      	ldr	r1, [r0, #40]	; 0x28
1a001798:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a00179c:	f7ff fc62 	bl	1a001064 <move_window>
			if (res != FR_OK) break;
1a0017a0:	4606      	mov	r6, r0
1a0017a2:	b9f0      	cbnz	r0, 1a0017e2 <put_fat+0x114>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a0017a4:	782b      	ldrb	r3, [r5, #0]
1a0017a6:	2b04      	cmp	r3, #4
1a0017a8:	d00c      	beq.n	1a0017c4 <put_fat+0xf6>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a0017aa:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a0017ae:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0017b2:	00a3      	lsls	r3, r4, #2
1a0017b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a0017b8:	4418      	add	r0, r3
1a0017ba:	f7ff f960 	bl	1a000a7e <ld_dword>
1a0017be:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
1a0017c2:	4307      	orrs	r7, r0
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a0017c4:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0017c8:	00a4      	lsls	r4, r4, #2
1a0017ca:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a0017ce:	4639      	mov	r1, r7
1a0017d0:	4420      	add	r0, r4
1a0017d2:	f7ff f9b7 	bl	1a000b44 <st_dword>
			fs->wflag = 1;
1a0017d6:	2301      	movs	r3, #1
1a0017d8:	70eb      	strb	r3, [r5, #3]
			break;
1a0017da:	e002      	b.n	1a0017e2 <put_fat+0x114>
	FRESULT res = FR_INT_ERR;
1a0017dc:	2602      	movs	r6, #2
1a0017de:	e000      	b.n	1a0017e2 <put_fat+0x114>
1a0017e0:	2602      	movs	r6, #2
}
1a0017e2:	4630      	mov	r0, r6
1a0017e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	FRESULT res = FR_INT_ERR;
1a0017e8:	2602      	movs	r6, #2
1a0017ea:	e7fa      	b.n	1a0017e2 <put_fat+0x114>

1a0017ec <fill_last_frag>:
{
1a0017ec:	b570      	push	{r4, r5, r6, lr}
1a0017ee:	4604      	mov	r4, r0
1a0017f0:	460d      	mov	r5, r1
1a0017f2:	4616      	mov	r6, r2
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a0017f4:	e007      	b.n	1a001806 <fill_last_frag+0x1a>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a0017f6:	4632      	mov	r2, r6
1a0017f8:	f7ff ff69 	bl	1a0016ce <put_fat>
		if (res != FR_OK) return res;
1a0017fc:	4603      	mov	r3, r0
1a0017fe:	b958      	cbnz	r0, 1a001818 <fill_last_frag+0x2c>
		obj->n_frag--;
1a001800:	69e3      	ldr	r3, [r4, #28]
1a001802:	3b01      	subs	r3, #1
1a001804:	61e3      	str	r3, [r4, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1a001806:	69e3      	ldr	r3, [r4, #28]
1a001808:	b133      	cbz	r3, 1a001818 <fill_last_frag+0x2c>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1a00180a:	6820      	ldr	r0, [r4, #0]
1a00180c:	1aea      	subs	r2, r5, r3
1a00180e:	1c51      	adds	r1, r2, #1
1a001810:	2b01      	cmp	r3, #1
1a001812:	d9f0      	bls.n	1a0017f6 <fill_last_frag+0xa>
1a001814:	3202      	adds	r2, #2
1a001816:	e7ef      	b.n	1a0017f8 <fill_last_frag+0xc>
}
1a001818:	4618      	mov	r0, r3
1a00181a:	bd70      	pop	{r4, r5, r6, pc}

1a00181c <fill_first_frag>:
	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1a00181c:	79c3      	ldrb	r3, [r0, #7]
1a00181e:	2b03      	cmp	r3, #3
1a001820:	d002      	beq.n	1a001828 <fill_first_frag+0xc>
	return FR_OK;
1a001822:	2300      	movs	r3, #0
}
1a001824:	4618      	mov	r0, r3
1a001826:	4770      	bx	lr
{
1a001828:	b570      	push	{r4, r5, r6, lr}
1a00182a:	4606      	mov	r6, r0
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a00182c:	6881      	ldr	r1, [r0, #8]
1a00182e:	6984      	ldr	r4, [r0, #24]
1a001830:	b14c      	cbz	r4, 1a001846 <fill_first_frag+0x2a>
			res = put_fat(obj->fs, cl, cl + 1);
1a001832:	1c4d      	adds	r5, r1, #1
1a001834:	462a      	mov	r2, r5
1a001836:	6830      	ldr	r0, [r6, #0]
1a001838:	f7ff ff49 	bl	1a0016ce <put_fat>
			if (res != FR_OK) return res;
1a00183c:	4603      	mov	r3, r0
1a00183e:	b920      	cbnz	r0, 1a00184a <fill_first_frag+0x2e>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1a001840:	3c01      	subs	r4, #1
1a001842:	4629      	mov	r1, r5
1a001844:	e7f4      	b.n	1a001830 <fill_first_frag+0x14>
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1a001846:	2300      	movs	r3, #0
1a001848:	71f3      	strb	r3, [r6, #7]
}
1a00184a:	4618      	mov	r0, r3
1a00184c:	bd70      	pop	{r4, r5, r6, pc}

1a00184e <get_fat>:
{
1a00184e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
1a001850:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a001852:	2901      	cmp	r1, #1
1a001854:	f240 8095 	bls.w	1a001982 <get_fat+0x134>
1a001858:	69eb      	ldr	r3, [r5, #28]
1a00185a:	428b      	cmp	r3, r1
1a00185c:	f240 8093 	bls.w	1a001986 <get_fat+0x138>
1a001860:	460c      	mov	r4, r1
		switch (fs->fs_type) {
1a001862:	782b      	ldrb	r3, [r5, #0]
1a001864:	3b01      	subs	r3, #1
1a001866:	2b03      	cmp	r3, #3
1a001868:	f200 808f 	bhi.w	1a00198a <get_fat+0x13c>
1a00186c:	e8df f003 	tbb	[pc, r3]
1a001870:	4e3b2a02 	.word	0x4e3b2a02
			bc = (UINT)clst; bc += bc / 2;
1a001874:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001878:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00187a:	eb01 2156 	add.w	r1, r1, r6, lsr #9
1a00187e:	4628      	mov	r0, r5
1a001880:	f7ff fbf0 	bl	1a001064 <move_window>
1a001884:	2800      	cmp	r0, #0
1a001886:	f040 8082 	bne.w	1a00198e <get_fat+0x140>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
1a00188a:	1c77      	adds	r7, r6, #1
1a00188c:	f3c6 0608 	ubfx	r6, r6, #0, #9
1a001890:	442e      	add	r6, r5
1a001892:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a001896:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a001898:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a00189c:	4628      	mov	r0, r5
1a00189e:	f7ff fbe1 	bl	1a001064 <move_window>
1a0018a2:	2800      	cmp	r0, #0
1a0018a4:	d176      	bne.n	1a001994 <get_fat+0x146>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
1a0018a6:	f3c7 0008 	ubfx	r0, r7, #0, #9
1a0018aa:	4428      	add	r0, r5
1a0018ac:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
1a0018b0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
1a0018b4:	f014 0f01 	tst.w	r4, #1
1a0018b8:	d001      	beq.n	1a0018be <get_fat+0x70>
1a0018ba:	0900      	lsrs	r0, r0, #4
1a0018bc:	e062      	b.n	1a001984 <get_fat+0x136>
1a0018be:	f3c0 000b 	ubfx	r0, r0, #0, #12
1a0018c2:	e05f      	b.n	1a001984 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a0018c4:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0018c6:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a0018ca:	4628      	mov	r0, r5
1a0018cc:	f7ff fbca 	bl	1a001064 <move_window>
1a0018d0:	2800      	cmp	r0, #0
1a0018d2:	d162      	bne.n	1a00199a <get_fat+0x14c>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
1a0018d4:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0018d8:	0064      	lsls	r4, r4, #1
1a0018da:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
1a0018de:	4420      	add	r0, r4
1a0018e0:	f7ff f8c8 	bl	1a000a74 <ld_word>
			break;
1a0018e4:	e04e      	b.n	1a001984 <get_fat+0x136>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a0018e6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a0018e8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a0018ec:	4628      	mov	r0, r5
1a0018ee:	f7ff fbb9 	bl	1a001064 <move_window>
1a0018f2:	2800      	cmp	r0, #0
1a0018f4:	d154      	bne.n	1a0019a0 <get_fat+0x152>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
1a0018f6:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a0018fa:	00a4      	lsls	r4, r4, #2
1a0018fc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a001900:	4420      	add	r0, r4
1a001902:	f7ff f8bc 	bl	1a000a7e <ld_dword>
1a001906:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a00190a:	e03b      	b.n	1a001984 <get_fat+0x136>
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
1a00190c:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
1a001910:	ea52 0103 	orrs.w	r1, r2, r3
1a001914:	d001      	beq.n	1a00191a <get_fat+0xcc>
1a001916:	6881      	ldr	r1, [r0, #8]
1a001918:	b911      	cbnz	r1, 1a001920 <get_fat+0xd2>
1a00191a:	79c1      	ldrb	r1, [r0, #7]
1a00191c:	2900      	cmp	r1, #0
1a00191e:	d142      	bne.n	1a0019a6 <get_fat+0x158>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1a001920:	6881      	ldr	r1, [r0, #8]
1a001922:	1a61      	subs	r1, r4, r1
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
1a001924:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
1a001928:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
1a00192c:	0a72      	lsrs	r2, r6, #9
1a00192e:	ea42 52c7 	orr.w	r2, r2, r7, lsl #23
1a001932:	896b      	ldrh	r3, [r5, #10]
1a001934:	fbb2 f2f3 	udiv	r2, r2, r3
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a001938:	79c3      	ldrb	r3, [r0, #7]
1a00193a:	2b02      	cmp	r3, #2
1a00193c:	d017      	beq.n	1a00196e <get_fat+0x120>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a00193e:	2b03      	cmp	r3, #3
1a001940:	d01a      	beq.n	1a001978 <get_fat+0x12a>
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1a001942:	2b02      	cmp	r3, #2
1a001944:	d034      	beq.n	1a0019b0 <get_fat+0x162>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1a001946:	69c3      	ldr	r3, [r0, #28]
1a001948:	bba3      	cbnz	r3, 1a0019b4 <get_fat+0x166>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a00194a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a00194c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a001950:	4628      	mov	r0, r5
1a001952:	f7ff fb87 	bl	1a001064 <move_window>
1a001956:	bb80      	cbnz	r0, 1a0019ba <get_fat+0x16c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1a001958:	f105 0038 	add.w	r0, r5, #56	; 0x38
1a00195c:	00a3      	lsls	r3, r4, #2
1a00195e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
1a001962:	4418      	add	r0, r3
1a001964:	f7ff f88b 	bl	1a000a7e <ld_dword>
1a001968:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
1a00196c:	e00a      	b.n	1a001984 <get_fat+0x136>
				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1a00196e:	4291      	cmp	r1, r2
1a001970:	d8e5      	bhi.n	1a00193e <get_fat+0xf0>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a001972:	d01a      	beq.n	1a0019aa <get_fat+0x15c>
1a001974:	1c60      	adds	r0, r4, #1
1a001976:	e005      	b.n	1a001984 <get_fat+0x136>
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1a001978:	6982      	ldr	r2, [r0, #24]
1a00197a:	428a      	cmp	r2, r1
1a00197c:	d9e1      	bls.n	1a001942 <get_fat+0xf4>
					val = clst + 1; 	/* Generate the value */
1a00197e:	1c60      	adds	r0, r4, #1
					break;
1a001980:	e000      	b.n	1a001984 <get_fat+0x136>
		val = 1;	/* Internal error */
1a001982:	2001      	movs	r0, #1
}
1a001984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
1a001986:	2001      	movs	r0, #1
1a001988:	e7fc      	b.n	1a001984 <get_fat+0x136>
			val = 1;	/* Internal error */
1a00198a:	2001      	movs	r0, #1
1a00198c:	e7fa      	b.n	1a001984 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a00198e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001992:	e7f7      	b.n	1a001984 <get_fat+0x136>
1a001994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001998:	e7f4      	b.n	1a001984 <get_fat+0x136>
1a00199a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00199e:	e7f1      	b.n	1a001984 <get_fat+0x136>
1a0019a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0019a4:	e7ee      	b.n	1a001984 <get_fat+0x136>
			val = 1;	/* Internal error */
1a0019a6:	2001      	movs	r0, #1
1a0019a8:	e7ec      	b.n	1a001984 <get_fat+0x136>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1a0019aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a0019ae:	e7e9      	b.n	1a001984 <get_fat+0x136>
			val = 1;	/* Internal error */
1a0019b0:	2001      	movs	r0, #1
1a0019b2:	e7e7      	b.n	1a001984 <get_fat+0x136>
						val = 0x7FFFFFFF;	/* Generate EOC */
1a0019b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
1a0019b8:	e7e4      	b.n	1a001984 <get_fat+0x136>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a0019ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
1a0019be:	e7e1      	b.n	1a001984 <get_fat+0x136>

1a0019c0 <dir_sdi>:
{
1a0019c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0019c4:	4606      	mov	r6, r0
1a0019c6:	460d      	mov	r5, r1
	FATFS *fs = dp->obj.fs;
1a0019c8:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a0019ca:	783b      	ldrb	r3, [r7, #0]
1a0019cc:	2b04      	cmp	r3, #4
1a0019ce:	d023      	beq.n	1a001a18 <dir_sdi+0x58>
1a0019d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
1a0019d4:	42ab      	cmp	r3, r5
1a0019d6:	d93e      	bls.n	1a001a56 <dir_sdi+0x96>
1a0019d8:	f015 0f1f 	tst.w	r5, #31
1a0019dc:	d13e      	bne.n	1a001a5c <dir_sdi+0x9c>
	dp->dptr = ofs;				/* Set current offset */
1a0019de:	6335      	str	r5, [r6, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a0019e0:	68b4      	ldr	r4, [r6, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a0019e2:	b92c      	cbnz	r4, 1a0019f0 <dir_sdi+0x30>
1a0019e4:	783b      	ldrb	r3, [r7, #0]
1a0019e6:	2b02      	cmp	r3, #2
1a0019e8:	d902      	bls.n	1a0019f0 <dir_sdi+0x30>
		clst = fs->dirbase;
1a0019ea:	6afc      	ldr	r4, [r7, #44]	; 0x2c
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1a0019ec:	2300      	movs	r3, #0
1a0019ee:	71f3      	strb	r3, [r6, #7]
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
1a0019f0:	b9ac      	cbnz	r4, 1a001a1e <dir_sdi+0x5e>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a0019f2:	893b      	ldrh	r3, [r7, #8]
1a0019f4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a0019f8:	d932      	bls.n	1a001a60 <dir_sdi+0xa0>
		dp->sect = fs->dirbase;
1a0019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
1a0019fc:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->clust = clst;					/* Current cluster# */
1a0019fe:	6374      	str	r4, [r6, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
1a001a00:	6bb3      	ldr	r3, [r6, #56]	; 0x38
1a001a02:	b3ab      	cbz	r3, 1a001a70 <dir_sdi+0xb0>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a001a04:	eb03 2355 	add.w	r3, r3, r5, lsr #9
1a001a08:	63b3      	str	r3, [r6, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a001a0a:	3738      	adds	r7, #56	; 0x38
1a001a0c:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a001a10:	443d      	add	r5, r7
1a001a12:	63f5      	str	r5, [r6, #60]	; 0x3c
	return FR_OK;
1a001a14:	2000      	movs	r0, #0
1a001a16:	e01f      	b.n	1a001a58 <dir_sdi+0x98>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a001a18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
1a001a1c:	e7da      	b.n	1a0019d4 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a001a1e:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a001a22:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a001a26:	4545      	cmp	r5, r8
1a001a28:	d30f      	bcc.n	1a001a4a <dir_sdi+0x8a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a001a2a:	4621      	mov	r1, r4
1a001a2c:	4630      	mov	r0, r6
1a001a2e:	f7ff ff0e 	bl	1a00184e <get_fat>
1a001a32:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001a34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a38:	d014      	beq.n	1a001a64 <dir_sdi+0xa4>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a001a3a:	2801      	cmp	r0, #1
1a001a3c:	d914      	bls.n	1a001a68 <dir_sdi+0xa8>
1a001a3e:	69fb      	ldr	r3, [r7, #28]
1a001a40:	4283      	cmp	r3, r0
1a001a42:	d913      	bls.n	1a001a6c <dir_sdi+0xac>
			ofs -= csz;
1a001a44:	eba5 0508 	sub.w	r5, r5, r8
1a001a48:	e7ed      	b.n	1a001a26 <dir_sdi+0x66>
		dp->sect = clst2sect(fs, clst);
1a001a4a:	4621      	mov	r1, r4
1a001a4c:	4638      	mov	r0, r7
1a001a4e:	f7ff f91d 	bl	1a000c8c <clst2sect>
1a001a52:	63b0      	str	r0, [r6, #56]	; 0x38
1a001a54:	e7d3      	b.n	1a0019fe <dir_sdi+0x3e>
		return FR_INT_ERR;
1a001a56:	2002      	movs	r0, #2
}
1a001a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_INT_ERR;
1a001a5c:	2002      	movs	r0, #2
1a001a5e:	e7fb      	b.n	1a001a58 <dir_sdi+0x98>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
1a001a60:	2002      	movs	r0, #2
1a001a62:	e7f9      	b.n	1a001a58 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001a64:	2001      	movs	r0, #1
1a001a66:	e7f7      	b.n	1a001a58 <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a001a68:	2002      	movs	r0, #2
1a001a6a:	e7f5      	b.n	1a001a58 <dir_sdi+0x98>
1a001a6c:	2002      	movs	r0, #2
1a001a6e:	e7f3      	b.n	1a001a58 <dir_sdi+0x98>
	if (dp->sect == 0) return FR_INT_ERR;
1a001a70:	2002      	movs	r0, #2
1a001a72:	e7f1      	b.n	1a001a58 <dir_sdi+0x98>

1a001a74 <create_chain>:
{
1a001a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001a78:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
1a001a7a:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
1a001a7c:	4689      	mov	r9, r1
1a001a7e:	b931      	cbnz	r1, 1a001a8e <create_chain+0x1a>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
1a001a80:	697e      	ldr	r6, [r7, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001a82:	b1a6      	cbz	r6, 1a001aae <create_chain+0x3a>
1a001a84:	69fb      	ldr	r3, [r7, #28]
1a001a86:	42b3      	cmp	r3, r6
1a001a88:	d812      	bhi.n	1a001ab0 <create_chain+0x3c>
1a001a8a:	2601      	movs	r6, #1
1a001a8c:	e010      	b.n	1a001ab0 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a001a8e:	f7ff fede 	bl	1a00184e <get_fat>
1a001a92:	4605      	mov	r5, r0
		if (cs < 2) return 1;				/* Test for insanity */
1a001a94:	2801      	cmp	r0, #1
1a001a96:	f240 80c6 	bls.w	1a001c26 <create_chain+0x1b2>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
1a001a9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a9e:	f000 80c3 	beq.w	1a001c28 <create_chain+0x1b4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a001aa2:	69fb      	ldr	r3, [r7, #28]
1a001aa4:	4283      	cmp	r3, r0
1a001aa6:	f200 80bf 	bhi.w	1a001c28 <create_chain+0x1b4>
		scl = clst;							/* Cluster to start to find */
1a001aaa:	464e      	mov	r6, r9
1a001aac:	e000      	b.n	1a001ab0 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a001aae:	2601      	movs	r6, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
1a001ab0:	69bd      	ldr	r5, [r7, #24]
1a001ab2:	2d00      	cmp	r5, #0
1a001ab4:	f000 80b8 	beq.w	1a001c28 <create_chain+0x1b4>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a001ab8:	783b      	ldrb	r3, [r7, #0]
1a001aba:	2b04      	cmp	r3, #4
1a001abc:	d003      	beq.n	1a001ac6 <create_chain+0x52>
		if (scl == clst) {						/* Stretching an existing chain? */
1a001abe:	454e      	cmp	r6, r9
1a001ac0:	d055      	beq.n	1a001b6e <create_chain+0xfa>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001ac2:	4634      	mov	r4, r6
1a001ac4:	e095      	b.n	1a001bf2 <create_chain+0x17e>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001ac6:	2201      	movs	r2, #1
1a001ac8:	4631      	mov	r1, r6
1a001aca:	4638      	mov	r0, r7
1a001acc:	f7ff fd80 	bl	1a0015d0 <find_bitmap>
1a001ad0:	4605      	mov	r5, r0
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1a001ad2:	1e43      	subs	r3, r0, #1
1a001ad4:	f113 0f03 	cmn.w	r3, #3
1a001ad8:	f200 80a6 	bhi.w	1a001c28 <create_chain+0x1b4>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1a001adc:	2301      	movs	r3, #1
1a001ade:	461a      	mov	r2, r3
1a001ae0:	4601      	mov	r1, r0
1a001ae2:	4638      	mov	r0, r7
1a001ae4:	f7ff fdb7 	bl	1a001656 <change_bitmap>
1a001ae8:	4603      	mov	r3, r0
		if (res == FR_INT_ERR) return 1;
1a001aea:	2802      	cmp	r0, #2
1a001aec:	f000 809f 	beq.w	1a001c2e <create_chain+0x1ba>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001af0:	2801      	cmp	r0, #1
1a001af2:	f000 809e 	beq.w	1a001c32 <create_chain+0x1be>
		if (clst == 0) {							/* Is it a new chain? */
1a001af6:	f1b9 0f00 	cmp.w	r9, #0
1a001afa:	d11e      	bne.n	1a001b3a <create_chain+0xc6>
			obj->stat = 2;							/* Set status 'contiguous' */
1a001afc:	2202      	movs	r2, #2
1a001afe:	f888 2007 	strb.w	r2, [r8, #7]
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1a001b02:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001b06:	2a02      	cmp	r2, #2
1a001b08:	f000 8082 	beq.w	1a001c10 <create_chain+0x19c>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1a001b0c:	f109 0201 	add.w	r2, r9, #1
1a001b10:	42aa      	cmp	r2, r5
1a001b12:	d022      	beq.n	1a001b5a <create_chain+0xe6>
				if (obj->n_frag == 0) obj->n_frag = 1;
1a001b14:	f8d8 301c 	ldr.w	r3, [r8, #28]
1a001b18:	b913      	cbnz	r3, 1a001b20 <create_chain+0xac>
1a001b1a:	2301      	movs	r3, #1
1a001b1c:	f8c8 301c 	str.w	r3, [r8, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
1a001b20:	462a      	mov	r2, r5
1a001b22:	4649      	mov	r1, r9
1a001b24:	4640      	mov	r0, r8
1a001b26:	f7ff fe61 	bl	1a0017ec <fill_last_frag>
				if (res == FR_OK) obj->n_frag = 1;
1a001b2a:	4603      	mov	r3, r0
1a001b2c:	2800      	cmp	r0, #0
1a001b2e:	d171      	bne.n	1a001c14 <create_chain+0x1a0>
1a001b30:	2201      	movs	r2, #1
1a001b32:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001b36:	462c      	mov	r4, r5
1a001b38:	e03e      	b.n	1a001bb8 <create_chain+0x144>
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1a001b3a:	f898 2007 	ldrb.w	r2, [r8, #7]
1a001b3e:	2a02      	cmp	r2, #2
1a001b40:	d1df      	bne.n	1a001b02 <create_chain+0x8e>
1a001b42:	1c72      	adds	r2, r6, #1
1a001b44:	42aa      	cmp	r2, r5
1a001b46:	d0dc      	beq.n	1a001b02 <create_chain+0x8e>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1a001b48:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001b4c:	1ab2      	subs	r2, r6, r2
1a001b4e:	f8c8 2018 	str.w	r2, [r8, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
1a001b52:	2203      	movs	r2, #3
1a001b54:	f888 2007 	strb.w	r2, [r8, #7]
1a001b58:	e7d3      	b.n	1a001b02 <create_chain+0x8e>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001b5a:	f8d8 201c 	ldr.w	r2, [r8, #28]
1a001b5e:	b122      	cbz	r2, 1a001b6a <create_chain+0xf6>
1a001b60:	3201      	adds	r2, #1
1a001b62:	f8c8 201c 	str.w	r2, [r8, #28]
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001b66:	462c      	mov	r4, r5
1a001b68:	e026      	b.n	1a001bb8 <create_chain+0x144>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1a001b6a:	2202      	movs	r2, #2
1a001b6c:	e7f9      	b.n	1a001b62 <create_chain+0xee>
			ncl = scl + 1;						/* Test if next cluster is free */
1a001b6e:	1c74      	adds	r4, r6, #1
			if (ncl >= fs->n_fatent) ncl = 2;
1a001b70:	69fb      	ldr	r3, [r7, #28]
1a001b72:	42a3      	cmp	r3, r4
1a001b74:	d800      	bhi.n	1a001b78 <create_chain+0x104>
1a001b76:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
1a001b78:	4621      	mov	r1, r4
1a001b7a:	4640      	mov	r0, r8
1a001b7c:	f7ff fe67 	bl	1a00184e <get_fat>
1a001b80:	4605      	mov	r5, r0
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001b82:	2801      	cmp	r0, #1
1a001b84:	d050      	beq.n	1a001c28 <create_chain+0x1b4>
1a001b86:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001b8a:	d04d      	beq.n	1a001c28 <create_chain+0x1b4>
			if (cs != 0) {						/* Not free? */
1a001b8c:	b138      	cbz	r0, 1a001b9e <create_chain+0x12a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
1a001b8e:	697b      	ldr	r3, [r7, #20]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
1a001b90:	2b01      	cmp	r3, #1
1a001b92:	d996      	bls.n	1a001ac2 <create_chain+0x4e>
1a001b94:	69fa      	ldr	r2, [r7, #28]
1a001b96:	429a      	cmp	r2, r3
1a001b98:	d993      	bls.n	1a001ac2 <create_chain+0x4e>
1a001b9a:	461e      	mov	r6, r3
1a001b9c:	e791      	b.n	1a001ac2 <create_chain+0x4e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
1a001b9e:	2c00      	cmp	r4, #0
1a001ba0:	d08f      	beq.n	1a001ac2 <create_chain+0x4e>
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
1a001ba2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001ba6:	4621      	mov	r1, r4
1a001ba8:	4638      	mov	r0, r7
1a001baa:	f7ff fd90 	bl	1a0016ce <put_fat>
		if (res == FR_OK && clst != 0) {
1a001bae:	4603      	mov	r3, r0
1a001bb0:	b910      	cbnz	r0, 1a001bb8 <create_chain+0x144>
1a001bb2:	f1b9 0f00 	cmp.w	r9, #0
1a001bb6:	d124      	bne.n	1a001c02 <create_chain+0x18e>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a001bb8:	bb73      	cbnz	r3, 1a001c18 <create_chain+0x1a4>
		fs->last_clst = ncl;
1a001bba:	617c      	str	r4, [r7, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
1a001bbc:	69ba      	ldr	r2, [r7, #24]
1a001bbe:	69fb      	ldr	r3, [r7, #28]
1a001bc0:	3b02      	subs	r3, #2
1a001bc2:	429a      	cmp	r2, r3
1a001bc4:	d801      	bhi.n	1a001bca <create_chain+0x156>
1a001bc6:	3a01      	subs	r2, #1
1a001bc8:	61ba      	str	r2, [r7, #24]
		fs->fsi_flag |= 1;
1a001bca:	793b      	ldrb	r3, [r7, #4]
1a001bcc:	f043 0301 	orr.w	r3, r3, #1
1a001bd0:	713b      	strb	r3, [r7, #4]
1a001bd2:	4625      	mov	r5, r4
1a001bd4:	e028      	b.n	1a001c28 <create_chain+0x1b4>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
1a001bd6:	4621      	mov	r1, r4
1a001bd8:	4640      	mov	r0, r8
1a001bda:	f7ff fe38 	bl	1a00184e <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
1a001bde:	4605      	mov	r5, r0
1a001be0:	2800      	cmp	r0, #0
1a001be2:	d0de      	beq.n	1a001ba2 <create_chain+0x12e>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
1a001be4:	2801      	cmp	r0, #1
1a001be6:	d01f      	beq.n	1a001c28 <create_chain+0x1b4>
1a001be8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001bec:	d01c      	beq.n	1a001c28 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001bee:	42b4      	cmp	r4, r6
1a001bf0:	d024      	beq.n	1a001c3c <create_chain+0x1c8>
				ncl++;							/* Next cluster */
1a001bf2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a001bf4:	69fb      	ldr	r3, [r7, #28]
1a001bf6:	42a3      	cmp	r3, r4
1a001bf8:	d8ed      	bhi.n	1a001bd6 <create_chain+0x162>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001bfa:	2e01      	cmp	r6, #1
1a001bfc:	d91c      	bls.n	1a001c38 <create_chain+0x1c4>
					ncl = 2;
1a001bfe:	2402      	movs	r4, #2
1a001c00:	e7e9      	b.n	1a001bd6 <create_chain+0x162>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
1a001c02:	4622      	mov	r2, r4
1a001c04:	4649      	mov	r1, r9
1a001c06:	4638      	mov	r0, r7
1a001c08:	f7ff fd61 	bl	1a0016ce <put_fat>
1a001c0c:	4603      	mov	r3, r0
1a001c0e:	e7d3      	b.n	1a001bb8 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1a001c10:	462c      	mov	r4, r5
1a001c12:	e7d1      	b.n	1a001bb8 <create_chain+0x144>
1a001c14:	462c      	mov	r4, r5
1a001c16:	e7cf      	b.n	1a001bb8 <create_chain+0x144>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
1a001c18:	2b01      	cmp	r3, #1
1a001c1a:	d001      	beq.n	1a001c20 <create_chain+0x1ac>
1a001c1c:	2501      	movs	r5, #1
1a001c1e:	e003      	b.n	1a001c28 <create_chain+0x1b4>
1a001c20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001c24:	e000      	b.n	1a001c28 <create_chain+0x1b4>
		if (cs < 2) return 1;				/* Test for insanity */
1a001c26:	2501      	movs	r5, #1
}
1a001c28:	4628      	mov	r0, r5
1a001c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (res == FR_INT_ERR) return 1;
1a001c2e:	2501      	movs	r5, #1
1a001c30:	e7fa      	b.n	1a001c28 <create_chain+0x1b4>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1a001c32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001c36:	e7f7      	b.n	1a001c28 <create_chain+0x1b4>
					if (ncl > scl) return 0;	/* No free cluster found? */
1a001c38:	2500      	movs	r5, #0
1a001c3a:	e7f5      	b.n	1a001c28 <create_chain+0x1b4>
				if (ncl == scl) return 0;		/* No free cluster found? */
1a001c3c:	2500      	movs	r5, #0
1a001c3e:	e7f3      	b.n	1a001c28 <create_chain+0x1b4>

1a001c40 <remove_chain>:
{
1a001c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
1a001c44:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001c46:	2901      	cmp	r1, #1
1a001c48:	f240 8087 	bls.w	1a001d5a <remove_chain+0x11a>
1a001c4c:	4607      	mov	r7, r0
1a001c4e:	460e      	mov	r6, r1
1a001c50:	4691      	mov	r9, r2
1a001c52:	69e3      	ldr	r3, [r4, #28]
1a001c54:	428b      	cmp	r3, r1
1a001c56:	f240 8082 	bls.w	1a001d5e <remove_chain+0x11e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a001c5a:	b172      	cbz	r2, 1a001c7a <remove_chain+0x3a>
1a001c5c:	7823      	ldrb	r3, [r4, #0]
1a001c5e:	2b04      	cmp	r3, #4
1a001c60:	d102      	bne.n	1a001c68 <remove_chain+0x28>
1a001c62:	79c3      	ldrb	r3, [r0, #7]
1a001c64:	2b02      	cmp	r3, #2
1a001c66:	d008      	beq.n	1a001c7a <remove_chain+0x3a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a001c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001c6c:	4649      	mov	r1, r9
1a001c6e:	4620      	mov	r0, r4
1a001c70:	f7ff fd2d 	bl	1a0016ce <put_fat>
		if (res != FR_OK) return res;
1a001c74:	4603      	mov	r3, r0
1a001c76:	2800      	cmp	r0, #0
1a001c78:	d172      	bne.n	1a001d60 <remove_chain+0x120>
{
1a001c7a:	46b0      	mov	r8, r6
1a001c7c:	e012      	b.n	1a001ca4 <remove_chain+0x64>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a001c7e:	2200      	movs	r2, #0
1a001c80:	4631      	mov	r1, r6
1a001c82:	4620      	mov	r0, r4
1a001c84:	f7ff fd23 	bl	1a0016ce <put_fat>
			if (res != FR_OK) return res;
1a001c88:	4603      	mov	r3, r0
1a001c8a:	b1c8      	cbz	r0, 1a001cc0 <remove_chain+0x80>
1a001c8c:	e068      	b.n	1a001d60 <remove_chain+0x120>
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1a001c8e:	1c73      	adds	r3, r6, #1
1a001c90:	42ab      	cmp	r3, r5
1a001c92:	d003      	beq.n	1a001c9c <remove_chain+0x5c>
			if (fs->fs_type == FS_EXFAT) {
1a001c94:	7823      	ldrb	r3, [r4, #0]
1a001c96:	2b04      	cmp	r3, #4
1a001c98:	d01e      	beq.n	1a001cd8 <remove_chain+0x98>
			scl = ecl = nxt;
1a001c9a:	46a8      	mov	r8, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001c9c:	69e3      	ldr	r3, [r4, #28]
		clst = nxt;					/* Next cluster */
1a001c9e:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a001ca0:	42ab      	cmp	r3, r5
1a001ca2:	d925      	bls.n	1a001cf0 <remove_chain+0xb0>
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a001ca4:	4631      	mov	r1, r6
1a001ca6:	4638      	mov	r0, r7
1a001ca8:	f7ff fdd1 	bl	1a00184e <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a001cac:	4605      	mov	r5, r0
1a001cae:	b1f8      	cbz	r0, 1a001cf0 <remove_chain+0xb0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001cb0:	2801      	cmp	r0, #1
1a001cb2:	d058      	beq.n	1a001d66 <remove_chain+0x126>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001cb4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001cb8:	d057      	beq.n	1a001d6a <remove_chain+0x12a>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1a001cba:	7823      	ldrb	r3, [r4, #0]
1a001cbc:	2b04      	cmp	r3, #4
1a001cbe:	d1de      	bne.n	1a001c7e <remove_chain+0x3e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
1a001cc0:	69a2      	ldr	r2, [r4, #24]
1a001cc2:	69e3      	ldr	r3, [r4, #28]
1a001cc4:	3b02      	subs	r3, #2
1a001cc6:	429a      	cmp	r2, r3
1a001cc8:	d2e1      	bcs.n	1a001c8e <remove_chain+0x4e>
			fs->free_clst++;
1a001cca:	3201      	adds	r2, #1
1a001ccc:	61a2      	str	r2, [r4, #24]
			fs->fsi_flag |= 1;
1a001cce:	7923      	ldrb	r3, [r4, #4]
1a001cd0:	f043 0301 	orr.w	r3, r3, #1
1a001cd4:	7123      	strb	r3, [r4, #4]
1a001cd6:	e7da      	b.n	1a001c8e <remove_chain+0x4e>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
1a001cd8:	eba6 0208 	sub.w	r2, r6, r8
1a001cdc:	2300      	movs	r3, #0
1a001cde:	3201      	adds	r2, #1
1a001ce0:	4641      	mov	r1, r8
1a001ce2:	4620      	mov	r0, r4
1a001ce4:	f7ff fcb7 	bl	1a001656 <change_bitmap>
				if (res != FR_OK) return res;
1a001ce8:	4603      	mov	r3, r0
1a001cea:	bbc8      	cbnz	r0, 1a001d60 <remove_chain+0x120>
			scl = ecl = nxt;
1a001cec:	46a8      	mov	r8, r5
1a001cee:	e7d5      	b.n	1a001c9c <remove_chain+0x5c>
	if (fs->fs_type == FS_EXFAT) {
1a001cf0:	7823      	ldrb	r3, [r4, #0]
1a001cf2:	2b04      	cmp	r3, #4
1a001cf4:	d001      	beq.n	1a001cfa <remove_chain+0xba>
	return FR_OK;
1a001cf6:	2300      	movs	r3, #0
1a001cf8:	e032      	b.n	1a001d60 <remove_chain+0x120>
		if (pclst == 0) {	/* Has the entire chain been removed? */
1a001cfa:	f1b9 0f00 	cmp.w	r9, #0
1a001cfe:	d012      	beq.n	1a001d26 <remove_chain+0xe6>
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1a001d00:	79fb      	ldrb	r3, [r7, #7]
1a001d02:	b9db      	cbnz	r3, 1a001d3c <remove_chain+0xfc>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1a001d04:	68bc      	ldr	r4, [r7, #8]
				while (clst != pclst) {
1a001d06:	454c      	cmp	r4, r9
1a001d08:	d010      	beq.n	1a001d2c <remove_chain+0xec>
					nxt = get_fat(obj, clst);
1a001d0a:	4621      	mov	r1, r4
1a001d0c:	4638      	mov	r0, r7
1a001d0e:	f7ff fd9e 	bl	1a00184e <get_fat>
					if (nxt < 2) return FR_INT_ERR;
1a001d12:	2801      	cmp	r0, #1
1a001d14:	d92b      	bls.n	1a001d6e <remove_chain+0x12e>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001d16:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001d1a:	d02a      	beq.n	1a001d72 <remove_chain+0x132>
					if (nxt != clst + 1) break;	/* Not contiguous? */
1a001d1c:	1c63      	adds	r3, r4, #1
1a001d1e:	4283      	cmp	r3, r0
1a001d20:	d104      	bne.n	1a001d2c <remove_chain+0xec>
					clst++;
1a001d22:	461c      	mov	r4, r3
1a001d24:	e7ef      	b.n	1a001d06 <remove_chain+0xc6>
			obj->stat = 0;		/* Change the chain status 'initial' */
1a001d26:	2300      	movs	r3, #0
1a001d28:	71fb      	strb	r3, [r7, #7]
1a001d2a:	e019      	b.n	1a001d60 <remove_chain+0x120>
				if (clst == pclst) {	/* Has the chain got contiguous again? */
1a001d2c:	454c      	cmp	r4, r9
1a001d2e:	d001      	beq.n	1a001d34 <remove_chain+0xf4>
	return FR_OK;
1a001d30:	2300      	movs	r3, #0
1a001d32:	e015      	b.n	1a001d60 <remove_chain+0x120>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
1a001d34:	2302      	movs	r3, #2
1a001d36:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001d38:	2300      	movs	r3, #0
1a001d3a:	e011      	b.n	1a001d60 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001d3c:	2b03      	cmp	r3, #3
1a001d3e:	d001      	beq.n	1a001d44 <remove_chain+0x104>
	return FR_OK;
1a001d40:	2300      	movs	r3, #0
1a001d42:	e00d      	b.n	1a001d60 <remove_chain+0x120>
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
1a001d44:	68bb      	ldr	r3, [r7, #8]
1a001d46:	454b      	cmp	r3, r9
1a001d48:	d815      	bhi.n	1a001d76 <remove_chain+0x136>
1a001d4a:	69ba      	ldr	r2, [r7, #24]
1a001d4c:	4413      	add	r3, r2
1a001d4e:	454b      	cmp	r3, r9
1a001d50:	d313      	bcc.n	1a001d7a <remove_chain+0x13a>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
1a001d52:	2302      	movs	r3, #2
1a001d54:	71fb      	strb	r3, [r7, #7]
	return FR_OK;
1a001d56:	2300      	movs	r3, #0
1a001d58:	e002      	b.n	1a001d60 <remove_chain+0x120>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a001d5a:	2302      	movs	r3, #2
1a001d5c:	e000      	b.n	1a001d60 <remove_chain+0x120>
1a001d5e:	2302      	movs	r3, #2
}
1a001d60:	4618      	mov	r0, r3
1a001d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a001d66:	2302      	movs	r3, #2
1a001d68:	e7fa      	b.n	1a001d60 <remove_chain+0x120>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a001d6a:	2301      	movs	r3, #1
1a001d6c:	e7f8      	b.n	1a001d60 <remove_chain+0x120>
					if (nxt < 2) return FR_INT_ERR;
1a001d6e:	2302      	movs	r3, #2
1a001d70:	e7f6      	b.n	1a001d60 <remove_chain+0x120>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1a001d72:	2301      	movs	r3, #1
1a001d74:	e7f4      	b.n	1a001d60 <remove_chain+0x120>
	return FR_OK;
1a001d76:	2300      	movs	r3, #0
1a001d78:	e7f2      	b.n	1a001d60 <remove_chain+0x120>
1a001d7a:	2300      	movs	r3, #0
1a001d7c:	e7f0      	b.n	1a001d60 <remove_chain+0x120>

1a001d7e <dir_clear>:
{
1a001d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001d80:	4605      	mov	r5, r0
1a001d82:	460c      	mov	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a001d84:	f7ff f946 	bl	1a001014 <sync_window>
1a001d88:	b108      	cbz	r0, 1a001d8e <dir_clear+0x10>
1a001d8a:	2001      	movs	r0, #1
}
1a001d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
1a001d8e:	4621      	mov	r1, r4
1a001d90:	4628      	mov	r0, r5
1a001d92:	f7fe ff7b 	bl	1a000c8c <clst2sect>
1a001d96:	4607      	mov	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
1a001d98:	6368      	str	r0, [r5, #52]	; 0x34
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
1a001d9a:	f105 0638 	add.w	r6, r5, #56	; 0x38
1a001d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001da2:	2100      	movs	r1, #0
1a001da4:	4630      	mov	r0, r6
1a001da6:	f7fe fef3 	bl	1a000b90 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
1a001daa:	2400      	movs	r4, #0
1a001dac:	e000      	b.n	1a001db0 <dir_clear+0x32>
1a001dae:	3401      	adds	r4, #1
1a001db0:	896b      	ldrh	r3, [r5, #10]
1a001db2:	42a3      	cmp	r3, r4
1a001db4:	d907      	bls.n	1a001dc6 <dir_clear+0x48>
1a001db6:	2301      	movs	r3, #1
1a001db8:	19e2      	adds	r2, r4, r7
1a001dba:	4631      	mov	r1, r6
1a001dbc:	7868      	ldrb	r0, [r5, #1]
1a001dbe:	f003 fc3b 	bl	1a005638 <disk_write>
1a001dc2:	2800      	cmp	r0, #0
1a001dc4:	d0f3      	beq.n	1a001dae <dir_clear+0x30>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1a001dc6:	8968      	ldrh	r0, [r5, #10]
1a001dc8:	1b00      	subs	r0, r0, r4
1a001dca:	bf18      	it	ne
1a001dcc:	2001      	movne	r0, #1
1a001dce:	e7dd      	b.n	1a001d8c <dir_clear+0xe>

1a001dd0 <dir_next>:
{
1a001dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = dp->obj.fs;
1a001dd4:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a001dd6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001dd8:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a001dda:	2b00      	cmp	r3, #0
1a001ddc:	d056      	beq.n	1a001e8c <dir_next+0xbc>
1a001dde:	3520      	adds	r5, #32
1a001de0:	7832      	ldrb	r2, [r6, #0]
1a001de2:	2a04      	cmp	r2, #4
1a001de4:	d018      	beq.n	1a001e18 <dir_next+0x48>
1a001de6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
1a001dea:	42aa      	cmp	r2, r5
1a001dec:	d950      	bls.n	1a001e90 <dir_next+0xc0>
1a001dee:	4688      	mov	r8, r1
1a001df0:	4604      	mov	r4, r0
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a001df2:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a001df6:	b93f      	cbnz	r7, 1a001e08 <dir_next+0x38>
		dp->sect++;				/* Next sector */
1a001df8:	3301      	adds	r3, #1
1a001dfa:	6383      	str	r3, [r0, #56]	; 0x38
		if (dp->clust == 0) {	/* Static table */
1a001dfc:	6b41      	ldr	r1, [r0, #52]	; 0x34
1a001dfe:	b991      	cbnz	r1, 1a001e26 <dir_next+0x56>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a001e00:	8933      	ldrh	r3, [r6, #8]
1a001e02:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a001e06:	d90a      	bls.n	1a001e1e <dir_next+0x4e>
	dp->dptr = ofs;						/* Current entry */
1a001e08:	6325      	str	r5, [r4, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a001e0a:	f106 0338 	add.w	r3, r6, #56	; 0x38
1a001e0e:	443b      	add	r3, r7
1a001e10:	63e3      	str	r3, [r4, #60]	; 0x3c
	return FR_OK;
1a001e12:	2000      	movs	r0, #0
}
1a001e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001e1c:	e7e5      	b.n	1a001dea <dir_next+0x1a>
				dp->sect = 0; return FR_NO_FILE;
1a001e1e:	2300      	movs	r3, #0
1a001e20:	6383      	str	r3, [r0, #56]	; 0x38
1a001e22:	2004      	movs	r0, #4
1a001e24:	e7f6      	b.n	1a001e14 <dir_next+0x44>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
1a001e26:	8973      	ldrh	r3, [r6, #10]
1a001e28:	3b01      	subs	r3, #1
1a001e2a:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a001e2e:	d1eb      	bne.n	1a001e08 <dir_next+0x38>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
1a001e30:	f7ff fd0d 	bl	1a00184e <get_fat>
1a001e34:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001e36:	2801      	cmp	r0, #1
1a001e38:	d92c      	bls.n	1a001e94 <dir_next+0xc4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e3a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e3e:	d02b      	beq.n	1a001e98 <dir_next+0xc8>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
1a001e40:	69f3      	ldr	r3, [r6, #28]
1a001e42:	4283      	cmp	r3, r0
1a001e44:	d816      	bhi.n	1a001e74 <dir_next+0xa4>
					if (!stretch) {								/* If no stretch, report EOT */
1a001e46:	f1b8 0f00 	cmp.w	r8, #0
1a001e4a:	d01b      	beq.n	1a001e84 <dir_next+0xb4>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a001e4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a001e4e:	4620      	mov	r0, r4
1a001e50:	f7ff fe10 	bl	1a001a74 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001e54:	4681      	mov	r9, r0
1a001e56:	b308      	cbz	r0, 1a001e9c <dir_next+0xcc>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001e58:	2801      	cmp	r0, #1
1a001e5a:	d021      	beq.n	1a001ea0 <dir_next+0xd0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e5c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e60:	d020      	beq.n	1a001ea4 <dir_next+0xd4>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001e62:	4601      	mov	r1, r0
1a001e64:	4630      	mov	r0, r6
1a001e66:	f7ff ff8a 	bl	1a001d7e <dir_clear>
1a001e6a:	b9e8      	cbnz	r0, 1a001ea8 <dir_next+0xd8>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1a001e6c:	79e3      	ldrb	r3, [r4, #7]
1a001e6e:	f043 0304 	orr.w	r3, r3, #4
1a001e72:	71e3      	strb	r3, [r4, #7]
				dp->clust = clst;		/* Initialize data for new cluster */
1a001e74:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
1a001e78:	4649      	mov	r1, r9
1a001e7a:	4630      	mov	r0, r6
1a001e7c:	f7fe ff06 	bl	1a000c8c <clst2sect>
1a001e80:	63a0      	str	r0, [r4, #56]	; 0x38
1a001e82:	e7c1      	b.n	1a001e08 <dir_next+0x38>
						dp->sect = 0; return FR_NO_FILE;
1a001e84:	2300      	movs	r3, #0
1a001e86:	63a3      	str	r3, [r4, #56]	; 0x38
1a001e88:	2004      	movs	r0, #4
1a001e8a:	e7c3      	b.n	1a001e14 <dir_next+0x44>
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a001e8c:	2004      	movs	r0, #4
1a001e8e:	e7c1      	b.n	1a001e14 <dir_next+0x44>
1a001e90:	2004      	movs	r0, #4
1a001e92:	e7bf      	b.n	1a001e14 <dir_next+0x44>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
1a001e94:	2002      	movs	r0, #2
1a001e96:	e7bd      	b.n	1a001e14 <dir_next+0x44>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001e98:	2001      	movs	r0, #1
1a001e9a:	e7bb      	b.n	1a001e14 <dir_next+0x44>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a001e9c:	2007      	movs	r0, #7
1a001e9e:	e7b9      	b.n	1a001e14 <dir_next+0x44>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a001ea0:	2002      	movs	r0, #2
1a001ea2:	e7b7      	b.n	1a001e14 <dir_next+0x44>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a001ea4:	2001      	movs	r0, #1
1a001ea6:	e7b5      	b.n	1a001e14 <dir_next+0x44>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
1a001ea8:	2001      	movs	r0, #1
1a001eaa:	e7b3      	b.n	1a001e14 <dir_next+0x44>

1a001eac <load_xdir>:
{
1a001eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001eb0:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
1a001eb2:	6800      	ldr	r0, [r0, #0]
1a001eb4:	6906      	ldr	r6, [r0, #16]
	res = move_window(dp->obj.fs, dp->sect);
1a001eb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001eb8:	f7ff f8d4 	bl	1a001064 <move_window>
	if (res != FR_OK) return res;
1a001ebc:	4605      	mov	r5, r0
1a001ebe:	b920      	cbnz	r0, 1a001eca <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;	/* Invalid order */
1a001ec0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001ec2:	780b      	ldrb	r3, [r1, #0]
1a001ec4:	2b85      	cmp	r3, #133	; 0x85
1a001ec6:	d003      	beq.n	1a001ed0 <load_xdir+0x24>
1a001ec8:	2502      	movs	r5, #2
}
1a001eca:	4628      	mov	r0, r5
1a001ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
1a001ed0:	2220      	movs	r2, #32
1a001ed2:	4630      	mov	r0, r6
1a001ed4:	f7fe fe53 	bl	1a000b7e <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
1a001ed8:	7877      	ldrb	r7, [r6, #1]
1a001eda:	3701      	adds	r7, #1
1a001edc:	017f      	lsls	r7, r7, #5
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001ede:	f1a7 0360 	sub.w	r3, r7, #96	; 0x60
1a001ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a001ee6:	d855      	bhi.n	1a001f94 <load_xdir+0xe8>
	res = dir_next(dp, 0);
1a001ee8:	2100      	movs	r1, #0
1a001eea:	4620      	mov	r0, r4
1a001eec:	f7ff ff70 	bl	1a001dd0 <dir_next>
1a001ef0:	4605      	mov	r5, r0
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001ef2:	2804      	cmp	r0, #4
1a001ef4:	d050      	beq.n	1a001f98 <load_xdir+0xec>
	if (res != FR_OK) return res;
1a001ef6:	2800      	cmp	r0, #0
1a001ef8:	d1e7      	bne.n	1a001eca <load_xdir+0x1e>
	res = move_window(dp->obj.fs, dp->sect);
1a001efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001efc:	6820      	ldr	r0, [r4, #0]
1a001efe:	f7ff f8b1 	bl	1a001064 <move_window>
	if (res != FR_OK) return res;
1a001f02:	4605      	mov	r5, r0
1a001f04:	2800      	cmp	r0, #0
1a001f06:	d1e0      	bne.n	1a001eca <load_xdir+0x1e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;	/* Invalid order */
1a001f08:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001f0a:	780b      	ldrb	r3, [r1, #0]
1a001f0c:	2bc0      	cmp	r3, #192	; 0xc0
1a001f0e:	d001      	beq.n	1a001f14 <load_xdir+0x68>
1a001f10:	2502      	movs	r5, #2
1a001f12:	e7da      	b.n	1a001eca <load_xdir+0x1e>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
1a001f14:	2220      	movs	r2, #32
1a001f16:	18b0      	adds	r0, r6, r2
1a001f18:	f7fe fe31 	bl	1a000b7e <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001f1c:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
1a001f20:	332c      	adds	r3, #44	; 0x2c
1a001f22:	4a21      	ldr	r2, [pc, #132]	; (1a001fa8 <load_xdir+0xfc>)
1a001f24:	fba2 2303 	umull	r2, r3, r2, r3
1a001f28:	08db      	lsrs	r3, r3, #3
1a001f2a:	ebb7 1f43 	cmp.w	r7, r3, lsl #5
1a001f2e:	d335      	bcc.n	1a001f9c <load_xdir+0xf0>
	i = 2 * SZDIRE;	/* C1 offset to load */
1a001f30:	f04f 0840 	mov.w	r8, #64	; 0x40
1a001f34:	e003      	b.n	1a001f3e <load_xdir+0x92>
	} while ((i += SZDIRE) < sz_ent);
1a001f36:	f108 0820 	add.w	r8, r8, #32
1a001f3a:	4547      	cmp	r7, r8
1a001f3c:	d91c      	bls.n	1a001f78 <load_xdir+0xcc>
		res = dir_next(dp, 0);
1a001f3e:	2100      	movs	r1, #0
1a001f40:	4620      	mov	r0, r4
1a001f42:	f7ff ff45 	bl	1a001dd0 <dir_next>
1a001f46:	4605      	mov	r5, r0
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001f48:	2804      	cmp	r0, #4
1a001f4a:	d029      	beq.n	1a001fa0 <load_xdir+0xf4>
		if (res != FR_OK) return res;
1a001f4c:	2800      	cmp	r0, #0
1a001f4e:	d1bc      	bne.n	1a001eca <load_xdir+0x1e>
		res = move_window(dp->obj.fs, dp->sect);
1a001f50:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a001f52:	6820      	ldr	r0, [r4, #0]
1a001f54:	f7ff f886 	bl	1a001064 <move_window>
		if (res != FR_OK) return res;
1a001f58:	4605      	mov	r5, r0
1a001f5a:	2800      	cmp	r0, #0
1a001f5c:	d1b5      	bne.n	1a001eca <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001f5e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a001f60:	780b      	ldrb	r3, [r1, #0]
1a001f62:	2bc1      	cmp	r3, #193	; 0xc1
1a001f64:	d11e      	bne.n	1a001fa4 <load_xdir+0xf8>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
1a001f66:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001f6a:	d2e4      	bcs.n	1a001f36 <load_xdir+0x8a>
1a001f6c:	2220      	movs	r2, #32
1a001f6e:	eb06 0008 	add.w	r0, r6, r8
1a001f72:	f7fe fe04 	bl	1a000b7e <mem_cpy>
1a001f76:	e7de      	b.n	1a001f36 <load_xdir+0x8a>
	if (i <= MAXDIRB(FF_MAX_LFN)) {
1a001f78:	f5b8 7f18 	cmp.w	r8, #608	; 0x260
1a001f7c:	d8a5      	bhi.n	1a001eca <load_xdir+0x1e>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
1a001f7e:	4630      	mov	r0, r6
1a001f80:	f7fe ff9c 	bl	1a000ebc <xdir_sum>
1a001f84:	4604      	mov	r4, r0
1a001f86:	1cb0      	adds	r0, r6, #2
1a001f88:	f7fe fd74 	bl	1a000a74 <ld_word>
1a001f8c:	4284      	cmp	r4, r0
1a001f8e:	d09c      	beq.n	1a001eca <load_xdir+0x1e>
1a001f90:	2502      	movs	r5, #2
1a001f92:	e79a      	b.n	1a001eca <load_xdir+0x1e>
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
1a001f94:	2502      	movs	r5, #2
1a001f96:	e798      	b.n	1a001eca <load_xdir+0x1e>
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001f98:	2502      	movs	r5, #2
1a001f9a:	e796      	b.n	1a001eca <load_xdir+0x1e>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
1a001f9c:	2502      	movs	r5, #2
1a001f9e:	e794      	b.n	1a001eca <load_xdir+0x1e>
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
1a001fa0:	2502      	movs	r5, #2
1a001fa2:	e792      	b.n	1a001eca <load_xdir+0x1e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;	/* Invalid order */
1a001fa4:	2502      	movs	r5, #2
1a001fa6:	e790      	b.n	1a001eca <load_xdir+0x1e>
1a001fa8:	88888889 	.word	0x88888889

1a001fac <load_obj_xdir>:
{
1a001fac:	b510      	push	{r4, lr}
1a001fae:	4604      	mov	r4, r0
	dp->obj.fs = obj->fs;
1a001fb0:	680b      	ldr	r3, [r1, #0]
1a001fb2:	6003      	str	r3, [r0, #0]
	dp->obj.sclust = obj->c_scl;
1a001fb4:	6a0b      	ldr	r3, [r1, #32]
1a001fb6:	6083      	str	r3, [r0, #8]
	dp->obj.stat = (BYTE)obj->c_size;
1a001fb8:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
1a001fbc:	71c3      	strb	r3, [r0, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
1a001fbe:	6a4b      	ldr	r3, [r1, #36]	; 0x24
1a001fc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001fc4:	2200      	movs	r2, #0
1a001fc6:	6103      	str	r3, [r0, #16]
1a001fc8:	6142      	str	r2, [r0, #20]
	dp->obj.n_frag = 0;
1a001fca:	61c2      	str	r2, [r0, #28]
	dp->blk_ofs = obj->c_ofs;
1a001fcc:	6a89      	ldr	r1, [r1, #40]	; 0x28
1a001fce:	64c1      	str	r1, [r0, #76]	; 0x4c
	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
1a001fd0:	f7ff fcf6 	bl	1a0019c0 <dir_sdi>
	if (res == FR_OK) {
1a001fd4:	4603      	mov	r3, r0
1a001fd6:	b108      	cbz	r0, 1a001fdc <load_obj_xdir+0x30>
}
1a001fd8:	4618      	mov	r0, r3
1a001fda:	bd10      	pop	{r4, pc}
		res = load_xdir(dp);		/* Load the object's entry block */
1a001fdc:	4620      	mov	r0, r4
1a001fde:	f7ff ff65 	bl	1a001eac <load_xdir>
1a001fe2:	4603      	mov	r3, r0
1a001fe4:	e7f8      	b.n	1a001fd8 <load_obj_xdir+0x2c>

1a001fe6 <dir_read>:
{
1a001fe6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001fea:	4604      	mov	r4, r0
1a001fec:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
1a001fee:	6806      	ldr	r6, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
1a001ff0:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a001ff4:	464f      	mov	r7, r9
	FRESULT res = FR_NO_FILE;
1a001ff6:	2504      	movs	r5, #4
	while (dp->sect) {
1a001ff8:	e008      	b.n	1a00200c <dir_read+0x26>
				if (c == 0x85) {		/* Start of the file entry block? */
1a001ffa:	2b85      	cmp	r3, #133	; 0x85
1a001ffc:	d028      	beq.n	1a002050 <dir_read+0x6a>
		res = dir_next(dp, 0);		/* Next entry */
1a001ffe:	2100      	movs	r1, #0
1a002000:	4620      	mov	r0, r4
1a002002:	f7ff fee5 	bl	1a001dd0 <dir_next>
		if (res != FR_OK) break;
1a002006:	4605      	mov	r5, r0
1a002008:	2800      	cmp	r0, #0
1a00200a:	d15b      	bne.n	1a0020c4 <dir_read+0xde>
	while (dp->sect) {
1a00200c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a00200e:	2900      	cmp	r1, #0
1a002010:	d058      	beq.n	1a0020c4 <dir_read+0xde>
		res = move_window(fs, dp->sect);
1a002012:	4630      	mov	r0, r6
1a002014:	f7ff f826 	bl	1a001064 <move_window>
		if (res != FR_OK) break;
1a002018:	4605      	mov	r5, r0
1a00201a:	2800      	cmp	r0, #0
1a00201c:	d152      	bne.n	1a0020c4 <dir_read+0xde>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
1a00201e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
1a002020:	780b      	ldrb	r3, [r1, #0]
		if (c == 0) {
1a002022:	2b00      	cmp	r3, #0
1a002024:	d04d      	beq.n	1a0020c2 <dir_read+0xdc>
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002026:	7832      	ldrb	r2, [r6, #0]
1a002028:	2a04      	cmp	r2, #4
1a00202a:	d0e6      	beq.n	1a001ffa <dir_read+0x14>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
1a00202c:	7aca      	ldrb	r2, [r1, #11]
1a00202e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
1a002032:	71a2      	strb	r2, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
1a002034:	2be5      	cmp	r3, #229	; 0xe5
1a002036:	d03e      	beq.n	1a0020b6 <dir_read+0xd0>
1a002038:	2b2e      	cmp	r3, #46	; 0x2e
1a00203a:	d03e      	beq.n	1a0020ba <dir_read+0xd4>
1a00203c:	f022 0020 	bic.w	r0, r2, #32
1a002040:	2808      	cmp	r0, #8
1a002042:	bf14      	ite	ne
1a002044:	2000      	movne	r0, #0
1a002046:	2001      	moveq	r0, #1
1a002048:	4540      	cmp	r0, r8
1a00204a:	d00e      	beq.n	1a00206a <dir_read+0x84>
				ord = 0xFF;
1a00204c:	27ff      	movs	r7, #255	; 0xff
1a00204e:	e7d6      	b.n	1a001ffe <dir_read+0x18>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
1a002050:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002052:	64e3      	str	r3, [r4, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
1a002054:	4620      	mov	r0, r4
1a002056:	f7ff ff29 	bl	1a001eac <load_xdir>
					if (res == FR_OK) {
1a00205a:	4605      	mov	r5, r0
1a00205c:	bb90      	cbnz	r0, 1a0020c4 <dir_read+0xde>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
1a00205e:	6933      	ldr	r3, [r6, #16]
1a002060:	791b      	ldrb	r3, [r3, #4]
1a002062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a002066:	71a3      	strb	r3, [r4, #6]
1a002068:	e02c      	b.n	1a0020c4 <dir_read+0xde>
				if (a == AM_LFN) {			/* An LFN entry is found */
1a00206a:	2a0f      	cmp	r2, #15
1a00206c:	d119      	bne.n	1a0020a2 <dir_read+0xbc>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
1a00206e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002072:	d006      	beq.n	1a002082 <dir_read+0x9c>
						sum = dp->dir[LDIR_Chksum];
1a002074:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
1a002078:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
1a00207c:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a00207e:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;
1a002080:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002082:	42bb      	cmp	r3, r7
1a002084:	d001      	beq.n	1a00208a <dir_read+0xa4>
1a002086:	27ff      	movs	r7, #255	; 0xff
1a002088:	e7b9      	b.n	1a001ffe <dir_read+0x18>
1a00208a:	7b4b      	ldrb	r3, [r1, #13]
1a00208c:	454b      	cmp	r3, r9
1a00208e:	d001      	beq.n	1a002094 <dir_read+0xae>
1a002090:	27ff      	movs	r7, #255	; 0xff
1a002092:	e7b4      	b.n	1a001ffe <dir_read+0x18>
1a002094:	68f0      	ldr	r0, [r6, #12]
1a002096:	f7fe fe2b 	bl	1a000cf0 <pick_lfn>
1a00209a:	b180      	cbz	r0, 1a0020be <dir_read+0xd8>
1a00209c:	3f01      	subs	r7, #1
1a00209e:	b2ff      	uxtb	r7, r7
1a0020a0:	e7ad      	b.n	1a001ffe <dir_read+0x18>
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
1a0020a2:	b927      	cbnz	r7, 1a0020ae <dir_read+0xc8>
1a0020a4:	4608      	mov	r0, r1
1a0020a6:	f7fe fefb 	bl	1a000ea0 <sum_sfn>
1a0020aa:	4548      	cmp	r0, r9
1a0020ac:	d00a      	beq.n	1a0020c4 <dir_read+0xde>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
1a0020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0020b2:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0020b4:	e006      	b.n	1a0020c4 <dir_read+0xde>
				ord = 0xFF;
1a0020b6:	27ff      	movs	r7, #255	; 0xff
1a0020b8:	e7a1      	b.n	1a001ffe <dir_read+0x18>
1a0020ba:	27ff      	movs	r7, #255	; 0xff
1a0020bc:	e79f      	b.n	1a001ffe <dir_read+0x18>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a0020be:	27ff      	movs	r7, #255	; 0xff
1a0020c0:	e79d      	b.n	1a001ffe <dir_read+0x18>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
1a0020c2:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
1a0020c4:	b10d      	cbz	r5, 1a0020ca <dir_read+0xe4>
1a0020c6:	2300      	movs	r3, #0
1a0020c8:	63a3      	str	r3, [r4, #56]	; 0x38
}
1a0020ca:	4628      	mov	r0, r5
1a0020cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a0020d0 <dir_alloc>:
{
1a0020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0020d2:	4604      	mov	r4, r0
1a0020d4:	460f      	mov	r7, r1
	FATFS *fs = dp->obj.fs;
1a0020d6:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
1a0020d8:	2100      	movs	r1, #0
1a0020da:	f7ff fc71 	bl	1a0019c0 <dir_sdi>
	if (res == FR_OK) {
1a0020de:	4602      	mov	r2, r0
1a0020e0:	bb30      	cbnz	r0, 1a002130 <dir_alloc+0x60>
		n = 0;
1a0020e2:	2500      	movs	r5, #0
1a0020e4:	e00e      	b.n	1a002104 <dir_alloc+0x34>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a0020e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0020e8:	f993 3000 	ldrsb.w	r3, [r3]
1a0020ec:	43db      	mvns	r3, r3
1a0020ee:	0fdb      	lsrs	r3, r3, #31
1a0020f0:	b1e3      	cbz	r3, 1a00212c <dir_alloc+0x5c>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a0020f2:	3501      	adds	r5, #1
1a0020f4:	42bd      	cmp	r5, r7
1a0020f6:	d01b      	beq.n	1a002130 <dir_alloc+0x60>
			res = dir_next(dp, 1);
1a0020f8:	2101      	movs	r1, #1
1a0020fa:	4620      	mov	r0, r4
1a0020fc:	f7ff fe68 	bl	1a001dd0 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a002100:	4602      	mov	r2, r0
1a002102:	b9a8      	cbnz	r0, 1a002130 <dir_alloc+0x60>
			res = move_window(fs, dp->sect);
1a002104:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002106:	4630      	mov	r0, r6
1a002108:	f7fe ffac 	bl	1a001064 <move_window>
			if (res != FR_OK) break;
1a00210c:	4602      	mov	r2, r0
1a00210e:	b978      	cbnz	r0, 1a002130 <dir_alloc+0x60>
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
1a002110:	7833      	ldrb	r3, [r6, #0]
1a002112:	2b04      	cmp	r3, #4
1a002114:	d0e7      	beq.n	1a0020e6 <dir_alloc+0x16>
1a002116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a002118:	781b      	ldrb	r3, [r3, #0]
1a00211a:	2be5      	cmp	r3, #229	; 0xe5
1a00211c:	d002      	beq.n	1a002124 <dir_alloc+0x54>
1a00211e:	b91b      	cbnz	r3, 1a002128 <dir_alloc+0x58>
1a002120:	2301      	movs	r3, #1
1a002122:	e7e5      	b.n	1a0020f0 <dir_alloc+0x20>
1a002124:	2301      	movs	r3, #1
1a002126:	e7e3      	b.n	1a0020f0 <dir_alloc+0x20>
1a002128:	2300      	movs	r3, #0
1a00212a:	e7e1      	b.n	1a0020f0 <dir_alloc+0x20>
				n = 0;					/* Not a blank entry. Restart to search */
1a00212c:	2500      	movs	r5, #0
1a00212e:	e7e3      	b.n	1a0020f8 <dir_alloc+0x28>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a002130:	2a04      	cmp	r2, #4
1a002132:	d001      	beq.n	1a002138 <dir_alloc+0x68>
}
1a002134:	4610      	mov	r0, r2
1a002136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a002138:	2207      	movs	r2, #7
1a00213a:	e7fb      	b.n	1a002134 <dir_alloc+0x64>

1a00213c <store_xdir>:
{
1a00213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00213e:	4604      	mov	r4, r0
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
1a002140:	6803      	ldr	r3, [r0, #0]
1a002142:	691e      	ldr	r6, [r3, #16]
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
1a002144:	4630      	mov	r0, r6
1a002146:	f7fe feb9 	bl	1a000ebc <xdir_sum>
1a00214a:	4601      	mov	r1, r0
1a00214c:	1cb0      	adds	r0, r6, #2
1a00214e:	f7fe fcf5 	bl	1a000b3c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
1a002152:	7877      	ldrb	r7, [r6, #1]
1a002154:	3701      	adds	r7, #1
	res = dir_sdi(dp, dp->blk_ofs);
1a002156:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
1a002158:	4620      	mov	r0, r4
1a00215a:	f7ff fc31 	bl	1a0019c0 <dir_sdi>
1a00215e:	4605      	mov	r5, r0
	while (res == FR_OK) {
1a002160:	b9b5      	cbnz	r5, 1a002190 <store_xdir+0x54>
		res = move_window(dp->obj.fs, dp->sect);
1a002162:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a002164:	6820      	ldr	r0, [r4, #0]
1a002166:	f7fe ff7d 	bl	1a001064 <move_window>
		if (res != FR_OK) break;
1a00216a:	4605      	mov	r5, r0
1a00216c:	b980      	cbnz	r0, 1a002190 <store_xdir+0x54>
		mem_cpy(dp->dir, dirb, SZDIRE);
1a00216e:	2220      	movs	r2, #32
1a002170:	4631      	mov	r1, r6
1a002172:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a002174:	f7fe fd03 	bl	1a000b7e <mem_cpy>
		dp->obj.fs->wflag = 1;
1a002178:	6823      	ldr	r3, [r4, #0]
1a00217a:	2201      	movs	r2, #1
1a00217c:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
1a00217e:	3f01      	subs	r7, #1
1a002180:	d006      	beq.n	1a002190 <store_xdir+0x54>
		dirb += SZDIRE;
1a002182:	3620      	adds	r6, #32
		res = dir_next(dp, 0);
1a002184:	2100      	movs	r1, #0
1a002186:	4620      	mov	r0, r4
1a002188:	f7ff fe22 	bl	1a001dd0 <dir_next>
1a00218c:	4605      	mov	r5, r0
1a00218e:	e7e7      	b.n	1a002160 <store_xdir+0x24>
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
1a002190:	2d02      	cmp	r5, #2
1a002192:	bf28      	it	cs
1a002194:	2502      	movcs	r5, #2
}
1a002196:	b2e8      	uxtb	r0, r5
1a002198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00219a:	Address 0x000000001a00219a is out of bounds.


1a00219c <create_name>:
{
1a00219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0021a0:	b085      	sub	sp, #20
1a0021a2:	4680      	mov	r8, r0
1a0021a4:	460f      	mov	r7, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1a0021a6:	680b      	ldr	r3, [r1, #0]
1a0021a8:	9303      	str	r3, [sp, #12]
1a0021aa:	6803      	ldr	r3, [r0, #0]
1a0021ac:	68dd      	ldr	r5, [r3, #12]
1a0021ae:	2400      	movs	r4, #0
1a0021b0:	e00e      	b.n	1a0021d0 <create_name+0x34>
		wc = (WCHAR)uc;
1a0021b2:	b286      	uxth	r6, r0
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
1a0021b4:	2e1f      	cmp	r6, #31
1a0021b6:	d924      	bls.n	1a002202 <create_name+0x66>
1a0021b8:	2e2f      	cmp	r6, #47	; 0x2f
1a0021ba:	d022      	beq.n	1a002202 <create_name+0x66>
1a0021bc:	2e5c      	cmp	r6, #92	; 0x5c
1a0021be:	d020      	beq.n	1a002202 <create_name+0x66>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a0021c0:	2e7f      	cmp	r6, #127	; 0x7f
1a0021c2:	d914      	bls.n	1a0021ee <create_name+0x52>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a0021c4:	2cfe      	cmp	r4, #254	; 0xfe
1a0021c6:	f200 8101 	bhi.w	1a0023cc <create_name+0x230>
		lfn[di++] = wc;					/* Store the Unicode character */
1a0021ca:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
1a0021ce:	3401      	adds	r4, #1
		uc = tchar2uni(&p);			/* Get a character */
1a0021d0:	a803      	add	r0, sp, #12
1a0021d2:	f7fe fcfb 	bl	1a000bcc <tchar2uni>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a0021d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0021da:	f000 80f5 	beq.w	1a0023c8 <create_name+0x22c>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
1a0021de:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0021e2:	d3e6      	bcc.n	1a0021b2 <create_name+0x16>
1a0021e4:	0c03      	lsrs	r3, r0, #16
1a0021e6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
1a0021ea:	3401      	adds	r4, #1
1a0021ec:	e7e1      	b.n	1a0021b2 <create_name+0x16>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
1a0021ee:	4631      	mov	r1, r6
1a0021f0:	4878      	ldr	r0, [pc, #480]	; (1a0023d4 <create_name+0x238>)
1a0021f2:	f7fe fce1 	bl	1a000bb8 <chk_chr>
1a0021f6:	2800      	cmp	r0, #0
1a0021f8:	d0e4      	beq.n	1a0021c4 <create_name+0x28>
1a0021fa:	2006      	movs	r0, #6
1a0021fc:	e08f      	b.n	1a00231e <create_name+0x182>
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
1a0021fe:	3301      	adds	r3, #1
1a002200:	9303      	str	r3, [sp, #12]
1a002202:	9b03      	ldr	r3, [sp, #12]
1a002204:	781a      	ldrb	r2, [r3, #0]
1a002206:	2a2f      	cmp	r2, #47	; 0x2f
1a002208:	d0f9      	beq.n	1a0021fe <create_name+0x62>
1a00220a:	2a5c      	cmp	r2, #92	; 0x5c
1a00220c:	d0f7      	beq.n	1a0021fe <create_name+0x62>
	*path = p;							/* Return pointer to the next segment */
1a00220e:	603b      	str	r3, [r7, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a002210:	2e1f      	cmp	r6, #31
1a002212:	d801      	bhi.n	1a002218 <create_name+0x7c>
1a002214:	2704      	movs	r7, #4
1a002216:	e002      	b.n	1a00221e <create_name+0x82>
1a002218:	2700      	movs	r7, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a00221a:	e000      	b.n	1a00221e <create_name+0x82>
		di--;
1a00221c:	3c01      	subs	r4, #1
	while (di) {						/* Snip off trailing spaces and dots if exist */
1a00221e:	b144      	cbz	r4, 1a002232 <create_name+0x96>
		wc = lfn[di - 1];
1a002220:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a002224:	3b01      	subs	r3, #1
1a002226:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (wc != ' ' && wc != '.') break;
1a00222a:	2b20      	cmp	r3, #32
1a00222c:	d0f6      	beq.n	1a00221c <create_name+0x80>
1a00222e:	2b2e      	cmp	r3, #46	; 0x2e
1a002230:	d0f4      	beq.n	1a00221c <create_name+0x80>
	lfn[di] = 0;							/* LFN is created into the working buffer */
1a002232:	2300      	movs	r3, #0
1a002234:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a002238:	2c00      	cmp	r4, #0
1a00223a:	f000 80c9 	beq.w	1a0023d0 <create_name+0x234>
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
1a00223e:	461e      	mov	r6, r3
1a002240:	e000      	b.n	1a002244 <create_name+0xa8>
1a002242:	3601      	adds	r6, #1
1a002244:	f835 3016 	ldrh.w	r3, [r5, r6, lsl #1]
1a002248:	2b20      	cmp	r3, #32
1a00224a:	d0fa      	beq.n	1a002242 <create_name+0xa6>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
1a00224c:	b90e      	cbnz	r6, 1a002252 <create_name+0xb6>
1a00224e:	2b2e      	cmp	r3, #46	; 0x2e
1a002250:	d101      	bne.n	1a002256 <create_name+0xba>
1a002252:	f047 0703 	orr.w	r7, r7, #3
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
1a002256:	b144      	cbz	r4, 1a00226a <create_name+0xce>
1a002258:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
1a00225c:	3b01      	subs	r3, #1
1a00225e:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
1a002262:	2b2e      	cmp	r3, #46	; 0x2e
1a002264:	d001      	beq.n	1a00226a <create_name+0xce>
1a002266:	3c01      	subs	r4, #1
1a002268:	e7f5      	b.n	1a002256 <create_name+0xba>
	mem_set(dp->fn, ' ', 11);
1a00226a:	220b      	movs	r2, #11
1a00226c:	2120      	movs	r1, #32
1a00226e:	f108 0040 	add.w	r0, r8, #64	; 0x40
1a002272:	f7fe fc8d 	bl	1a000b90 <mem_set>
	i = b = 0; ni = 8;
1a002276:	f04f 0b08 	mov.w	fp, #8
1a00227a:	2300      	movs	r3, #0
1a00227c:	9301      	str	r3, [sp, #4]
1a00227e:	469a      	mov	sl, r3
		wc = lfn[si++];					/* Get an LFN character */
1a002280:	f106 0901 	add.w	r9, r6, #1
1a002284:	f835 6016 	ldrh.w	r6, [r5, r6, lsl #1]
		if (wc == 0) break;				/* Break on end of the LFN */
1a002288:	b346      	cbz	r6, 1a0022dc <create_name+0x140>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a00228a:	2e20      	cmp	r6, #32
1a00228c:	d019      	beq.n	1a0022c2 <create_name+0x126>
1a00228e:	2e2e      	cmp	r6, #46	; 0x2e
1a002290:	d015      	beq.n	1a0022be <create_name+0x122>
		if (i >= ni || si == di) {		/* End of field? */
1a002292:	9b01      	ldr	r3, [sp, #4]
1a002294:	455b      	cmp	r3, fp
1a002296:	d218      	bcs.n	1a0022ca <create_name+0x12e>
1a002298:	454c      	cmp	r4, r9
1a00229a:	d016      	beq.n	1a0022ca <create_name+0x12e>
		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
1a00229c:	2e7f      	cmp	r6, #127	; 0x7f
1a00229e:	d84e      	bhi.n	1a00233e <create_name+0x1a2>
		if (wc >= 0x100) {				/* Is this a DBC? */
1a0022a0:	2eff      	cmp	r6, #255	; 0xff
1a0022a2:	d962      	bls.n	1a00236a <create_name+0x1ce>
			if (i >= ni - 1) {			/* Field overflow? */
1a0022a4:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a0022a8:	9a01      	ldr	r2, [sp, #4]
1a0022aa:	4293      	cmp	r3, r2
1a0022ac:	d957      	bls.n	1a00235e <create_name+0x1c2>
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
1a0022ae:	9901      	ldr	r1, [sp, #4]
1a0022b0:	1c4b      	adds	r3, r1, #1
1a0022b2:	f3c6 2207 	ubfx	r2, r6, #8, #8
1a0022b6:	4441      	add	r1, r8
1a0022b8:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
1a0022bc:	e05a      	b.n	1a002374 <create_name+0x1d8>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
1a0022be:	454c      	cmp	r4, r9
1a0022c0:	d0e7      	beq.n	1a002292 <create_name+0xf6>
			cf |= NS_LOSS | NS_LFN;
1a0022c2:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a0022c6:	464e      	mov	r6, r9
			continue;
1a0022c8:	e7da      	b.n	1a002280 <create_name+0xe4>
			if (ni == 11) {				/* Name extension overflow? */
1a0022ca:	f1bb 0f0b 	cmp.w	fp, #11
1a0022ce:	d029      	beq.n	1a002324 <create_name+0x188>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
1a0022d0:	454c      	cmp	r4, r9
1a0022d2:	d001      	beq.n	1a0022d8 <create_name+0x13c>
1a0022d4:	f047 0703 	orr.w	r7, r7, #3
			if (si > di) break;						/* No name extension? */
1a0022d8:	454c      	cmp	r4, r9
1a0022da:	d226      	bcs.n	1a00232a <create_name+0x18e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a0022dc:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
1a0022e0:	2be5      	cmp	r3, #229	; 0xe5
1a0022e2:	d068      	beq.n	1a0023b6 <create_name+0x21a>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a0022e4:	f1bb 0f08 	cmp.w	fp, #8
1a0022e8:	d069      	beq.n	1a0023be <create_name+0x222>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
1a0022ea:	f00a 030c 	and.w	r3, sl, #12
1a0022ee:	2b0c      	cmp	r3, #12
1a0022f0:	d003      	beq.n	1a0022fa <create_name+0x15e>
1a0022f2:	f00a 0303 	and.w	r3, sl, #3
1a0022f6:	2b03      	cmp	r3, #3
1a0022f8:	d101      	bne.n	1a0022fe <create_name+0x162>
1a0022fa:	f047 0702 	orr.w	r7, r7, #2
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
1a0022fe:	f017 0f02 	tst.w	r7, #2
1a002302:	d109      	bne.n	1a002318 <create_name+0x17c>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
1a002304:	f01a 0f01 	tst.w	sl, #1
1a002308:	d001      	beq.n	1a00230e <create_name+0x172>
1a00230a:	f047 0710 	orr.w	r7, r7, #16
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
1a00230e:	f01a 0f04 	tst.w	sl, #4
1a002312:	d001      	beq.n	1a002318 <create_name+0x17c>
1a002314:	f047 0708 	orr.w	r7, r7, #8
	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
1a002318:	f888 704b 	strb.w	r7, [r8, #75]	; 0x4b
	return FR_OK;
1a00231c:	2000      	movs	r0, #0
}
1a00231e:	b005      	add	sp, #20
1a002320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN;
1a002324:	f047 0703 	orr.w	r7, r7, #3
				break;
1a002328:	e7d8      	b.n	1a0022dc <create_name+0x140>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
1a00232a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a00232e:	fa5f fa8a 	uxtb.w	sl, sl
1a002332:	4626      	mov	r6, r4
1a002334:	f04f 0b0b 	mov.w	fp, #11
1a002338:	2308      	movs	r3, #8
1a00233a:	9301      	str	r3, [sp, #4]
			continue;
1a00233c:	e7a0      	b.n	1a002280 <create_name+0xe4>
			cf |= NS_LFN;	/* LFN entry needs to be created */
1a00233e:	f047 0702 	orr.w	r7, r7, #2
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
1a002342:	f240 3152 	movw	r1, #850	; 0x352
1a002346:	4630      	mov	r0, r6
1a002348:	f000 feb2 	bl	1a0030b0 <ff_uni2oem>
1a00234c:	4606      	mov	r6, r0
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
1a00234e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a002352:	d0a5      	beq.n	1a0022a0 <create_name+0x104>
1a002354:	f000 067f 	and.w	r6, r0, #127	; 0x7f
1a002358:	4b1f      	ldr	r3, [pc, #124]	; (1a0023d8 <create_name+0x23c>)
1a00235a:	5d9e      	ldrb	r6, [r3, r6]
1a00235c:	e7a0      	b.n	1a0022a0 <create_name+0x104>
				cf |= NS_LOSS | NS_LFN;
1a00235e:	f047 0703 	orr.w	r7, r7, #3
		wc = lfn[si++];					/* Get an LFN character */
1a002362:	464e      	mov	r6, r9
				i = ni; continue;		/* Next field */
1a002364:	f8cd b004 	str.w	fp, [sp, #4]
1a002368:	e78a      	b.n	1a002280 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a00236a:	b956      	cbnz	r6, 1a002382 <create_name+0x1e6>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1a00236c:	f047 0703 	orr.w	r7, r7, #3
1a002370:	9b01      	ldr	r3, [sp, #4]
1a002372:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)wc;
1a002374:	1c5a      	adds	r2, r3, #1
1a002376:	9201      	str	r2, [sp, #4]
1a002378:	4443      	add	r3, r8
1a00237a:	f883 6040 	strb.w	r6, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
1a00237e:	464e      	mov	r6, r9
1a002380:	e77e      	b.n	1a002280 <create_name+0xe4>
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
1a002382:	4631      	mov	r1, r6
1a002384:	4815      	ldr	r0, [pc, #84]	; (1a0023dc <create_name+0x240>)
1a002386:	f7fe fc17 	bl	1a000bb8 <chk_chr>
1a00238a:	2800      	cmp	r0, #0
1a00238c:	d1ee      	bne.n	1a00236c <create_name+0x1d0>
				if (IsUpper(wc)) {		/* ASCII upper case? */
1a00238e:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
1a002392:	b29b      	uxth	r3, r3
1a002394:	2b19      	cmp	r3, #25
1a002396:	d801      	bhi.n	1a00239c <create_name+0x200>
					b |= 2;
1a002398:	f04a 0a02 	orr.w	sl, sl, #2
				if (IsLower(wc)) {		/* ASCII lower case? */
1a00239c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
1a0023a0:	b29b      	uxth	r3, r3
1a0023a2:	2b19      	cmp	r3, #25
1a0023a4:	d805      	bhi.n	1a0023b2 <create_name+0x216>
					b |= 1; wc -= 0x20;
1a0023a6:	f04a 0a01 	orr.w	sl, sl, #1
1a0023aa:	3e20      	subs	r6, #32
1a0023ac:	b2b6      	uxth	r6, r6
1a0023ae:	9b01      	ldr	r3, [sp, #4]
1a0023b0:	e7e0      	b.n	1a002374 <create_name+0x1d8>
1a0023b2:	9b01      	ldr	r3, [sp, #4]
1a0023b4:	e7de      	b.n	1a002374 <create_name+0x1d8>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a0023b6:	2305      	movs	r3, #5
1a0023b8:	f888 3040 	strb.w	r3, [r8, #64]	; 0x40
1a0023bc:	e792      	b.n	1a0022e4 <create_name+0x148>
	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
1a0023be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
1a0023c2:	fa5f fa8a 	uxtb.w	sl, sl
1a0023c6:	e790      	b.n	1a0022ea <create_name+0x14e>
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
1a0023c8:	2006      	movs	r0, #6
1a0023ca:	e7a8      	b.n	1a00231e <create_name+0x182>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
1a0023cc:	2006      	movs	r0, #6
1a0023ce:	e7a6      	b.n	1a00231e <create_name+0x182>
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
1a0023d0:	2006      	movs	r0, #6
1a0023d2:	e7a4      	b.n	1a00231e <create_name+0x182>
1a0023d4:	1a0096cc 	.word	0x1a0096cc
1a0023d8:	1a00961c 	.word	0x1a00961c
1a0023dc:	1a0096d8 	.word	0x1a0096d8

1a0023e0 <xname_sum>:
{
1a0023e0:	b538      	push	{r3, r4, r5, lr}
	WORD sum = 0;
1a0023e2:	2400      	movs	r4, #0
	while ((chr = *name++) != 0) {
1a0023e4:	e011      	b.n	1a00240a <xname_sum+0x2a>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
1a0023e6:	f000 fe83 	bl	1a0030f0 <ff_wtoupper>
1a0023ea:	b280      	uxth	r0, r0
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
1a0023ec:	0863      	lsrs	r3, r4, #1
1a0023ee:	eb03 34c4 	add.w	r4, r3, r4, lsl #15
1a0023f2:	b2c3      	uxtb	r3, r0
1a0023f4:	fa13 f484 	uxtah	r4, r3, r4
1a0023f8:	b2a3      	uxth	r3, r4
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
1a0023fa:	085c      	lsrs	r4, r3, #1
1a0023fc:	eb04 34c3 	add.w	r4, r4, r3, lsl #15
1a002400:	0a00      	lsrs	r0, r0, #8
1a002402:	fa10 f484 	uxtah	r4, r0, r4
1a002406:	b2a4      	uxth	r4, r4
	while ((chr = *name++) != 0) {
1a002408:	4628      	mov	r0, r5
1a00240a:	1c85      	adds	r5, r0, #2
1a00240c:	8800      	ldrh	r0, [r0, #0]
1a00240e:	2800      	cmp	r0, #0
1a002410:	d1e9      	bne.n	1a0023e6 <xname_sum+0x6>
}
1a002412:	4620      	mov	r0, r4
1a002414:	bd38      	pop	{r3, r4, r5, pc}

1a002416 <create_xdir>:
{
1a002416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00241a:	4607      	mov	r7, r0
1a00241c:	4688      	mov	r8, r1
	mem_set(dirb, 0, 2 * SZDIRE);
1a00241e:	2240      	movs	r2, #64	; 0x40
1a002420:	2100      	movs	r1, #0
1a002422:	f7fe fbb5 	bl	1a000b90 <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = 0x85;	/* 85 entry */
1a002426:	2385      	movs	r3, #133	; 0x85
1a002428:	703b      	strb	r3, [r7, #0]
	dirb[1 * SZDIRE + XDIR_Type] = 0xC0;	/* C0 entry */
1a00242a:	23c0      	movs	r3, #192	; 0xc0
1a00242c:	f887 3020 	strb.w	r3, [r7, #32]
	nlen = nc1 = 0; wc = 1;
1a002430:	2501      	movs	r5, #1
1a002432:	2600      	movs	r6, #0
1a002434:	46b1      	mov	r9, r6
	i = SZDIRE * 2;	/* Top of C1 entries */
1a002436:	2440      	movs	r4, #64	; 0x40
1a002438:	e017      	b.n	1a00246a <create_xdir+0x54>
			st_word(dirb + i, wc); 		/* Store it */
1a00243a:	4629      	mov	r1, r5
1a00243c:	1938      	adds	r0, r7, r4
1a00243e:	f7fe fb7d 	bl	1a000b3c <st_word>
			i += 2;
1a002442:	3402      	adds	r4, #2
		} while (i % SZDIRE != 0);
1a002444:	f014 0f1f 	tst.w	r4, #31
1a002448:	d008      	beq.n	1a00245c <create_xdir+0x46>
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
1a00244a:	2d00      	cmp	r5, #0
1a00244c:	d0f5      	beq.n	1a00243a <create_xdir+0x24>
1a00244e:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
1a002452:	2d00      	cmp	r5, #0
1a002454:	d0f1      	beq.n	1a00243a <create_xdir+0x24>
1a002456:	3601      	adds	r6, #1
1a002458:	b2f6      	uxtb	r6, r6
1a00245a:	e7ee      	b.n	1a00243a <create_xdir+0x24>
		nc1++;
1a00245c:	f109 0301 	add.w	r3, r9, #1
1a002460:	b2db      	uxtb	r3, r3
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
1a002462:	f838 2016 	ldrh.w	r2, [r8, r6, lsl #1]
1a002466:	b13a      	cbz	r2, 1a002478 <create_xdir+0x62>
		nc1++;
1a002468:	4699      	mov	r9, r3
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
1a00246a:	1c63      	adds	r3, r4, #1
1a00246c:	22c1      	movs	r2, #193	; 0xc1
1a00246e:	553a      	strb	r2, [r7, r4]
1a002470:	2200      	movs	r2, #0
1a002472:	54fa      	strb	r2, [r7, r3]
1a002474:	3402      	adds	r4, #2
1a002476:	e7e8      	b.n	1a00244a <create_xdir+0x34>
	dirb[XDIR_NumName] = nlen;		/* Set name length */
1a002478:	f887 6023 	strb.w	r6, [r7, #35]	; 0x23
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
1a00247c:	f109 0902 	add.w	r9, r9, #2
1a002480:	f887 9001 	strb.w	r9, [r7, #1]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
1a002484:	4640      	mov	r0, r8
1a002486:	f7ff ffab 	bl	1a0023e0 <xname_sum>
1a00248a:	4601      	mov	r1, r0
1a00248c:	f107 0024 	add.w	r0, r7, #36	; 0x24
1a002490:	f7fe fb54 	bl	1a000b3c <st_word>
}
1a002494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a002498 <cmp_lfn>:
{
1a002498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00249c:	4681      	mov	r9, r0
1a00249e:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a0024a0:	f101 001a 	add.w	r0, r1, #26
1a0024a4:	f7fe fae6 	bl	1a000a74 <ld_word>
1a0024a8:	bbb8      	cbnz	r0, 1a00251a <cmp_lfn+0x82>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1a0024aa:	783d      	ldrb	r5, [r7, #0]
1a0024ac:	f005 053f 	and.w	r5, r5, #63	; 0x3f
1a0024b0:	3d01      	subs	r5, #1
1a0024b2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a0024b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0024ba:	f04f 0801 	mov.w	r8, #1
1a0024be:	2400      	movs	r4, #0
1a0024c0:	e004      	b.n	1a0024cc <cmp_lfn+0x34>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a0024c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0024c6:	4298      	cmp	r0, r3
1a0024c8:	d12e      	bne.n	1a002528 <cmp_lfn+0x90>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1a0024ca:	3401      	adds	r4, #1
1a0024cc:	2c0c      	cmp	r4, #12
1a0024ce:	d818      	bhi.n	1a002502 <cmp_lfn+0x6a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1a0024d0:	4b19      	ldr	r3, [pc, #100]	; (1a002538 <cmp_lfn+0xa0>)
1a0024d2:	5d18      	ldrb	r0, [r3, r4]
1a0024d4:	4438      	add	r0, r7
1a0024d6:	f7fe facd 	bl	1a000a74 <ld_word>
1a0024da:	4606      	mov	r6, r0
		if (wc != 0) {
1a0024dc:	f1b8 0f00 	cmp.w	r8, #0
1a0024e0:	d0ef      	beq.n	1a0024c2 <cmp_lfn+0x2a>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0024e2:	2dfe      	cmp	r5, #254	; 0xfe
1a0024e4:	d81c      	bhi.n	1a002520 <cmp_lfn+0x88>
1a0024e6:	f000 fe03 	bl	1a0030f0 <ff_wtoupper>
1a0024ea:	4680      	mov	r8, r0
1a0024ec:	f105 0a01 	add.w	sl, r5, #1
1a0024f0:	f839 0015 	ldrh.w	r0, [r9, r5, lsl #1]
1a0024f4:	f000 fdfc 	bl	1a0030f0 <ff_wtoupper>
1a0024f8:	4580      	cmp	r8, r0
1a0024fa:	d113      	bne.n	1a002524 <cmp_lfn+0x8c>
			wc = uc;
1a0024fc:	46b0      	mov	r8, r6
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1a0024fe:	4655      	mov	r5, sl
1a002500:	e7e3      	b.n	1a0024ca <cmp_lfn+0x32>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002502:	783b      	ldrb	r3, [r7, #0]
1a002504:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002508:	d010      	beq.n	1a00252c <cmp_lfn+0x94>
1a00250a:	f1b8 0f00 	cmp.w	r8, #0
1a00250e:	d00f      	beq.n	1a002530 <cmp_lfn+0x98>
1a002510:	f839 3015 	ldrh.w	r3, [r9, r5, lsl #1]
1a002514:	b973      	cbnz	r3, 1a002534 <cmp_lfn+0x9c>
	return 1;		/* The part of LFN matched */
1a002516:	2001      	movs	r0, #1
1a002518:	e000      	b.n	1a00251c <cmp_lfn+0x84>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1a00251a:	2000      	movs	r0, #0
}
1a00251c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;					/* Not matched */
1a002520:	2000      	movs	r0, #0
1a002522:	e7fb      	b.n	1a00251c <cmp_lfn+0x84>
1a002524:	2000      	movs	r0, #0
1a002526:	e7f9      	b.n	1a00251c <cmp_lfn+0x84>
			if (uc != 0xFFFF) return 0;		/* Check filler */
1a002528:	2000      	movs	r0, #0
1a00252a:	e7f7      	b.n	1a00251c <cmp_lfn+0x84>
	return 1;		/* The part of LFN matched */
1a00252c:	2001      	movs	r0, #1
1a00252e:	e7f5      	b.n	1a00251c <cmp_lfn+0x84>
1a002530:	2001      	movs	r0, #1
1a002532:	e7f3      	b.n	1a00251c <cmp_lfn+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
1a002534:	2000      	movs	r0, #0
1a002536:	e7f1      	b.n	1a00251c <cmp_lfn+0x84>
1a002538:	1a00969c 	.word	0x1a00969c

1a00253c <dir_find>:
{
1a00253c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002540:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
1a002542:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a002544:	2100      	movs	r1, #0
1a002546:	f7ff fa3b 	bl	1a0019c0 <dir_sdi>
	if (res != FR_OK) return res;
1a00254a:	4680      	mov	r8, r0
1a00254c:	2800      	cmp	r0, #0
1a00254e:	f040 80a0 	bne.w	1a002692 <dir_find+0x156>
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002552:	783b      	ldrb	r3, [r7, #0]
1a002554:	2b04      	cmp	r3, #4
1a002556:	d006      	beq.n	1a002566 <dir_find+0x2a>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a00255c:	64e3      	str	r3, [r4, #76]	; 0x4c
1a00255e:	f04f 09ff 	mov.w	r9, #255	; 0xff
1a002562:	464e      	mov	r6, r9
1a002564:	e042      	b.n	1a0025ec <dir_find+0xb0>
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
1a002566:	68f8      	ldr	r0, [r7, #12]
1a002568:	f7ff ff3a 	bl	1a0023e0 <xname_sum>
1a00256c:	4683      	mov	fp, r0
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a00256e:	e01e      	b.n	1a0025ae <dir_find+0x72>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
1a002570:	6938      	ldr	r0, [r7, #16]
1a002572:	4430      	add	r0, r6
1a002574:	f7fe fa7e 	bl	1a000a74 <ld_word>
1a002578:	f000 fdba 	bl	1a0030f0 <ff_wtoupper>
1a00257c:	4682      	mov	sl, r0
1a00257e:	68fb      	ldr	r3, [r7, #12]
1a002580:	f833 0019 	ldrh.w	r0, [r3, r9, lsl #1]
1a002584:	f000 fdb4 	bl	1a0030f0 <ff_wtoupper>
1a002588:	4582      	cmp	sl, r0
1a00258a:	d10a      	bne.n	1a0025a2 <dir_find+0x66>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a00258c:	3d01      	subs	r5, #1
1a00258e:	b2ed      	uxtb	r5, r5
1a002590:	3602      	adds	r6, #2
1a002592:	f109 0901 	add.w	r9, r9, #1
1a002596:	b125      	cbz	r5, 1a0025a2 <dir_find+0x66>
				if ((di % SZDIRE) == 0) di += 2;
1a002598:	f016 0f1f 	tst.w	r6, #31
1a00259c:	d1e8      	bne.n	1a002570 <dir_find+0x34>
1a00259e:	3602      	adds	r6, #2
1a0025a0:	e7e6      	b.n	1a002570 <dir_find+0x34>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
1a0025a2:	b925      	cbnz	r5, 1a0025ae <dir_find+0x72>
1a0025a4:	68fb      	ldr	r3, [r7, #12]
1a0025a6:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
1a0025aa:	2b00      	cmp	r3, #0
1a0025ac:	d071      	beq.n	1a002692 <dir_find+0x156>
		while ((res = dir_read_file(dp)) == FR_OK) {	/* Read an item */
1a0025ae:	2100      	movs	r1, #0
1a0025b0:	4620      	mov	r0, r4
1a0025b2:	f7ff fd18 	bl	1a001fe6 <dir_read>
1a0025b6:	4680      	mov	r8, r0
1a0025b8:	2800      	cmp	r0, #0
1a0025ba:	d16a      	bne.n	1a002692 <dir_find+0x156>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
1a0025bc:	693d      	ldr	r5, [r7, #16]
1a0025be:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0025c2:	f7fe fa57 	bl	1a000a74 <ld_word>
1a0025c6:	4558      	cmp	r0, fp
1a0025c8:	d1f1      	bne.n	1a0025ae <dir_find+0x72>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
1a0025ca:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
1a0025ce:	f04f 0900 	mov.w	r9, #0
1a0025d2:	2640      	movs	r6, #64	; 0x40
1a0025d4:	e7df      	b.n	1a002596 <dir_find+0x5a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a0025d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a0025da:	64e3      	str	r3, [r4, #76]	; 0x4c
1a0025dc:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
1a0025de:	2100      	movs	r1, #0
1a0025e0:	4620      	mov	r0, r4
1a0025e2:	f7ff fbf5 	bl	1a001dd0 <dir_next>
	} while (res == FR_OK);
1a0025e6:	4680      	mov	r8, r0
1a0025e8:	2800      	cmp	r0, #0
1a0025ea:	d152      	bne.n	1a002692 <dir_find+0x156>
		res = move_window(fs, dp->sect);
1a0025ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
1a0025ee:	4638      	mov	r0, r7
1a0025f0:	f7fe fd38 	bl	1a001064 <move_window>
		if (res != FR_OK) break;
1a0025f4:	4680      	mov	r8, r0
1a0025f6:	2800      	cmp	r0, #0
1a0025f8:	d14b      	bne.n	1a002692 <dir_find+0x156>
		c = dp->dir[DIR_Name];
1a0025fa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
1a0025fc:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a0025fe:	2b00      	cmp	r3, #0
1a002600:	d045      	beq.n	1a00268e <dir_find+0x152>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
1a002602:	7ae9      	ldrb	r1, [r5, #11]
1a002604:	f001 023f 	and.w	r2, r1, #63	; 0x3f
1a002608:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1a00260a:	2be5      	cmp	r3, #229	; 0xe5
1a00260c:	d0e3      	beq.n	1a0025d6 <dir_find+0x9a>
1a00260e:	f011 0f08 	tst.w	r1, #8
1a002612:	d001      	beq.n	1a002618 <dir_find+0xdc>
1a002614:	2a0f      	cmp	r2, #15
1a002616:	d1de      	bne.n	1a0025d6 <dir_find+0x9a>
			if (a == AM_LFN) {			/* An LFN entry is found */
1a002618:	2a0f      	cmp	r2, #15
1a00261a:	d016      	beq.n	1a00264a <dir_find+0x10e>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
1a00261c:	b926      	cbnz	r6, 1a002628 <dir_find+0xec>
1a00261e:	4628      	mov	r0, r5
1a002620:	f7fe fc3e 	bl	1a000ea0 <sum_sfn>
1a002624:	4548      	cmp	r0, r9
1a002626:	d034      	beq.n	1a002692 <dir_find+0x156>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
1a002628:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
1a00262c:	f013 0f01 	tst.w	r3, #1
1a002630:	d106      	bne.n	1a002640 <dir_find+0x104>
1a002632:	220b      	movs	r2, #11
1a002634:	f104 0140 	add.w	r1, r4, #64	; 0x40
1a002638:	4628      	mov	r0, r5
1a00263a:	f7fe faae 	bl	1a000b9a <mem_cmp>
1a00263e:	b340      	cbz	r0, 1a002692 <dir_find+0x156>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
1a002640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a002644:	64e3      	str	r3, [r4, #76]	; 0x4c
1a002646:	26ff      	movs	r6, #255	; 0xff
1a002648:	e7c9      	b.n	1a0025de <dir_find+0xa2>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
1a00264a:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
1a00264e:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002652:	d1c4      	bne.n	1a0025de <dir_find+0xa2>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
1a002654:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002658:	d006      	beq.n	1a002668 <dir_find+0x12c>
						sum = dp->dir[LDIR_Chksum];
1a00265a:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a00265e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
1a002662:	6b22      	ldr	r2, [r4, #48]	; 0x30
1a002664:	64e2      	str	r2, [r4, #76]	; 0x4c
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
1a002666:	461e      	mov	r6, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
1a002668:	42b3      	cmp	r3, r6
1a00266a:	d001      	beq.n	1a002670 <dir_find+0x134>
1a00266c:	26ff      	movs	r6, #255	; 0xff
1a00266e:	e7b6      	b.n	1a0025de <dir_find+0xa2>
1a002670:	7b6b      	ldrb	r3, [r5, #13]
1a002672:	454b      	cmp	r3, r9
1a002674:	d001      	beq.n	1a00267a <dir_find+0x13e>
1a002676:	26ff      	movs	r6, #255	; 0xff
1a002678:	e7b1      	b.n	1a0025de <dir_find+0xa2>
1a00267a:	4629      	mov	r1, r5
1a00267c:	68f8      	ldr	r0, [r7, #12]
1a00267e:	f7ff ff0b 	bl	1a002498 <cmp_lfn>
1a002682:	b110      	cbz	r0, 1a00268a <dir_find+0x14e>
1a002684:	3e01      	subs	r6, #1
1a002686:	b2f6      	uxtb	r6, r6
1a002688:	e7a9      	b.n	1a0025de <dir_find+0xa2>
1a00268a:	26ff      	movs	r6, #255	; 0xff
1a00268c:	e7a7      	b.n	1a0025de <dir_find+0xa2>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a00268e:	f04f 0804 	mov.w	r8, #4
}
1a002692:	4640      	mov	r0, r8
1a002694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a002698 <follow_path>:
{
1a002698:	b530      	push	{r4, r5, lr}
1a00269a:	b083      	sub	sp, #12
1a00269c:	4604      	mov	r4, r0
1a00269e:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
1a0026a0:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a0026a2:	e001      	b.n	1a0026a8 <follow_path+0x10>
1a0026a4:	3301      	adds	r3, #1
1a0026a6:	9301      	str	r3, [sp, #4]
1a0026a8:	9b01      	ldr	r3, [sp, #4]
1a0026aa:	781a      	ldrb	r2, [r3, #0]
1a0026ac:	2a2f      	cmp	r2, #47	; 0x2f
1a0026ae:	d0f9      	beq.n	1a0026a4 <follow_path+0xc>
1a0026b0:	2a5c      	cmp	r2, #92	; 0x5c
1a0026b2:	d0f7      	beq.n	1a0026a4 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from root directory */
1a0026b4:	2200      	movs	r2, #0
1a0026b6:	60a2      	str	r2, [r4, #8]
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
1a0026b8:	61e2      	str	r2, [r4, #28]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a0026ba:	781b      	ldrb	r3, [r3, #0]
1a0026bc:	2b1f      	cmp	r3, #31
1a0026be:	d81f      	bhi.n	1a002700 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
1a0026c0:	2380      	movs	r3, #128	; 0x80
1a0026c2:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		res = dir_sdi(dp, 0);
1a0026c6:	4611      	mov	r1, r2
1a0026c8:	4620      	mov	r0, r4
1a0026ca:	f7ff f979 	bl	1a0019c0 <dir_sdi>
1a0026ce:	4603      	mov	r3, r0
}
1a0026d0:	4618      	mov	r0, r3
1a0026d2:	b003      	add	sp, #12
1a0026d4:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
1a0026d6:	2804      	cmp	r0, #4
1a0026d8:	d1fa      	bne.n	1a0026d0 <follow_path+0x38>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a0026da:	f012 0f04 	tst.w	r2, #4
1a0026de:	d1f7      	bne.n	1a0026d0 <follow_path+0x38>
1a0026e0:	2305      	movs	r3, #5
1a0026e2:	e7f5      	b.n	1a0026d0 <follow_path+0x38>
				dp->obj.c_scl = dp->obj.sclust;
1a0026e4:	68a3      	ldr	r3, [r4, #8]
1a0026e6:	6223      	str	r3, [r4, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
1a0026e8:	6923      	ldr	r3, [r4, #16]
1a0026ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0026ee:	79e2      	ldrb	r2, [r4, #7]
1a0026f0:	4313      	orrs	r3, r2
1a0026f2:	6263      	str	r3, [r4, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
1a0026f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
1a0026f6:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
1a0026f8:	4621      	mov	r1, r4
1a0026fa:	4628      	mov	r0, r5
1a0026fc:	f7fe fbf6 	bl	1a000eec <init_alloc_info>
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a002700:	a901      	add	r1, sp, #4
1a002702:	4620      	mov	r0, r4
1a002704:	f7ff fd4a 	bl	1a00219c <create_name>
			if (res != FR_OK) break;
1a002708:	4603      	mov	r3, r0
1a00270a:	2800      	cmp	r0, #0
1a00270c:	d1e0      	bne.n	1a0026d0 <follow_path+0x38>
			res = dir_find(dp);				/* Find an object with the segment name */
1a00270e:	4620      	mov	r0, r4
1a002710:	f7ff ff14 	bl	1a00253c <dir_find>
			ns = dp->fn[NSFLAG];
1a002714:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
			if (res != FR_OK) {				/* Failed to find the object */
1a002718:	4603      	mov	r3, r0
1a00271a:	2800      	cmp	r0, #0
1a00271c:	d1db      	bne.n	1a0026d6 <follow_path+0x3e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a00271e:	f012 0f04 	tst.w	r2, #4
1a002722:	d1d5      	bne.n	1a0026d0 <follow_path+0x38>
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a002724:	79a3      	ldrb	r3, [r4, #6]
1a002726:	f013 0f10 	tst.w	r3, #16
1a00272a:	d00d      	beq.n	1a002748 <follow_path+0xb0>
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
1a00272c:	782b      	ldrb	r3, [r5, #0]
1a00272e:	2b04      	cmp	r3, #4
1a002730:	d0d8      	beq.n	1a0026e4 <follow_path+0x4c>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a002732:	f105 0138 	add.w	r1, r5, #56	; 0x38
1a002736:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a002738:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a00273c:	4419      	add	r1, r3
1a00273e:	4628      	mov	r0, r5
1a002740:	f7fe fab0 	bl	1a000ca4 <ld_clust>
1a002744:	60a0      	str	r0, [r4, #8]
1a002746:	e7db      	b.n	1a002700 <follow_path+0x68>
				res = FR_NO_PATH; break;
1a002748:	2305      	movs	r3, #5
1a00274a:	e7c1      	b.n	1a0026d0 <follow_path+0x38>

1a00274c <dir_register>:
{
1a00274c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002750:	b099      	sub	sp, #100	; 0x64
	FATFS *fs = dp->obj.fs;
1a002752:	6805      	ldr	r5, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a002754:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
1a002758:	f013 0fa0 	tst.w	r3, #160	; 0xa0
1a00275c:	f040 80eb 	bne.w	1a002936 <dir_register+0x1ea>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
1a002760:	2400      	movs	r4, #0
1a002762:	e000      	b.n	1a002766 <dir_register+0x1a>
1a002764:	3401      	adds	r4, #1
1a002766:	68eb      	ldr	r3, [r5, #12]
1a002768:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
1a00276c:	2b00      	cmp	r3, #0
1a00276e:	d1f9      	bne.n	1a002764 <dir_register+0x18>
1a002770:	4606      	mov	r6, r0
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1a002772:	782b      	ldrb	r3, [r5, #0]
1a002774:	2b04      	cmp	r3, #4
1a002776:	d022      	beq.n	1a0027be <dir_register+0x72>
	mem_cpy(sn, dp->fn, 12);
1a002778:	f100 0740 	add.w	r7, r0, #64	; 0x40
1a00277c:	220c      	movs	r2, #12
1a00277e:	4639      	mov	r1, r7
1a002780:	a815      	add	r0, sp, #84	; 0x54
1a002782:	f7fe f9fc 	bl	1a000b7e <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1a002786:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00278a:	f013 0f01 	tst.w	r3, #1
1a00278e:	d07a      	beq.n	1a002886 <dir_register+0x13a>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
1a002790:	2340      	movs	r3, #64	; 0x40
1a002792:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
1a002796:	f04f 0801 	mov.w	r8, #1
1a00279a:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
1a00279e:	d868      	bhi.n	1a002872 <dir_register+0x126>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
1a0027a0:	4643      	mov	r3, r8
1a0027a2:	68ea      	ldr	r2, [r5, #12]
1a0027a4:	a915      	add	r1, sp, #84	; 0x54
1a0027a6:	4638      	mov	r0, r7
1a0027a8:	f7fe fb22 	bl	1a000df0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
1a0027ac:	4630      	mov	r0, r6
1a0027ae:	f7ff fec5 	bl	1a00253c <dir_find>
			if (res != FR_OK) break;
1a0027b2:	4681      	mov	r9, r0
1a0027b4:	2800      	cmp	r0, #0
1a0027b6:	d15c      	bne.n	1a002872 <dir_register+0x126>
		for (n = 1; n < 100; n++) {
1a0027b8:	f108 0801 	add.w	r8, r8, #1
1a0027bc:	e7ed      	b.n	1a00279a <dir_register+0x4e>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
1a0027be:	340e      	adds	r4, #14
1a0027c0:	4b62      	ldr	r3, [pc, #392]	; (1a00294c <dir_register+0x200>)
1a0027c2:	fba3 3404 	umull	r3, r4, r3, r4
1a0027c6:	08e4      	lsrs	r4, r4, #3
		res = dir_alloc(dp, nent);		/* Allocate entries */
1a0027c8:	1ca1      	adds	r1, r4, #2
1a0027ca:	f7ff fc81 	bl	1a0020d0 <dir_alloc>
		if (res != FR_OK) return res;
1a0027ce:	4681      	mov	r9, r0
1a0027d0:	2800      	cmp	r0, #0
1a0027d2:	f040 80b2 	bne.w	1a00293a <dir_register+0x1ee>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
1a0027d6:	6b33      	ldr	r3, [r6, #48]	; 0x30
1a0027d8:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
1a0027dc:	3401      	adds	r4, #1
1a0027de:	eba3 1444 	sub.w	r4, r3, r4, lsl #5
1a0027e2:	64f4      	str	r4, [r6, #76]	; 0x4c
		if (dp->obj.stat & 4) {			/* Has the directory been stretched? */
1a0027e4:	79f3      	ldrb	r3, [r6, #7]
1a0027e6:	f013 0f04 	tst.w	r3, #4
1a0027ea:	d013      	beq.n	1a002814 <dir_register+0xc8>
			dp->obj.stat &= ~4;
1a0027ec:	f023 0304 	bic.w	r3, r3, #4
1a0027f0:	71f3      	strb	r3, [r6, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
1a0027f2:	4630      	mov	r0, r6
1a0027f4:	f7ff f812 	bl	1a00181c <fill_first_frag>
			if (res != FR_OK) return res;
1a0027f8:	b108      	cbz	r0, 1a0027fe <dir_register+0xb2>
1a0027fa:	4681      	mov	r9, r0
1a0027fc:	e09d      	b.n	1a00293a <dir_register+0x1ee>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
1a0027fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002802:	6b71      	ldr	r1, [r6, #52]	; 0x34
1a002804:	4630      	mov	r0, r6
1a002806:	f7fe fff1 	bl	1a0017ec <fill_last_frag>
			if (res != FR_OK) return res;
1a00280a:	2800      	cmp	r0, #0
1a00280c:	f040 8099 	bne.w	1a002942 <dir_register+0x1f6>
			if (dp->obj.sclust != 0) {		/* Is it a sub directory? */
1a002810:	68b3      	ldr	r3, [r6, #8]
1a002812:	b923      	cbnz	r3, 1a00281e <dir_register+0xd2>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
1a002814:	68e9      	ldr	r1, [r5, #12]
1a002816:	6928      	ldr	r0, [r5, #16]
1a002818:	f7ff fdfd 	bl	1a002416 <create_xdir>
		return FR_OK;
1a00281c:	e08d      	b.n	1a00293a <dir_register+0x1ee>
				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
1a00281e:	4631      	mov	r1, r6
1a002820:	4668      	mov	r0, sp
1a002822:	f7ff fbc3 	bl	1a001fac <load_obj_xdir>
				if (res != FR_OK) return res;
1a002826:	4603      	mov	r3, r0
1a002828:	b108      	cbz	r0, 1a00282e <dir_register+0xe2>
1a00282a:	4699      	mov	r9, r3
1a00282c:	e085      	b.n	1a00293a <dir_register+0x1ee>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
1a00282e:	8969      	ldrh	r1, [r5, #10]
1a002830:	0249      	lsls	r1, r1, #9
1a002832:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a002836:	1857      	adds	r7, r2, r1
1a002838:	f143 0800 	adc.w	r8, r3, #0
1a00283c:	e9c6 7804 	strd	r7, r8, [r6, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
1a002840:	6928      	ldr	r0, [r5, #16]
1a002842:	463a      	mov	r2, r7
1a002844:	4643      	mov	r3, r8
1a002846:	3038      	adds	r0, #56	; 0x38
1a002848:	f7fe f986 	bl	1a000b58 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
1a00284c:	6928      	ldr	r0, [r5, #16]
1a00284e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
1a002852:	3028      	adds	r0, #40	; 0x28
1a002854:	f7fe f980 	bl	1a000b58 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
1a002858:	79f3      	ldrb	r3, [r6, #7]
1a00285a:	692a      	ldr	r2, [r5, #16]
1a00285c:	f043 0301 	orr.w	r3, r3, #1
1a002860:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
				res = store_xdir(&dj);				/* Store the object status */
1a002864:	4668      	mov	r0, sp
1a002866:	f7ff fc69 	bl	1a00213c <store_xdir>
				if (res != FR_OK) return res;
1a00286a:	4603      	mov	r3, r0
1a00286c:	2800      	cmp	r0, #0
1a00286e:	d0d1      	beq.n	1a002814 <dir_register+0xc8>
1a002870:	e7db      	b.n	1a00282a <dir_register+0xde>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002872:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
1a002876:	d066      	beq.n	1a002946 <dir_register+0x1fa>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1a002878:	f1b9 0f04 	cmp.w	r9, #4
1a00287c:	d15d      	bne.n	1a00293a <dir_register+0x1ee>
		dp->fn[NSFLAG] = sn[NSFLAG];
1a00287e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a002882:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a002886:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
1a00288a:	f013 0f02 	tst.w	r3, #2
1a00288e:	d02a      	beq.n	1a0028e6 <dir_register+0x19a>
1a002890:	340c      	adds	r4, #12
1a002892:	4b2f      	ldr	r3, [pc, #188]	; (1a002950 <dir_register+0x204>)
1a002894:	fba3 3404 	umull	r3, r4, r3, r4
1a002898:	08a4      	lsrs	r4, r4, #2
1a00289a:	3401      	adds	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
1a00289c:	4621      	mov	r1, r4
1a00289e:	4630      	mov	r0, r6
1a0028a0:	f7ff fc16 	bl	1a0020d0 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
1a0028a4:	4681      	mov	r9, r0
1a0028a6:	b908      	cbnz	r0, 1a0028ac <dir_register+0x160>
1a0028a8:	3c01      	subs	r4, #1
1a0028aa:	d11e      	bne.n	1a0028ea <dir_register+0x19e>
	if (res == FR_OK) {
1a0028ac:	f1b9 0f00 	cmp.w	r9, #0
1a0028b0:	d143      	bne.n	1a00293a <dir_register+0x1ee>
		res = move_window(fs, dp->sect);
1a0028b2:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a0028b4:	4628      	mov	r0, r5
1a0028b6:	f7fe fbd5 	bl	1a001064 <move_window>
		if (res == FR_OK) {
1a0028ba:	4681      	mov	r9, r0
1a0028bc:	2800      	cmp	r0, #0
1a0028be:	d13c      	bne.n	1a00293a <dir_register+0x1ee>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a0028c0:	2220      	movs	r2, #32
1a0028c2:	2100      	movs	r1, #0
1a0028c4:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a0028c6:	f7fe f963 	bl	1a000b90 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a0028ca:	220b      	movs	r2, #11
1a0028cc:	4639      	mov	r1, r7
1a0028ce:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
1a0028d0:	f7fe f955 	bl	1a000b7e <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
1a0028d4:	f896 304b 	ldrb.w	r3, [r6, #75]	; 0x4b
1a0028d8:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
1a0028da:	f003 0318 	and.w	r3, r3, #24
1a0028de:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
1a0028e0:	2301      	movs	r3, #1
1a0028e2:	70eb      	strb	r3, [r5, #3]
1a0028e4:	e029      	b.n	1a00293a <dir_register+0x1ee>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
1a0028e6:	2401      	movs	r4, #1
1a0028e8:	e7d8      	b.n	1a00289c <dir_register+0x150>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
1a0028ea:	6b31      	ldr	r1, [r6, #48]	; 0x30
1a0028ec:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
1a0028f0:	4630      	mov	r0, r6
1a0028f2:	f7ff f865 	bl	1a0019c0 <dir_sdi>
		if (res == FR_OK) {
1a0028f6:	4681      	mov	r9, r0
1a0028f8:	2800      	cmp	r0, #0
1a0028fa:	d1d7      	bne.n	1a0028ac <dir_register+0x160>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
1a0028fc:	4638      	mov	r0, r7
1a0028fe:	f7fe facf 	bl	1a000ea0 <sum_sfn>
1a002902:	4680      	mov	r8, r0
				res = move_window(fs, dp->sect);
1a002904:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1a002906:	4628      	mov	r0, r5
1a002908:	f7fe fbac 	bl	1a001064 <move_window>
				if (res != FR_OK) break;
1a00290c:	4681      	mov	r9, r0
1a00290e:	2800      	cmp	r0, #0
1a002910:	d1cc      	bne.n	1a0028ac <dir_register+0x160>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
1a002912:	4643      	mov	r3, r8
1a002914:	b2e2      	uxtb	r2, r4
1a002916:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1a002918:	68e8      	ldr	r0, [r5, #12]
1a00291a:	f7fe fa2d 	bl	1a000d78 <put_lfn>
				fs->wflag = 1;
1a00291e:	2301      	movs	r3, #1
1a002920:	70eb      	strb	r3, [r5, #3]
				res = dir_next(dp, 0);	/* Next entry */
1a002922:	2100      	movs	r1, #0
1a002924:	4630      	mov	r0, r6
1a002926:	f7ff fa53 	bl	1a001dd0 <dir_next>
			} while (res == FR_OK && --nent);
1a00292a:	4681      	mov	r9, r0
1a00292c:	2800      	cmp	r0, #0
1a00292e:	d1bd      	bne.n	1a0028ac <dir_register+0x160>
1a002930:	3c01      	subs	r4, #1
1a002932:	d1e7      	bne.n	1a002904 <dir_register+0x1b8>
1a002934:	e7ba      	b.n	1a0028ac <dir_register+0x160>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
1a002936:	f04f 0906 	mov.w	r9, #6
}
1a00293a:	4648      	mov	r0, r9
1a00293c:	b019      	add	sp, #100	; 0x64
1a00293e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (res != FR_OK) return res;
1a002942:	4681      	mov	r9, r0
1a002944:	e7f9      	b.n	1a00293a <dir_register+0x1ee>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1a002946:	f04f 0907 	mov.w	r9, #7
1a00294a:	e7f6      	b.n	1a00293a <dir_register+0x1ee>
1a00294c:	88888889 	.word	0x88888889
1a002950:	4ec4ec4f 	.word	0x4ec4ec4f

1a002954 <sync_fs>:
{
1a002954:	b570      	push	{r4, r5, r6, lr}
1a002956:	4604      	mov	r4, r0
	res = sync_window(fs);
1a002958:	f7fe fb5c 	bl	1a001014 <sync_window>
	if (res == FR_OK) {
1a00295c:	4605      	mov	r5, r0
1a00295e:	b948      	cbnz	r0, 1a002974 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002960:	7823      	ldrb	r3, [r4, #0]
1a002962:	2b03      	cmp	r3, #3
1a002964:	d008      	beq.n	1a002978 <sync_fs+0x24>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a002966:	2200      	movs	r2, #0
1a002968:	4611      	mov	r1, r2
1a00296a:	7860      	ldrb	r0, [r4, #1]
1a00296c:	f002 fe74 	bl	1a005658 <disk_ioctl>
1a002970:	b100      	cbz	r0, 1a002974 <sync_fs+0x20>
1a002972:	2501      	movs	r5, #1
}
1a002974:	4628      	mov	r0, r5
1a002976:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
1a002978:	7923      	ldrb	r3, [r4, #4]
1a00297a:	2b01      	cmp	r3, #1
1a00297c:	d1f3      	bne.n	1a002966 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
1a00297e:	f104 0638 	add.w	r6, r4, #56	; 0x38
1a002982:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002986:	2100      	movs	r1, #0
1a002988:	4630      	mov	r0, r6
1a00298a:	f7fe f901 	bl	1a000b90 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a00298e:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a002992:	f204 2036 	addw	r0, r4, #566	; 0x236
1a002996:	f7fe f8d1 	bl	1a000b3c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a00299a:	490f      	ldr	r1, [pc, #60]	; (1a0029d8 <sync_fs+0x84>)
1a00299c:	4630      	mov	r0, r6
1a00299e:	f7fe f8d1 	bl	1a000b44 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a0029a2:	490e      	ldr	r1, [pc, #56]	; (1a0029dc <sync_fs+0x88>)
1a0029a4:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0029a8:	f7fe f8cc 	bl	1a000b44 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a0029ac:	69a1      	ldr	r1, [r4, #24]
1a0029ae:	f504 7008 	add.w	r0, r4, #544	; 0x220
1a0029b2:	f7fe f8c7 	bl	1a000b44 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a0029b6:	6961      	ldr	r1, [r4, #20]
1a0029b8:	f504 7009 	add.w	r0, r4, #548	; 0x224
1a0029bc:	f7fe f8c2 	bl	1a000b44 <st_dword>
			fs->winsect = fs->volbase + 1;
1a0029c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
1a0029c2:	3201      	adds	r2, #1
1a0029c4:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
1a0029c6:	2301      	movs	r3, #1
1a0029c8:	4631      	mov	r1, r6
1a0029ca:	7860      	ldrb	r0, [r4, #1]
1a0029cc:	f002 fe34 	bl	1a005638 <disk_write>
			fs->fsi_flag = 0;
1a0029d0:	2300      	movs	r3, #0
1a0029d2:	7123      	strb	r3, [r4, #4]
1a0029d4:	e7c7      	b.n	1a002966 <sync_fs+0x12>
1a0029d6:	bf00      	nop
1a0029d8:	41615252 	.word	0x41615252
1a0029dc:	61417272 	.word	0x61417272

1a0029e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a0029e0:	b510      	push	{r4, lr}
1a0029e2:	b084      	sub	sp, #16
1a0029e4:	9001      	str	r0, [sp, #4]
1a0029e6:	9100      	str	r1, [sp, #0]
1a0029e8:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a0029ea:	a804      	add	r0, sp, #16
1a0029ec:	f840 1d04 	str.w	r1, [r0, #-4]!


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
1a0029f0:	f7fe fa94 	bl	1a000f1c <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0029f4:	2800      	cmp	r0, #0
1a0029f6:	db17      	blt.n	1a002a28 <f_mount+0x48>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a0029f8:	4b0c      	ldr	r3, [pc, #48]	; (1a002a2c <f_mount+0x4c>)
1a0029fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a0029fe:	b10b      	cbz	r3, 1a002a04 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a002a00:	2200      	movs	r2, #0
1a002a02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a002a04:	9b01      	ldr	r3, [sp, #4]
1a002a06:	b10b      	cbz	r3, 1a002a0c <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a002a08:	2200      	movs	r2, #0
1a002a0a:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a002a0c:	4b07      	ldr	r3, [pc, #28]	; (1a002a2c <f_mount+0x4c>)
1a002a0e:	9a01      	ldr	r2, [sp, #4]
1a002a10:	f843 2020 	str.w	r2, [r3, r0, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
1a002a14:	b914      	cbnz	r4, 1a002a1c <f_mount+0x3c>
1a002a16:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a002a18:	b004      	add	sp, #16
1a002a1a:	bd10      	pop	{r4, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a002a1c:	2200      	movs	r2, #0
1a002a1e:	a901      	add	r1, sp, #4
1a002a20:	4668      	mov	r0, sp
1a002a22:	f7fe fb7b 	bl	1a00111c <find_volume>
	LEAVE_FF(fs, res);
1a002a26:	e7f7      	b.n	1a002a18 <f_mount+0x38>
	if (vol < 0) return FR_INVALID_DRIVE;
1a002a28:	200b      	movs	r0, #11
1a002a2a:	e7f5      	b.n	1a002a18 <f_mount+0x38>
1a002a2c:	100007f8 	.word	0x100007f8

1a002a30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a002a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a34:	b099      	sub	sp, #100	; 0x64
1a002a36:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a002a38:	2800      	cmp	r0, #0
1a002a3a:	f000 8153 	beq.w	1a002ce4 <f_open+0x2b4>
1a002a3e:	4604      	mov	r4, r0
1a002a40:	4616      	mov	r6, r2

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
1a002a42:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a002a46:	463a      	mov	r2, r7
1a002a48:	a903      	add	r1, sp, #12
1a002a4a:	a801      	add	r0, sp, #4
1a002a4c:	f7fe fb66 	bl	1a00111c <find_volume>
	if (res == FR_OK) {
1a002a50:	4605      	mov	r5, r0
1a002a52:	b130      	cbz	r0, 1a002a62 <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a002a54:	b10d      	cbz	r5, 1a002a5a <f_open+0x2a>
1a002a56:	2300      	movs	r3, #0
1a002a58:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
1a002a5a:	4628      	mov	r0, r5
1a002a5c:	b019      	add	sp, #100	; 0x64
1a002a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dj.obj.fs = fs;
1a002a62:	9b03      	ldr	r3, [sp, #12]
1a002a64:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
1a002a66:	9901      	ldr	r1, [sp, #4]
1a002a68:	a804      	add	r0, sp, #16
1a002a6a:	f7ff fe15 	bl	1a002698 <follow_path>
		if (res == FR_OK) {
1a002a6e:	4605      	mov	r5, r0
1a002a70:	b918      	cbnz	r0, 1a002a7a <f_open+0x4a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a002a72:	f99d 305b 	ldrsb.w	r3, [sp, #91]	; 0x5b
1a002a76:	2b00      	cmp	r3, #0
1a002a78:	db47      	blt.n	1a002b0a <f_open+0xda>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a002a7a:	f016 0f1c 	tst.w	r6, #28
1a002a7e:	f000 808a 	beq.w	1a002b96 <f_open+0x166>
			if (res != FR_OK) {					/* No file, create new */
1a002a82:	2d00      	cmp	r5, #0
1a002a84:	d048      	beq.n	1a002b18 <f_open+0xe8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
1a002a86:	2d04      	cmp	r5, #4
1a002a88:	d041      	beq.n	1a002b0e <f_open+0xde>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a002a8a:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
1a002a8e:	2d00      	cmp	r5, #0
1a002a90:	f040 8090 	bne.w	1a002bb4 <f_open+0x184>
1a002a94:	f017 0f08 	tst.w	r7, #8
1a002a98:	f000 808c 	beq.w	1a002bb4 <f_open+0x184>
				if (fs->fs_type == FS_EXFAT) {
1a002a9c:	9803      	ldr	r0, [sp, #12]
1a002a9e:	7803      	ldrb	r3, [r0, #0]
1a002aa0:	2b04      	cmp	r3, #4
1a002aa2:	d043      	beq.n	1a002b2c <f_open+0xfc>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
1a002aa4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002aa6:	4631      	mov	r1, r6
1a002aa8:	f7fe f8fc 	bl	1a000ca4 <ld_clust>
1a002aac:	4680      	mov	r8, r0
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
1a002aae:	f002 fd83 	bl	1a0055b8 <get_fattime>
1a002ab2:	4601      	mov	r1, r0
1a002ab4:	f106 000e 	add.w	r0, r6, #14
1a002ab8:	f7fe f844 	bl	1a000b44 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a002abc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002abe:	2220      	movs	r2, #32
1a002ac0:	72da      	strb	r2, [r3, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a002ac2:	2200      	movs	r2, #0
1a002ac4:	9913      	ldr	r1, [sp, #76]	; 0x4c
1a002ac6:	9803      	ldr	r0, [sp, #12]
1a002ac8:	f7fe f8ff 	bl	1a000cca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a002acc:	2100      	movs	r1, #0
1a002ace:	9813      	ldr	r0, [sp, #76]	; 0x4c
1a002ad0:	301c      	adds	r0, #28
1a002ad2:	f7fe f837 	bl	1a000b44 <st_dword>
					fs->wflag = 1;
1a002ad6:	9b03      	ldr	r3, [sp, #12]
1a002ad8:	2201      	movs	r2, #1
1a002ada:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
1a002adc:	f1b8 0f00 	cmp.w	r8, #0
1a002ae0:	d068      	beq.n	1a002bb4 <f_open+0x184>
						dw = fs->winsect;
1a002ae2:	9b03      	ldr	r3, [sp, #12]
1a002ae4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
1a002ae6:	2200      	movs	r2, #0
1a002ae8:	4641      	mov	r1, r8
1a002aea:	a804      	add	r0, sp, #16
1a002aec:	f7ff f8a8 	bl	1a001c40 <remove_chain>
						if (res == FR_OK) {
1a002af0:	4605      	mov	r5, r0
1a002af2:	2800      	cmp	r0, #0
1a002af4:	d15e      	bne.n	1a002bb4 <f_open+0x184>
							res = move_window(fs, dw);
1a002af6:	4631      	mov	r1, r6
1a002af8:	9803      	ldr	r0, [sp, #12]
1a002afa:	f7fe fab3 	bl	1a001064 <move_window>
1a002afe:	4605      	mov	r5, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a002b00:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a002b04:	9a03      	ldr	r2, [sp, #12]
1a002b06:	6153      	str	r3, [r2, #20]
1a002b08:	e054      	b.n	1a002bb4 <f_open+0x184>
				res = FR_INVALID_NAME;
1a002b0a:	2506      	movs	r5, #6
1a002b0c:	e7b5      	b.n	1a002a7a <f_open+0x4a>
					res = dir_register(&dj);
1a002b0e:	a804      	add	r0, sp, #16
1a002b10:	f7ff fe1c 	bl	1a00274c <dir_register>
1a002b14:	4605      	mov	r5, r0
1a002b16:	e7b8      	b.n	1a002a8a <f_open+0x5a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a002b18:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002b1c:	f013 0f11 	tst.w	r3, #17
1a002b20:	d147      	bne.n	1a002bb2 <f_open+0x182>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a002b22:	f016 0f04 	tst.w	r6, #4
1a002b26:	d0b2      	beq.n	1a002a8e <f_open+0x5e>
1a002b28:	2508      	movs	r5, #8
1a002b2a:	e043      	b.n	1a002bb4 <f_open+0x184>
					fp->obj.fs = fs;
1a002b2c:	6020      	str	r0, [r4, #0]
					init_alloc_info(fs, &fp->obj);
1a002b2e:	4621      	mov	r1, r4
1a002b30:	9803      	ldr	r0, [sp, #12]
1a002b32:	f7fe f9db 	bl	1a000eec <init_alloc_info>
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
1a002b36:	9b03      	ldr	r3, [sp, #12]
1a002b38:	6918      	ldr	r0, [r3, #16]
1a002b3a:	221e      	movs	r2, #30
1a002b3c:	2100      	movs	r1, #0
1a002b3e:	3002      	adds	r0, #2
1a002b40:	f7fe f826 	bl	1a000b90 <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
1a002b44:	9b03      	ldr	r3, [sp, #12]
1a002b46:	6918      	ldr	r0, [r3, #16]
1a002b48:	221a      	movs	r2, #26
1a002b4a:	2100      	movs	r1, #0
1a002b4c:	3026      	adds	r0, #38	; 0x26
1a002b4e:	f7fe f81f 	bl	1a000b90 <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
1a002b52:	9b03      	ldr	r3, [sp, #12]
1a002b54:	691a      	ldr	r2, [r3, #16]
1a002b56:	2120      	movs	r1, #32
1a002b58:	7111      	strb	r1, [r2, #4]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
1a002b5a:	691d      	ldr	r5, [r3, #16]
1a002b5c:	f002 fd2c 	bl	1a0055b8 <get_fattime>
1a002b60:	4601      	mov	r1, r0
1a002b62:	f105 0008 	add.w	r0, r5, #8
1a002b66:	f7fd ffed 	bl	1a000b44 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
1a002b6a:	9b03      	ldr	r3, [sp, #12]
1a002b6c:	691b      	ldr	r3, [r3, #16]
1a002b6e:	2201      	movs	r2, #1
1a002b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
					res = store_xdir(&dj);
1a002b74:	a804      	add	r0, sp, #16
1a002b76:	f7ff fae1 	bl	1a00213c <store_xdir>
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
1a002b7a:	4605      	mov	r5, r0
1a002b7c:	b9d0      	cbnz	r0, 1a002bb4 <f_open+0x184>
1a002b7e:	68a1      	ldr	r1, [r4, #8]
1a002b80:	b1c1      	cbz	r1, 1a002bb4 <f_open+0x184>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
1a002b82:	2200      	movs	r2, #0
1a002b84:	4620      	mov	r0, r4
1a002b86:	f7ff f85b 	bl	1a001c40 <remove_chain>
1a002b8a:	4605      	mov	r5, r0
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
1a002b8c:	68a3      	ldr	r3, [r4, #8]
1a002b8e:	3b01      	subs	r3, #1
1a002b90:	9a03      	ldr	r2, [sp, #12]
1a002b92:	6153      	str	r3, [r2, #20]
1a002b94:	e00e      	b.n	1a002bb4 <f_open+0x184>
			if (res == FR_OK) {					/* Is the object exsiting? */
1a002b96:	b96d      	cbnz	r5, 1a002bb4 <f_open+0x184>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
1a002b98:	f89d 3016 	ldrb.w	r3, [sp, #22]
1a002b9c:	f013 0f10 	tst.w	r3, #16
1a002ba0:	d14e      	bne.n	1a002c40 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
1a002ba2:	f016 0f02 	tst.w	r6, #2
1a002ba6:	d005      	beq.n	1a002bb4 <f_open+0x184>
1a002ba8:	f013 0f01 	tst.w	r3, #1
1a002bac:	d002      	beq.n	1a002bb4 <f_open+0x184>
						res = FR_DENIED;
1a002bae:	2507      	movs	r5, #7
1a002bb0:	e00b      	b.n	1a002bca <f_open+0x19a>
					res = FR_DENIED;
1a002bb2:	2507      	movs	r5, #7
		if (res == FR_OK) {
1a002bb4:	b94d      	cbnz	r5, 1a002bca <f_open+0x19a>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
1a002bb6:	f017 0f08 	tst.w	r7, #8
1a002bba:	d001      	beq.n	1a002bc0 <f_open+0x190>
1a002bbc:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a002bc0:	9b03      	ldr	r3, [sp, #12]
1a002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
1a002bc4:	64a3      	str	r3, [r4, #72]	; 0x48
			fp->dir_ptr = dj.dir;
1a002bc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
1a002bc8:	64e3      	str	r3, [r4, #76]	; 0x4c
		if (res == FR_OK) {
1a002bca:	2d00      	cmp	r5, #0
1a002bcc:	f47f af42 	bne.w	1a002a54 <f_open+0x24>
			if (fs->fs_type == FS_EXFAT) {
1a002bd0:	9803      	ldr	r0, [sp, #12]
1a002bd2:	7803      	ldrb	r3, [r0, #0]
1a002bd4:	2b04      	cmp	r3, #4
1a002bd6:	d035      	beq.n	1a002c44 <f_open+0x214>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
1a002bd8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
1a002bda:	4631      	mov	r1, r6
1a002bdc:	f7fe f862 	bl	1a000ca4 <ld_clust>
1a002be0:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a002be2:	f106 001c 	add.w	r0, r6, #28
1a002be6:	f7fd ff4a 	bl	1a000a7e <ld_dword>
1a002bea:	6120      	str	r0, [r4, #16]
1a002bec:	2300      	movs	r3, #0
1a002bee:	6163      	str	r3, [r4, #20]
			fp->obj.fs = fs;	 	/* Validate the file object */
1a002bf0:	9b03      	ldr	r3, [sp, #12]
1a002bf2:	6023      	str	r3, [r4, #0]
			fp->obj.id = fs->id;
1a002bf4:	88db      	ldrh	r3, [r3, #6]
1a002bf6:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
1a002bf8:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
1a002bfc:	2100      	movs	r1, #0
1a002bfe:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
1a002c02:	6461      	str	r1, [r4, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
1a002c04:	2200      	movs	r2, #0
1a002c06:	2300      	movs	r3, #0
1a002c08:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
1a002c0c:	f104 0a50 	add.w	sl, r4, #80	; 0x50
1a002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002c14:	4650      	mov	r0, sl
1a002c16:	f7fd ffbb 	bl	1a000b90 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a002c1a:	f017 0f20 	tst.w	r7, #32
1a002c1e:	f43f af19 	beq.w	1a002a54 <f_open+0x24>
1a002c22:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
1a002c26:	ea56 0307 	orrs.w	r3, r6, r7
1a002c2a:	f43f af13 	beq.w	1a002a54 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a002c2e:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a002c32:	9b03      	ldr	r3, [sp, #12]
1a002c34:	f8b3 b00a 	ldrh.w	fp, [r3, #10]
1a002c38:	ea4f 2b4b 	mov.w	fp, fp, lsl #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a002c3c:	68a1      	ldr	r1, [r4, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002c3e:	e017      	b.n	1a002c70 <f_open+0x240>
					res = FR_NO_FILE;
1a002c40:	2504      	movs	r5, #4
1a002c42:	e7c2      	b.n	1a002bca <f_open+0x19a>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
1a002c44:	9b06      	ldr	r3, [sp, #24]
1a002c46:	6223      	str	r3, [r4, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
1a002c48:	9b08      	ldr	r3, [sp, #32]
1a002c4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002c4e:	f89d 2017 	ldrb.w	r2, [sp, #23]
1a002c52:	4313      	orrs	r3, r2
1a002c54:	6263      	str	r3, [r4, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
1a002c56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a002c58:	62a3      	str	r3, [r4, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
1a002c5a:	4621      	mov	r1, r4
1a002c5c:	f7fe f946 	bl	1a000eec <init_alloc_info>
1a002c60:	e7c6      	b.n	1a002bf0 <f_open+0x1c0>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002c62:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
1a002c66:	d013      	beq.n	1a002c90 <f_open+0x260>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a002c68:	ebb6 0608 	subs.w	r6, r6, r8
1a002c6c:	eb67 0709 	sbc.w	r7, r7, r9
1a002c70:	b985      	cbnz	r5, 1a002c94 <f_open+0x264>
1a002c72:	46d8      	mov	r8, fp
1a002c74:	f04f 0900 	mov.w	r9, #0
1a002c78:	45b9      	cmp	r9, r7
1a002c7a:	bf08      	it	eq
1a002c7c:	45b3      	cmpeq	fp, r6
1a002c7e:	d209      	bcs.n	1a002c94 <f_open+0x264>
					clst = get_fat(&fp->obj, clst);
1a002c80:	4620      	mov	r0, r4
1a002c82:	f7fe fde4 	bl	1a00184e <get_fat>
1a002c86:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a002c88:	2801      	cmp	r0, #1
1a002c8a:	d8ea      	bhi.n	1a002c62 <f_open+0x232>
1a002c8c:	2502      	movs	r5, #2
1a002c8e:	e7e8      	b.n	1a002c62 <f_open+0x232>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a002c90:	2501      	movs	r5, #1
1a002c92:	e7e9      	b.n	1a002c68 <f_open+0x238>
				fp->clust = clst;
1a002c94:	6421      	str	r1, [r4, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a002c96:	2d00      	cmp	r5, #0
1a002c98:	f47f aedc 	bne.w	1a002a54 <f_open+0x24>
1a002c9c:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002ca0:	2300      	movs	r3, #0
1a002ca2:	ea02 0806 	and.w	r8, r2, r6
1a002ca6:	ea03 0907 	and.w	r9, r3, r7
1a002caa:	ea58 0309 	orrs.w	r3, r8, r9
1a002cae:	f43f aed1 	beq.w	1a002a54 <f_open+0x24>
					if ((sc = clst2sect(fs, clst)) == 0) {
1a002cb2:	f8dd 800c 	ldr.w	r8, [sp, #12]
1a002cb6:	4640      	mov	r0, r8
1a002cb8:	f7fd ffe8 	bl	1a000c8c <clst2sect>
1a002cbc:	4602      	mov	r2, r0
1a002cbe:	b908      	cbnz	r0, 1a002cc4 <f_open+0x294>
						res = FR_INT_ERR;
1a002cc0:	2502      	movs	r5, #2
1a002cc2:	e6c8      	b.n	1a002a56 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a002cc4:	0a73      	lsrs	r3, r6, #9
1a002cc6:	ea43 53c7 	orr.w	r3, r3, r7, lsl #23
1a002cca:	441a      	add	r2, r3
1a002ccc:	6462      	str	r2, [r4, #68]	; 0x44
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a002cce:	2301      	movs	r3, #1
1a002cd0:	4651      	mov	r1, sl
1a002cd2:	f898 0001 	ldrb.w	r0, [r8, #1]
1a002cd6:	f002 fc9f 	bl	1a005618 <disk_read>
1a002cda:	2800      	cmp	r0, #0
1a002cdc:	f43f aeba 	beq.w	1a002a54 <f_open+0x24>
1a002ce0:	2501      	movs	r5, #1
1a002ce2:	e6b8      	b.n	1a002a56 <f_open+0x26>
	if (!fp) return FR_INVALID_OBJECT;
1a002ce4:	2509      	movs	r5, #9
1a002ce6:	e6b8      	b.n	1a002a5a <f_open+0x2a>

1a002ce8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a002ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002cec:	b085      	sub	sp, #20
1a002cee:	4604      	mov	r4, r0
1a002cf0:	460e      	mov	r6, r1
1a002cf2:	4615      	mov	r5, r2
1a002cf4:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a002cf6:	2300      	movs	r3, #0
1a002cf8:	603b      	str	r3, [r7, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
1a002cfa:	9000      	str	r0, [sp, #0]
1a002cfc:	a903      	add	r1, sp, #12
1a002cfe:	f7fe f965 	bl	1a000fcc <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a002d02:	4680      	mov	r8, r0
1a002d04:	2800      	cmp	r0, #0
1a002d06:	f040 80f1 	bne.w	1a002eec <f_write+0x204>
1a002d0a:	f894 8031 	ldrb.w	r8, [r4, #49]	; 0x31
1a002d0e:	f1b8 0f00 	cmp.w	r8, #0
1a002d12:	f040 80eb 	bne.w	1a002eec <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002d16:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002d1a:	f013 0f02 	tst.w	r3, #2
1a002d1e:	f000 8100 	beq.w	1a002f22 <f_write+0x23a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
1a002d22:	9b03      	ldr	r3, [sp, #12]
1a002d24:	781b      	ldrb	r3, [r3, #0]
1a002d26:	2b04      	cmp	r3, #4
1a002d28:	f000 808a 	beq.w	1a002e40 <f_write+0x158>
1a002d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002d2e:	42eb      	cmn	r3, r5
1a002d30:	f0c0 8086 	bcc.w	1a002e40 <f_write+0x158>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a002d34:	43dd      	mvns	r5, r3
1a002d36:	e083      	b.n	1a002e40 <f_write+0x158>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a002d38:	2100      	movs	r1, #0
1a002d3a:	9800      	ldr	r0, [sp, #0]
1a002d3c:	f7fe fe9a 	bl	1a001a74 <create_chain>
1a002d40:	e09e      	b.n	1a002e80 <f_write+0x198>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a002d42:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002d44:	9800      	ldr	r0, [sp, #0]
1a002d46:	f7fe fe95 	bl	1a001a74 <create_chain>
1a002d4a:	e099      	b.n	1a002e80 <f_write+0x198>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002d4c:	f04f 0802 	mov.w	r8, #2
1a002d50:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d54:	e0ca      	b.n	1a002eec <f_write+0x204>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002d56:	f04f 0801 	mov.w	r8, #1
1a002d5a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d5e:	e0c5      	b.n	1a002eec <f_write+0x204>
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002d60:	2301      	movs	r3, #1
1a002d62:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002d64:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002d68:	9803      	ldr	r0, [sp, #12]
1a002d6a:	7840      	ldrb	r0, [r0, #1]
1a002d6c:	f002 fc64 	bl	1a005638 <disk_write>
1a002d70:	b930      	cbnz	r0, 1a002d80 <f_write+0x98>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002d72:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002d7a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002d7e:	e091      	b.n	1a002ea4 <f_write+0x1bc>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002d80:	f04f 0801 	mov.w	r8, #1
1a002d84:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d88:	e0b0      	b.n	1a002eec <f_write+0x204>
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002d8a:	f04f 0802 	mov.w	r8, #2
1a002d8e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002d92:	e0ab      	b.n	1a002eec <f_write+0x204>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a002d94:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a002d96:	eba1 0109 	sub.w	r1, r1, r9
1a002d9a:	4551      	cmp	r1, sl
1a002d9c:	d302      	bcc.n	1a002da4 <f_write+0xbc>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a002d9e:	ea4f 294a 	mov.w	r9, sl, lsl #9
				continue;
1a002da2:	e031      	b.n	1a002e08 <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a002da4:	f44f 7200 	mov.w	r2, #512	; 0x200
1a002da8:	eb06 2141 	add.w	r1, r6, r1, lsl #9
1a002dac:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002db0:	f7fd fee5 	bl	1a000b7e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
1a002db4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002dbc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002dc0:	e7ed      	b.n	1a002d9e <f_write+0xb6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002dc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
1a002dc4:	454b      	cmp	r3, r9
1a002dc6:	d008      	beq.n	1a002dda <f_write+0xf2>
				fp->fptr < fp->obj.objsize &&
1a002dc8:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002dcc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
1a002dd0:	4299      	cmp	r1, r3
1a002dd2:	bf08      	it	eq
1a002dd4:	4290      	cmpeq	r0, r2
1a002dd6:	f0c0 808d 	bcc.w	1a002ef4 <f_write+0x20c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
1a002dda:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a002dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a002de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
1a002de4:	f5c3 7900 	rsb	r9, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a002de8:	454d      	cmp	r5, r9
1a002dea:	d200      	bcs.n	1a002dee <f_write+0x106>
1a002dec:	46a9      	mov	r9, r5
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a002dee:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a002df2:	464a      	mov	r2, r9
1a002df4:	4631      	mov	r1, r6
1a002df6:	4418      	add	r0, r3
1a002df8:	f7fd fec1 	bl	1a000b7e <mem_cpy>
		fp->flag |= FA_DIRTY;
1a002dfc:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002e00:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a002e04:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
1a002e08:	eba5 0509 	sub.w	r5, r5, r9
1a002e0c:	683b      	ldr	r3, [r7, #0]
1a002e0e:	444b      	add	r3, r9
1a002e10:	603b      	str	r3, [r7, #0]
1a002e12:	444e      	add	r6, r9
1a002e14:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
1a002e18:	eb12 0a09 	adds.w	sl, r2, r9
1a002e1c:	f143 0b00 	adc.w	fp, r3, #0
1a002e20:	e9c4 ab0e 	strd	sl, fp, [r4, #56]	; 0x38
1a002e24:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a002e28:	46d6      	mov	lr, sl
1a002e2a:	46dc      	mov	ip, fp
1a002e2c:	458b      	cmp	fp, r1
1a002e2e:	bf08      	it	eq
1a002e30:	4582      	cmpeq	sl, r0
1a002e32:	d201      	bcs.n	1a002e38 <f_write+0x150>
1a002e34:	4686      	mov	lr, r0
1a002e36:	468c      	mov	ip, r1
1a002e38:	f8c4 e010 	str.w	lr, [r4, #16]
1a002e3c:	f8c4 c014 	str.w	ip, [r4, #20]
	for ( ;  btw;							/* Repeat until all data written */
1a002e40:	2d00      	cmp	r5, #0
1a002e42:	d067      	beq.n	1a002f14 <f_write+0x22c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a002e44:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
1a002e48:	f240 12ff 	movw	r2, #511	; 0x1ff
1a002e4c:	2300      	movs	r3, #0
1a002e4e:	ea02 0900 	and.w	r9, r2, r0
1a002e52:	ea03 0a01 	and.w	sl, r3, r1
1a002e56:	ea59 030a 	orrs.w	r3, r9, sl
1a002e5a:	d1c0      	bne.n	1a002dde <f_write+0xf6>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a002e5c:	ea4f 2b50 	mov.w	fp, r0, lsr #9
1a002e60:	ea4b 5bc1 	orr.w	fp, fp, r1, lsl #23
1a002e64:	9b03      	ldr	r3, [sp, #12]
1a002e66:	895b      	ldrh	r3, [r3, #10]
1a002e68:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a002e6a:	ea1b 0b03 	ands.w	fp, fp, r3
1a002e6e:	d114      	bne.n	1a002e9a <f_write+0x1b2>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a002e70:	ea50 0301 	orrs.w	r3, r0, r1
1a002e74:	f47f af65 	bne.w	1a002d42 <f_write+0x5a>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a002e78:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a002e7a:	2800      	cmp	r0, #0
1a002e7c:	f43f af5c 	beq.w	1a002d38 <f_write+0x50>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a002e80:	2800      	cmp	r0, #0
1a002e82:	d047      	beq.n	1a002f14 <f_write+0x22c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a002e84:	2801      	cmp	r0, #1
1a002e86:	f43f af61 	beq.w	1a002d4c <f_write+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a002e8a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a002e8e:	f43f af62 	beq.w	1a002d56 <f_write+0x6e>
				fp->clust = clst;			/* Update current cluster */
1a002e92:	6420      	str	r0, [r4, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a002e94:	68a3      	ldr	r3, [r4, #8]
1a002e96:	b903      	cbnz	r3, 1a002e9a <f_write+0x1b2>
1a002e98:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a002e9a:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
1a002e9e:	2b00      	cmp	r3, #0
1a002ea0:	f6ff af5e 	blt.w	1a002d60 <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
1a002ea4:	9b03      	ldr	r3, [sp, #12]
1a002ea6:	9301      	str	r3, [sp, #4]
1a002ea8:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a002eaa:	4618      	mov	r0, r3
1a002eac:	f7fd feee 	bl	1a000c8c <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
1a002eb0:	4681      	mov	r9, r0
1a002eb2:	2800      	cmp	r0, #0
1a002eb4:	f43f af69 	beq.w	1a002d8a <f_write+0xa2>
			sect += csect;
1a002eb8:	44d9      	add	r9, fp
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
1a002eba:	ea5f 2a55 	movs.w	sl, r5, lsr #9
1a002ebe:	d080      	beq.n	1a002dc2 <f_write+0xda>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a002ec0:	eb0b 030a 	add.w	r3, fp, sl
1a002ec4:	9a01      	ldr	r2, [sp, #4]
1a002ec6:	8952      	ldrh	r2, [r2, #10]
1a002ec8:	4293      	cmp	r3, r2
1a002eca:	d901      	bls.n	1a002ed0 <f_write+0x1e8>
					cc = fs->csize - csect;
1a002ecc:	eba2 0a0b 	sub.w	sl, r2, fp
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a002ed0:	4653      	mov	r3, sl
1a002ed2:	464a      	mov	r2, r9
1a002ed4:	4631      	mov	r1, r6
1a002ed6:	9801      	ldr	r0, [sp, #4]
1a002ed8:	7840      	ldrb	r0, [r0, #1]
1a002eda:	f002 fbad 	bl	1a005638 <disk_write>
1a002ede:	2800      	cmp	r0, #0
1a002ee0:	f43f af58 	beq.w	1a002d94 <f_write+0xac>
1a002ee4:	f04f 0801 	mov.w	r8, #1
1a002ee8:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a002eec:	4640      	mov	r0, r8
1a002eee:	b005      	add	sp, #20
1a002ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
1a002ef4:	2301      	movs	r3, #1
1a002ef6:	464a      	mov	r2, r9
1a002ef8:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002efc:	9801      	ldr	r0, [sp, #4]
1a002efe:	7840      	ldrb	r0, [r0, #1]
1a002f00:	f002 fb8a 	bl	1a005618 <disk_read>
				fp->fptr < fp->obj.objsize &&
1a002f04:	2800      	cmp	r0, #0
1a002f06:	f43f af68 	beq.w	1a002dda <f_write+0xf2>
					ABORT(fs, FR_DISK_ERR);
1a002f0a:	f04f 0801 	mov.w	r8, #1
1a002f0e:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
1a002f12:	e7eb      	b.n	1a002eec <f_write+0x204>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
1a002f14:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002f1c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	LEAVE_FF(fs, FR_OK);
1a002f20:	e7e4      	b.n	1a002eec <f_write+0x204>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a002f22:	f04f 0807 	mov.w	r8, #7
1a002f26:	e7e1      	b.n	1a002eec <f_write+0x204>

1a002f28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a002f28:	b570      	push	{r4, r5, r6, lr}
1a002f2a:	b096      	sub	sp, #88	; 0x58
1a002f2c:	4604      	mov	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
1a002f2e:	a915      	add	r1, sp, #84	; 0x54
1a002f30:	f7fe f84c 	bl	1a000fcc <validate>
	if (res == FR_OK) {
1a002f34:	4603      	mov	r3, r0
1a002f36:	b9a0      	cbnz	r0, 1a002f62 <f_sync+0x3a>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a002f38:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a002f3c:	f012 0f40 	tst.w	r2, #64	; 0x40
1a002f40:	d00f      	beq.n	1a002f62 <f_sync+0x3a>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a002f42:	f012 0f80 	tst.w	r2, #128	; 0x80
1a002f46:	d10f      	bne.n	1a002f68 <f_sync+0x40>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
1a002f48:	f002 fb36 	bl	1a0055b8 <get_fattime>
1a002f4c:	4606      	mov	r6, r0
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
1a002f4e:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002f50:	7803      	ldrb	r3, [r0, #0]
1a002f52:	2b04      	cmp	r3, #4
1a002f54:	d01a      	beq.n	1a002f8c <f_sync+0x64>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a002f56:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a002f58:	f7fe f884 	bl	1a001064 <move_window>
				if (res == FR_OK) {
1a002f5c:	4603      	mov	r3, r0
1a002f5e:	2800      	cmp	r0, #0
1a002f60:	d069      	beq.n	1a003036 <f_sync+0x10e>
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a002f62:	4618      	mov	r0, r3
1a002f64:	b016      	add	sp, #88	; 0x58
1a002f66:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a002f68:	2301      	movs	r3, #1
1a002f6a:	6c62      	ldr	r2, [r4, #68]	; 0x44
1a002f6c:	f104 0150 	add.w	r1, r4, #80	; 0x50
1a002f70:	9815      	ldr	r0, [sp, #84]	; 0x54
1a002f72:	7840      	ldrb	r0, [r0, #1]
1a002f74:	f002 fb60 	bl	1a005638 <disk_write>
1a002f78:	2800      	cmp	r0, #0
1a002f7a:	f040 8083 	bne.w	1a003084 <f_sync+0x15c>
				fp->flag &= (BYTE)~FA_DIRTY;
1a002f7e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a002f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a002f86:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
1a002f8a:	e7dd      	b.n	1a002f48 <f_sync+0x20>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
1a002f8c:	4620      	mov	r0, r4
1a002f8e:	f7fe fc45 	bl	1a00181c <fill_first_frag>
				if (res == FR_OK) {
1a002f92:	4603      	mov	r3, r0
1a002f94:	2800      	cmp	r0, #0
1a002f96:	d046      	beq.n	1a003026 <f_sync+0xfe>
				if (res == FR_OK) {
1a002f98:	2b00      	cmp	r3, #0
1a002f9a:	d1e2      	bne.n	1a002f62 <f_sync+0x3a>
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
1a002f9c:	4621      	mov	r1, r4
1a002f9e:	4668      	mov	r0, sp
1a002fa0:	f7ff f804 	bl	1a001fac <load_obj_xdir>
					if (res == FR_OK) {
1a002fa4:	4603      	mov	r3, r0
1a002fa6:	2800      	cmp	r0, #0
1a002fa8:	d1db      	bne.n	1a002f62 <f_sync+0x3a>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
1a002faa:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002fac:	6919      	ldr	r1, [r3, #16]
1a002fae:	790a      	ldrb	r2, [r1, #4]
1a002fb0:	f042 0220 	orr.w	r2, r2, #32
1a002fb4:	710a      	strb	r2, [r1, #4]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
1a002fb6:	79e2      	ldrb	r2, [r4, #7]
1a002fb8:	6919      	ldr	r1, [r3, #16]
1a002fba:	f042 0201 	orr.w	r2, r2, #1
1a002fbe:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
1a002fc2:	6918      	ldr	r0, [r3, #16]
1a002fc4:	68a1      	ldr	r1, [r4, #8]
1a002fc6:	3034      	adds	r0, #52	; 0x34
1a002fc8:	f7fd fdbc 	bl	1a000b44 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
1a002fcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002fce:	6918      	ldr	r0, [r3, #16]
1a002fd0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002fd4:	3038      	adds	r0, #56	; 0x38
1a002fd6:	f7fd fdbf 	bl	1a000b58 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
1a002fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002fdc:	6918      	ldr	r0, [r3, #16]
1a002fde:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
1a002fe2:	3028      	adds	r0, #40	; 0x28
1a002fe4:	f7fd fdb8 	bl	1a000b58 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
1a002fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002fea:	6918      	ldr	r0, [r3, #16]
1a002fec:	4631      	mov	r1, r6
1a002fee:	300c      	adds	r0, #12
1a002ff0:	f7fd fda8 	bl	1a000b44 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
1a002ff4:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a002ff6:	691a      	ldr	r2, [r3, #16]
1a002ff8:	2100      	movs	r1, #0
1a002ffa:	7551      	strb	r1, [r2, #21]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
1a002ffc:	6918      	ldr	r0, [r3, #16]
1a002ffe:	3010      	adds	r0, #16
1a003000:	f7fd fda0 	bl	1a000b44 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
1a003004:	4668      	mov	r0, sp
1a003006:	f7ff f899 	bl	1a00213c <store_xdir>
						if (res == FR_OK) {
1a00300a:	4603      	mov	r3, r0
1a00300c:	2800      	cmp	r0, #0
1a00300e:	d1a8      	bne.n	1a002f62 <f_sync+0x3a>
							res = sync_fs(fs);
1a003010:	9815      	ldr	r0, [sp, #84]	; 0x54
1a003012:	f7ff fc9f 	bl	1a002954 <sync_fs>
1a003016:	4603      	mov	r3, r0
							fp->flag &= (BYTE)~FA_MODIFIED;
1a003018:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00301c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a003020:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a003024:	e79d      	b.n	1a002f62 <f_sync+0x3a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
1a003026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a00302a:	6c21      	ldr	r1, [r4, #64]	; 0x40
1a00302c:	4620      	mov	r0, r4
1a00302e:	f7fe fbdd 	bl	1a0017ec <fill_last_frag>
1a003032:	4603      	mov	r3, r0
1a003034:	e7b0      	b.n	1a002f98 <f_sync+0x70>
					dir = fp->dir_ptr;
1a003036:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
1a003038:	7aeb      	ldrb	r3, [r5, #11]
1a00303a:	f043 0320 	orr.w	r3, r3, #32
1a00303e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
1a003040:	68a2      	ldr	r2, [r4, #8]
1a003042:	4629      	mov	r1, r5
1a003044:	6820      	ldr	r0, [r4, #0]
1a003046:	f7fd fe40 	bl	1a000cca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a00304a:	6921      	ldr	r1, [r4, #16]
1a00304c:	f105 001c 	add.w	r0, r5, #28
1a003050:	f7fd fd78 	bl	1a000b44 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a003054:	4631      	mov	r1, r6
1a003056:	f105 0016 	add.w	r0, r5, #22
1a00305a:	f7fd fd73 	bl	1a000b44 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a00305e:	2100      	movs	r1, #0
1a003060:	f105 0012 	add.w	r0, r5, #18
1a003064:	f7fd fd6a 	bl	1a000b3c <st_word>
					fs->wflag = 1;
1a003068:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a00306a:	2201      	movs	r2, #1
1a00306c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a00306e:	9815      	ldr	r0, [sp, #84]	; 0x54
1a003070:	f7ff fc70 	bl	1a002954 <sync_fs>
1a003074:	4603      	mov	r3, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
1a003076:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
1a00307a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a00307e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
1a003082:	e76e      	b.n	1a002f62 <f_sync+0x3a>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a003084:	2301      	movs	r3, #1
1a003086:	e76c      	b.n	1a002f62 <f_sync+0x3a>

1a003088 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a003088:	b510      	push	{r4, lr}
1a00308a:	b082      	sub	sp, #8
1a00308c:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a00308e:	f7ff ff4b 	bl	1a002f28 <f_sync>
	if (res == FR_OK)
1a003092:	4603      	mov	r3, r0
1a003094:	b110      	cbz	r0, 1a00309c <f_close+0x14>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a003096:	4618      	mov	r0, r3
1a003098:	b002      	add	sp, #8
1a00309a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
1a00309c:	a901      	add	r1, sp, #4
1a00309e:	4620      	mov	r0, r4
1a0030a0:	f7fd ff94 	bl	1a000fcc <validate>
		if (res == FR_OK) {
1a0030a4:	4603      	mov	r3, r0
1a0030a6:	2800      	cmp	r0, #0
1a0030a8:	d1f5      	bne.n	1a003096 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
1a0030aa:	2200      	movs	r2, #0
1a0030ac:	6022      	str	r2, [r4, #0]
1a0030ae:	e7f2      	b.n	1a003096 <f_close+0xe>

1a0030b0 <ff_uni2oem>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
1a0030b0:	287f      	cmp	r0, #127	; 0x7f
1a0030b2:	d908      	bls.n	1a0030c6 <ff_uni2oem+0x16>
		c = (WCHAR)uni;

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
1a0030b4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0030b8:	d215      	bcs.n	1a0030e6 <ff_uni2oem+0x36>
1a0030ba:	f240 3352 	movw	r3, #850	; 0x352
1a0030be:	4299      	cmp	r1, r3
1a0030c0:	d003      	beq.n	1a0030ca <ff_uni2oem+0x1a>
	WCHAR c = 0;
1a0030c2:	2000      	movs	r0, #0
1a0030c4:	4770      	bx	lr
		c = (WCHAR)uni;
1a0030c6:	b280      	uxth	r0, r0
1a0030c8:	4770      	bx	lr
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1a0030ca:	2300      	movs	r3, #0
1a0030cc:	2b7f      	cmp	r3, #127	; 0x7f
1a0030ce:	d807      	bhi.n	1a0030e0 <ff_uni2oem+0x30>
1a0030d0:	4a06      	ldr	r2, [pc, #24]	; (1a0030ec <ff_uni2oem+0x3c>)
1a0030d2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
1a0030d6:	4282      	cmp	r2, r0
1a0030d8:	d002      	beq.n	1a0030e0 <ff_uni2oem+0x30>
1a0030da:	3301      	adds	r3, #1
1a0030dc:	b29b      	uxth	r3, r3
1a0030de:	e7f5      	b.n	1a0030cc <ff_uni2oem+0x1c>
			c = (c + 0x80) & 0xFF;
1a0030e0:	3380      	adds	r3, #128	; 0x80
1a0030e2:	b2d8      	uxtb	r0, r3
1a0030e4:	4770      	bx	lr
	WCHAR c = 0;
1a0030e6:	2000      	movs	r0, #0
		}
	}

	return c;
}
1a0030e8:	4770      	bx	lr
1a0030ea:	bf00      	nop
1a0030ec:	1a009998 	.word	0x1a009998

1a0030f0 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
1a0030f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
1a0030f4:	d245      	bcs.n	1a003182 <ff_wtoupper+0x92>
{
1a0030f6:	b4f0      	push	{r4, r5, r6, r7}
		uc = (WORD)uni;
1a0030f8:	b287      	uxth	r7, r0
		p = uc < 0x1000 ? cvt1 : cvt2;
1a0030fa:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
1a0030fe:	d201      	bcs.n	1a003104 <ff_wtoupper+0x14>
1a003100:	4b20      	ldr	r3, [pc, #128]	; (1a003184 <ff_wtoupper+0x94>)
1a003102:	e002      	b.n	1a00310a <ff_wtoupper+0x1a>
1a003104:	4b20      	ldr	r3, [pc, #128]	; (1a003188 <ff_wtoupper+0x98>)
1a003106:	e000      	b.n	1a00310a <ff_wtoupper+0x1a>
		for (;;) {
			bc = *p++;								/* Get the block base */
			if (bc == 0 || uc < bc) break;			/* Not matched? */
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a003108:	4633      	mov	r3, r6
			bc = *p++;								/* Get the block base */
1a00310a:	881a      	ldrh	r2, [r3, #0]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
1a00310c:	b1d2      	cbz	r2, 1a003144 <ff_wtoupper+0x54>
1a00310e:	4297      	cmp	r7, r2
1a003110:	d318      	bcc.n	1a003144 <ff_wtoupper+0x54>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
1a003112:	1d1e      	adds	r6, r3, #4
1a003114:	885b      	ldrh	r3, [r3, #2]
1a003116:	0a19      	lsrs	r1, r3, #8
1a003118:	b2db      	uxtb	r3, r3
			if (uc < bc + nc) {	/* In the block? */
1a00311a:	b284      	uxth	r4, r0
1a00311c:	189d      	adds	r5, r3, r2
1a00311e:	42ac      	cmp	r4, r5
1a003120:	db04      	blt.n	1a00312c <ff_wtoupper+0x3c>
				case 7: uc -= 80; break;			/* Shift -80 */
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
1a003122:	2900      	cmp	r1, #0
1a003124:	d1f0      	bne.n	1a003108 <ff_wtoupper+0x18>
1a003126:	eb06 0343 	add.w	r3, r6, r3, lsl #1
1a00312a:	e7ee      	b.n	1a00310a <ff_wtoupper+0x1a>
				switch (cmd) {
1a00312c:	2908      	cmp	r1, #8
1a00312e:	d809      	bhi.n	1a003144 <ff_wtoupper+0x54>
1a003130:	e8df f001 	tbb	[pc, r1]
1a003134:	14110b05 	.word	0x14110b05
1a003138:	201d1a17 	.word	0x201d1a17
1a00313c:	23          	.byte	0x23
1a00313d:	00          	.byte	0x00
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
1a00313e:	1aa4      	subs	r4, r4, r2
1a003140:	f836 7014 	ldrh.w	r7, [r6, r4, lsl #1]
		}
		uni = uc;
1a003144:	4638      	mov	r0, r7
	}

	return uni;
}
1a003146:	bcf0      	pop	{r4, r5, r6, r7}
1a003148:	4770      	bx	lr
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
1a00314a:	1aba      	subs	r2, r7, r2
1a00314c:	f002 0301 	and.w	r3, r2, #1
1a003150:	1aff      	subs	r7, r7, r3
1a003152:	b2bf      	uxth	r7, r7
1a003154:	e7f6      	b.n	1a003144 <ff_wtoupper+0x54>
				case 2: uc -= 16; break;			/* Shift -16 */
1a003156:	3f10      	subs	r7, #16
1a003158:	b2bf      	uxth	r7, r7
1a00315a:	e7f3      	b.n	1a003144 <ff_wtoupper+0x54>
				case 3:	uc -= 32; break;			/* Shift -32 */
1a00315c:	3f20      	subs	r7, #32
1a00315e:	b2bf      	uxth	r7, r7
1a003160:	e7f0      	b.n	1a003144 <ff_wtoupper+0x54>
				case 4:	uc -= 48; break;			/* Shift -48 */
1a003162:	3f30      	subs	r7, #48	; 0x30
1a003164:	b2bf      	uxth	r7, r7
1a003166:	e7ed      	b.n	1a003144 <ff_wtoupper+0x54>
				case 5:	uc -= 26; break;			/* Shift -26 */
1a003168:	3f1a      	subs	r7, #26
1a00316a:	b2bf      	uxth	r7, r7
1a00316c:	e7ea      	b.n	1a003144 <ff_wtoupper+0x54>
				case 6:	uc += 8; break;				/* Shift +8 */
1a00316e:	3708      	adds	r7, #8
1a003170:	b2bf      	uxth	r7, r7
1a003172:	e7e7      	b.n	1a003144 <ff_wtoupper+0x54>
				case 7: uc -= 80; break;			/* Shift -80 */
1a003174:	3f50      	subs	r7, #80	; 0x50
1a003176:	b2bf      	uxth	r7, r7
1a003178:	e7e4      	b.n	1a003144 <ff_wtoupper+0x54>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
1a00317a:	f5a7 57e3 	sub.w	r7, r7, #7264	; 0x1c60
1a00317e:	b2bf      	uxth	r7, r7
1a003180:	e7e0      	b.n	1a003144 <ff_wtoupper+0x54>
}
1a003182:	4770      	bx	lr
1a003184:	1a0096e8 	.word	0x1a0096e8
1a003188:	1a0098dc 	.word	0x1a0098dc

1a00318c <prvHeapInit>:
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
1a00318c:	4b07      	ldr	r3, [pc, #28]	; (1a0031ac <prvHeapInit+0x20>)
1a00318e:	f023 0307 	bic.w	r3, r3, #7

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a003192:	4a07      	ldr	r2, [pc, #28]	; (1a0031b0 <prvHeapInit+0x24>)
1a003194:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a003196:	2000      	movs	r0, #0
1a003198:	6050      	str	r0, [r2, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
1a00319a:	4a06      	ldr	r2, [pc, #24]	; (1a0031b4 <prvHeapInit+0x28>)
1a00319c:	f641 71f8 	movw	r1, #8184	; 0x1ff8
1a0031a0:	6051      	str	r1, [r2, #4]
	xEnd.pxNextFreeBlock = NULL;
1a0031a2:	6010      	str	r0, [r2, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
1a0031a4:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
1a0031a6:	601a      	str	r2, [r3, #0]
}
1a0031a8:	4770      	bx	lr
1a0031aa:	bf00      	nop
1a0031ac:	10000a0c 	.word	0x10000a0c
1a0031b0:	10002a10 	.word	0x10002a10
1a0031b4:	10002a04 	.word	0x10002a04

1a0031b8 <pvPortMalloc>:
{
1a0031b8:	b570      	push	{r4, r5, r6, lr}
1a0031ba:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a0031bc:	f000 fe8c 	bl	1a003ed8 <vTaskSuspendAll>
		if( xHeapHasBeenInitialised == pdFALSE )
1a0031c0:	4b26      	ldr	r3, [pc, #152]	; (1a00325c <pvPortMalloc+0xa4>)
1a0031c2:	681b      	ldr	r3, [r3, #0]
1a0031c4:	b17b      	cbz	r3, 1a0031e6 <pvPortMalloc+0x2e>
		if( xWantedSize > 0 )
1a0031c6:	b134      	cbz	r4, 1a0031d6 <pvPortMalloc+0x1e>
			xWantedSize += heapSTRUCT_SIZE;
1a0031c8:	3408      	adds	r4, #8
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
1a0031ca:	f014 0f07 	tst.w	r4, #7
1a0031ce:	d002      	beq.n	1a0031d6 <pvPortMalloc+0x1e>
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0031d0:	f024 0407 	bic.w	r4, r4, #7
1a0031d4:	3408      	adds	r4, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
1a0031d6:	1e62      	subs	r2, r4, #1
1a0031d8:	f641 73f6 	movw	r3, #8182	; 0x1ff6
1a0031dc:	429a      	cmp	r2, r3
1a0031de:	d808      	bhi.n	1a0031f2 <pvPortMalloc+0x3a>
			pxBlock = xStart.pxNextFreeBlock;
1a0031e0:	491f      	ldr	r1, [pc, #124]	; (1a003260 <pvPortMalloc+0xa8>)
1a0031e2:	680b      	ldr	r3, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0031e4:	e00e      	b.n	1a003204 <pvPortMalloc+0x4c>
			prvHeapInit();
1a0031e6:	f7ff ffd1 	bl	1a00318c <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
1a0031ea:	4b1c      	ldr	r3, [pc, #112]	; (1a00325c <pvPortMalloc+0xa4>)
1a0031ec:	2201      	movs	r2, #1
1a0031ee:	601a      	str	r2, [r3, #0]
1a0031f0:	e7e9      	b.n	1a0031c6 <pvPortMalloc+0xe>
	( void ) xTaskResumeAll();
1a0031f2:	f000 ff0b 	bl	1a00400c <xTaskResumeAll>
void *pvReturn = NULL;
1a0031f6:	2500      	movs	r5, #0
			vApplicationMallocFailedHook();
1a0031f8:	f000 fc2b 	bl	1a003a52 <vApplicationMallocFailedHook>
}
1a0031fc:	4628      	mov	r0, r5
1a0031fe:	bd70      	pop	{r4, r5, r6, pc}
				pxPreviousBlock = pxBlock;
1a003200:	4619      	mov	r1, r3
				pxBlock = pxBlock->pxNextFreeBlock;
1a003202:	4613      	mov	r3, r2
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a003204:	685a      	ldr	r2, [r3, #4]
1a003206:	42a2      	cmp	r2, r4
1a003208:	d202      	bcs.n	1a003210 <pvPortMalloc+0x58>
1a00320a:	681a      	ldr	r2, [r3, #0]
1a00320c:	2a00      	cmp	r2, #0
1a00320e:	d1f7      	bne.n	1a003200 <pvPortMalloc+0x48>
			if( pxBlock != &xEnd )
1a003210:	4a14      	ldr	r2, [pc, #80]	; (1a003264 <pvPortMalloc+0xac>)
1a003212:	4293      	cmp	r3, r2
1a003214:	d00d      	beq.n	1a003232 <pvPortMalloc+0x7a>
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
1a003216:	680d      	ldr	r5, [r1, #0]
1a003218:	3508      	adds	r5, #8
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a00321a:	681a      	ldr	r2, [r3, #0]
1a00321c:	600a      	str	r2, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a00321e:	685a      	ldr	r2, [r3, #4]
1a003220:	1b12      	subs	r2, r2, r4
1a003222:	2a10      	cmp	r2, #16
1a003224:	d910      	bls.n	1a003248 <pvPortMalloc+0x90>
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a003226:	191e      	adds	r6, r3, r4
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a003228:	6072      	str	r2, [r6, #4]
					pxBlock->xBlockSize = xWantedSize;
1a00322a:	605c      	str	r4, [r3, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1a00322c:	6874      	ldr	r4, [r6, #4]
1a00322e:	490c      	ldr	r1, [pc, #48]	; (1a003260 <pvPortMalloc+0xa8>)
1a003230:	e004      	b.n	1a00323c <pvPortMalloc+0x84>
	( void ) xTaskResumeAll();
1a003232:	f000 feeb 	bl	1a00400c <xTaskResumeAll>
void *pvReturn = NULL;
1a003236:	2500      	movs	r5, #0
1a003238:	e7de      	b.n	1a0031f8 <pvPortMalloc+0x40>
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
1a00323a:	4611      	mov	r1, r2
1a00323c:	680a      	ldr	r2, [r1, #0]
1a00323e:	6850      	ldr	r0, [r2, #4]
1a003240:	42a0      	cmp	r0, r4
1a003242:	d3fa      	bcc.n	1a00323a <pvPortMalloc+0x82>
1a003244:	6032      	str	r2, [r6, #0]
1a003246:	600e      	str	r6, [r1, #0]
				xFreeBytesRemaining -= pxBlock->xBlockSize;
1a003248:	6859      	ldr	r1, [r3, #4]
1a00324a:	4a07      	ldr	r2, [pc, #28]	; (1a003268 <pvPortMalloc+0xb0>)
1a00324c:	6813      	ldr	r3, [r2, #0]
1a00324e:	1a5b      	subs	r3, r3, r1
1a003250:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
1a003252:	f000 fedb 	bl	1a00400c <xTaskResumeAll>
		if( pvReturn == NULL )
1a003256:	2d00      	cmp	r5, #0
1a003258:	d1d0      	bne.n	1a0031fc <pvPortMalloc+0x44>
1a00325a:	e7cd      	b.n	1a0031f8 <pvPortMalloc+0x40>
1a00325c:	10002a0c 	.word	0x10002a0c
1a003260:	10002a10 	.word	0x10002a10
1a003264:	10002a04 	.word	0x10002a04
1a003268:	10000004 	.word	0x10000004

1a00326c <vPortFree>:
	if( pv != NULL )
1a00326c:	b1d0      	cbz	r0, 1a0032a4 <vPortFree+0x38>
{
1a00326e:	b538      	push	{r3, r4, r5, lr}
1a003270:	4604      	mov	r4, r0
		puc -= heapSTRUCT_SIZE;
1a003272:	f1a0 0508 	sub.w	r5, r0, #8
		vTaskSuspendAll();
1a003276:	f000 fe2f 	bl	1a003ed8 <vTaskSuspendAll>
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a00327a:	f854 0c04 	ldr.w	r0, [r4, #-4]
1a00327e:	4a0a      	ldr	r2, [pc, #40]	; (1a0032a8 <vPortFree+0x3c>)
1a003280:	e000      	b.n	1a003284 <vPortFree+0x18>
1a003282:	461a      	mov	r2, r3
1a003284:	6813      	ldr	r3, [r2, #0]
1a003286:	6859      	ldr	r1, [r3, #4]
1a003288:	4281      	cmp	r1, r0
1a00328a:	d3fa      	bcc.n	1a003282 <vPortFree+0x16>
1a00328c:	f844 3c08 	str.w	r3, [r4, #-8]
1a003290:	6015      	str	r5, [r2, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
1a003292:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a003296:	4a05      	ldr	r2, [pc, #20]	; (1a0032ac <vPortFree+0x40>)
1a003298:	6813      	ldr	r3, [r2, #0]
1a00329a:	440b      	add	r3, r1
1a00329c:	6013      	str	r3, [r2, #0]
		( void ) xTaskResumeAll();
1a00329e:	f000 feb5 	bl	1a00400c <xTaskResumeAll>
}
1a0032a2:	bd38      	pop	{r3, r4, r5, pc}
1a0032a4:	4770      	bx	lr
1a0032a6:	bf00      	nop
1a0032a8:	10002a10 	.word	0x10002a10
1a0032ac:	10000004 	.word	0x10000004

1a0032b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0032b0:	b510      	push	{r4, lr}
1a0032b2:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0032b4:	f001 fbd6 	bl	1a004a64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0032b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0032ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0032bc:	429a      	cmp	r2, r3
1a0032be:	d004      	beq.n	1a0032ca <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0032c0:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0032c2:	f001 fbf1 	bl	1a004aa8 <vPortExitCritical>

	return xReturn;
}
1a0032c6:	4620      	mov	r0, r4
1a0032c8:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0032ca:	2401      	movs	r4, #1
1a0032cc:	e7f9      	b.n	1a0032c2 <prvIsQueueFull+0x12>

1a0032ce <prvIsQueueEmpty>:
{
1a0032ce:	b510      	push	{r4, lr}
1a0032d0:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a0032d2:	f001 fbc7 	bl	1a004a64 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a0032d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0032d8:	b123      	cbz	r3, 1a0032e4 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a0032da:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0032dc:	f001 fbe4 	bl	1a004aa8 <vPortExitCritical>
}
1a0032e0:	4620      	mov	r0, r4
1a0032e2:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0032e4:	2401      	movs	r4, #1
1a0032e6:	e7f9      	b.n	1a0032dc <prvIsQueueEmpty+0xe>

1a0032e8 <prvCopyDataToQueue>:
{
1a0032e8:	b570      	push	{r4, r5, r6, lr}
1a0032ea:	4604      	mov	r4, r0
1a0032ec:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0032ee:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a0032f0:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0032f2:	b95a      	cbnz	r2, 1a00330c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a0032f4:	6803      	ldr	r3, [r0, #0]
1a0032f6:	b11b      	cbz	r3, 1a003300 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a0032f8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a0032fa:	3501      	adds	r5, #1
1a0032fc:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a0032fe:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a003300:	6840      	ldr	r0, [r0, #4]
1a003302:	f001 f88f 	bl	1a004424 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a003306:	2300      	movs	r3, #0
1a003308:	6063      	str	r3, [r4, #4]
1a00330a:	e7f6      	b.n	1a0032fa <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a00330c:	b96e      	cbnz	r6, 1a00332a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a00330e:	6880      	ldr	r0, [r0, #8]
1a003310:	f005 f82c 	bl	1a00836c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a003314:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003316:	68a3      	ldr	r3, [r4, #8]
1a003318:	4413      	add	r3, r2
1a00331a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00331c:	6862      	ldr	r2, [r4, #4]
1a00331e:	4293      	cmp	r3, r2
1a003320:	d319      	bcc.n	1a003356 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a003322:	6823      	ldr	r3, [r4, #0]
1a003324:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a003326:	2000      	movs	r0, #0
1a003328:	e7e7      	b.n	1a0032fa <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00332a:	68c0      	ldr	r0, [r0, #12]
1a00332c:	f005 f81e 	bl	1a00836c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a003330:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a003332:	4252      	negs	r2, r2
1a003334:	68e3      	ldr	r3, [r4, #12]
1a003336:	4413      	add	r3, r2
1a003338:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00333a:	6821      	ldr	r1, [r4, #0]
1a00333c:	428b      	cmp	r3, r1
1a00333e:	d202      	bcs.n	1a003346 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a003340:	6863      	ldr	r3, [r4, #4]
1a003342:	441a      	add	r2, r3
1a003344:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a003346:	2e02      	cmp	r6, #2
1a003348:	d001      	beq.n	1a00334e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00334a:	2000      	movs	r0, #0
1a00334c:	e7d5      	b.n	1a0032fa <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a00334e:	b125      	cbz	r5, 1a00335a <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a003350:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a003352:	2000      	movs	r0, #0
1a003354:	e7d1      	b.n	1a0032fa <prvCopyDataToQueue+0x12>
1a003356:	2000      	movs	r0, #0
1a003358:	e7cf      	b.n	1a0032fa <prvCopyDataToQueue+0x12>
1a00335a:	2000      	movs	r0, #0
1a00335c:	e7cd      	b.n	1a0032fa <prvCopyDataToQueue+0x12>

1a00335e <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a00335e:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003360:	b172      	cbz	r2, 1a003380 <prvCopyDataFromQueue+0x22>
{
1a003362:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a003364:	68c3      	ldr	r3, [r0, #12]
1a003366:	4413      	add	r3, r2
1a003368:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00336a:	6844      	ldr	r4, [r0, #4]
1a00336c:	42a3      	cmp	r3, r4
1a00336e:	d301      	bcc.n	1a003374 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a003370:	6803      	ldr	r3, [r0, #0]
1a003372:	60c3      	str	r3, [r0, #12]
1a003374:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a003376:	68c1      	ldr	r1, [r0, #12]
1a003378:	4620      	mov	r0, r4
1a00337a:	f004 fff7 	bl	1a00836c <memcpy>
}
1a00337e:	bd10      	pop	{r4, pc}
1a003380:	4770      	bx	lr

1a003382 <prvUnlockQueue>:
{
1a003382:	b538      	push	{r3, r4, r5, lr}
1a003384:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a003386:	f001 fb6d 	bl	1a004a64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a00338a:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a00338e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a003390:	e003      	b.n	1a00339a <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a003392:	f001 f831 	bl	1a0043f8 <vTaskMissedYield>
			--cTxLock;
1a003396:	3c01      	subs	r4, #1
1a003398:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a00339a:	2c00      	cmp	r4, #0
1a00339c:	dd08      	ble.n	1a0033b0 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00339e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0033a0:	b133      	cbz	r3, 1a0033b0 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0033a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0033a6:	f000 ff95 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a0033aa:	2800      	cmp	r0, #0
1a0033ac:	d0f3      	beq.n	1a003396 <prvUnlockQueue+0x14>
1a0033ae:	e7f0      	b.n	1a003392 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0033b0:	23ff      	movs	r3, #255	; 0xff
1a0033b2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0033b6:	f001 fb77 	bl	1a004aa8 <vPortExitCritical>
	taskENTER_CRITICAL();
1a0033ba:	f001 fb53 	bl	1a004a64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0033be:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0033c2:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0033c4:	e003      	b.n	1a0033ce <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0033c6:	f001 f817 	bl	1a0043f8 <vTaskMissedYield>
				--cRxLock;
1a0033ca:	3c01      	subs	r4, #1
1a0033cc:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0033ce:	2c00      	cmp	r4, #0
1a0033d0:	dd08      	ble.n	1a0033e4 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a0033d2:	692b      	ldr	r3, [r5, #16]
1a0033d4:	b133      	cbz	r3, 1a0033e4 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a0033d6:	f105 0010 	add.w	r0, r5, #16
1a0033da:	f000 ff7b 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a0033de:	2800      	cmp	r0, #0
1a0033e0:	d0f3      	beq.n	1a0033ca <prvUnlockQueue+0x48>
1a0033e2:	e7f0      	b.n	1a0033c6 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a0033e4:	23ff      	movs	r3, #255	; 0xff
1a0033e6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a0033ea:	f001 fb5d 	bl	1a004aa8 <vPortExitCritical>
}
1a0033ee:	bd38      	pop	{r3, r4, r5, pc}

1a0033f0 <xQueueGenericReset>:
{
1a0033f0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a0033f2:	b940      	cbnz	r0, 1a003406 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a0033f4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0033f8:	f383 8811 	msr	BASEPRI, r3
1a0033fc:	f3bf 8f6f 	isb	sy
1a003400:	f3bf 8f4f 	dsb	sy
1a003404:	e7fe      	b.n	1a003404 <xQueueGenericReset+0x14>
1a003406:	4604      	mov	r4, r0
1a003408:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00340a:	f001 fb2b 	bl	1a004a64 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a00340e:	6821      	ldr	r1, [r4, #0]
1a003410:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a003412:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a003414:	fb03 1002 	mla	r0, r3, r2, r1
1a003418:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00341a:	2000      	movs	r0, #0
1a00341c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a00341e:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a003420:	3a01      	subs	r2, #1
1a003422:	fb02 1303 	mla	r3, r2, r3, r1
1a003426:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a003428:	23ff      	movs	r3, #255	; 0xff
1a00342a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a00342e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a003432:	b9a5      	cbnz	r5, 1a00345e <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003434:	6923      	ldr	r3, [r4, #16]
1a003436:	b91b      	cbnz	r3, 1a003440 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a003438:	f001 fb36 	bl	1a004aa8 <vPortExitCritical>
}
1a00343c:	2001      	movs	r0, #1
1a00343e:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003440:	f104 0010 	add.w	r0, r4, #16
1a003444:	f000 ff46 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a003448:	2800      	cmp	r0, #0
1a00344a:	d0f5      	beq.n	1a003438 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a00344c:	4b08      	ldr	r3, [pc, #32]	; (1a003470 <xQueueGenericReset+0x80>)
1a00344e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003452:	601a      	str	r2, [r3, #0]
1a003454:	f3bf 8f4f 	dsb	sy
1a003458:	f3bf 8f6f 	isb	sy
1a00345c:	e7ec      	b.n	1a003438 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a00345e:	f104 0010 	add.w	r0, r4, #16
1a003462:	f000 fa94 	bl	1a00398e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a003466:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00346a:	f000 fa90 	bl	1a00398e <vListInitialise>
1a00346e:	e7e3      	b.n	1a003438 <xQueueGenericReset+0x48>
1a003470:	e000ed04 	.word	0xe000ed04

1a003474 <prvInitialiseNewQueue>:
{
1a003474:	b538      	push	{r3, r4, r5, lr}
1a003476:	461d      	mov	r5, r3
1a003478:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a00347a:	460b      	mov	r3, r1
1a00347c:	b149      	cbz	r1, 1a003492 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a00347e:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a003480:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a003482:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a003484:	2101      	movs	r1, #1
1a003486:	4620      	mov	r0, r4
1a003488:	f7ff ffb2 	bl	1a0033f0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a00348c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a003490:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a003492:	6024      	str	r4, [r4, #0]
1a003494:	e7f4      	b.n	1a003480 <prvInitialiseNewQueue+0xc>

1a003496 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003496:	b940      	cbnz	r0, 1a0034aa <xQueueGenericCreateStatic+0x14>
1a003498:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00349c:	f383 8811 	msr	BASEPRI, r3
1a0034a0:	f3bf 8f6f 	isb	sy
1a0034a4:	f3bf 8f4f 	dsb	sy
1a0034a8:	e7fe      	b.n	1a0034a8 <xQueueGenericCreateStatic+0x12>
	{
1a0034aa:	b510      	push	{r4, lr}
1a0034ac:	b084      	sub	sp, #16
1a0034ae:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0034b0:	b153      	cbz	r3, 1a0034c8 <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0034b2:	b192      	cbz	r2, 1a0034da <xQueueGenericCreateStatic+0x44>
1a0034b4:	b989      	cbnz	r1, 1a0034da <xQueueGenericCreateStatic+0x44>
1a0034b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034ba:	f383 8811 	msr	BASEPRI, r3
1a0034be:	f3bf 8f6f 	isb	sy
1a0034c2:	f3bf 8f4f 	dsb	sy
1a0034c6:	e7fe      	b.n	1a0034c6 <xQueueGenericCreateStatic+0x30>
1a0034c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034cc:	f383 8811 	msr	BASEPRI, r3
1a0034d0:	f3bf 8f6f 	isb	sy
1a0034d4:	f3bf 8f4f 	dsb	sy
1a0034d8:	e7fe      	b.n	1a0034d8 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a0034da:	b94a      	cbnz	r2, 1a0034f0 <xQueueGenericCreateStatic+0x5a>
1a0034dc:	b141      	cbz	r1, 1a0034f0 <xQueueGenericCreateStatic+0x5a>
1a0034de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034e2:	f383 8811 	msr	BASEPRI, r3
1a0034e6:	f3bf 8f6f 	isb	sy
1a0034ea:	f3bf 8f4f 	dsb	sy
1a0034ee:	e7fe      	b.n	1a0034ee <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a0034f0:	2050      	movs	r0, #80	; 0x50
1a0034f2:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a0034f4:	9803      	ldr	r0, [sp, #12]
1a0034f6:	2850      	cmp	r0, #80	; 0x50
1a0034f8:	d008      	beq.n	1a00350c <xQueueGenericCreateStatic+0x76>
1a0034fa:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0034fe:	f383 8811 	msr	BASEPRI, r3
1a003502:	f3bf 8f6f 	isb	sy
1a003506:	f3bf 8f4f 	dsb	sy
1a00350a:	e7fe      	b.n	1a00350a <xQueueGenericCreateStatic+0x74>
1a00350c:	4620      	mov	r0, r4
1a00350e:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a003510:	2301      	movs	r3, #1
1a003512:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a003516:	9400      	str	r4, [sp, #0]
1a003518:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a00351c:	f7ff ffaa 	bl	1a003474 <prvInitialiseNewQueue>
	}
1a003520:	4620      	mov	r0, r4
1a003522:	b004      	add	sp, #16
1a003524:	bd10      	pop	{r4, pc}

1a003526 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a003526:	b940      	cbnz	r0, 1a00353a <xQueueGenericCreate+0x14>
1a003528:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00352c:	f383 8811 	msr	BASEPRI, r3
1a003530:	f3bf 8f6f 	isb	sy
1a003534:	f3bf 8f4f 	dsb	sy
1a003538:	e7fe      	b.n	1a003538 <xQueueGenericCreate+0x12>
	{
1a00353a:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00353c:	b083      	sub	sp, #12
1a00353e:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a003540:	b111      	cbz	r1, 1a003548 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003542:	fb01 f000 	mul.w	r0, r1, r0
1a003546:	e000      	b.n	1a00354a <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a003548:	2000      	movs	r0, #0
1a00354a:	4617      	mov	r7, r2
1a00354c:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a00354e:	3050      	adds	r0, #80	; 0x50
1a003550:	f7ff fe32 	bl	1a0031b8 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a003554:	4605      	mov	r5, r0
1a003556:	b150      	cbz	r0, 1a00356e <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a003558:	2300      	movs	r3, #0
1a00355a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00355e:	9000      	str	r0, [sp, #0]
1a003560:	463b      	mov	r3, r7
1a003562:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a003566:	4621      	mov	r1, r4
1a003568:	4630      	mov	r0, r6
1a00356a:	f7ff ff83 	bl	1a003474 <prvInitialiseNewQueue>
	}
1a00356e:	4628      	mov	r0, r5
1a003570:	b003      	add	sp, #12
1a003572:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a003574 <xQueueGenericSend>:
{
1a003574:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003576:	b085      	sub	sp, #20
1a003578:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a00357a:	b160      	cbz	r0, 1a003596 <xQueueGenericSend+0x22>
1a00357c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00357e:	b999      	cbnz	r1, 1a0035a8 <xQueueGenericSend+0x34>
1a003580:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a003582:	b18a      	cbz	r2, 1a0035a8 <xQueueGenericSend+0x34>
1a003584:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003588:	f383 8811 	msr	BASEPRI, r3
1a00358c:	f3bf 8f6f 	isb	sy
1a003590:	f3bf 8f4f 	dsb	sy
1a003594:	e7fe      	b.n	1a003594 <xQueueGenericSend+0x20>
1a003596:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00359a:	f383 8811 	msr	BASEPRI, r3
1a00359e:	f3bf 8f6f 	isb	sy
1a0035a2:	f3bf 8f4f 	dsb	sy
1a0035a6:	e7fe      	b.n	1a0035a6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0035a8:	2b02      	cmp	r3, #2
1a0035aa:	d10b      	bne.n	1a0035c4 <xQueueGenericSend+0x50>
1a0035ac:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0035ae:	2a01      	cmp	r2, #1
1a0035b0:	d008      	beq.n	1a0035c4 <xQueueGenericSend+0x50>
1a0035b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0035b6:	f383 8811 	msr	BASEPRI, r3
1a0035ba:	f3bf 8f6f 	isb	sy
1a0035be:	f3bf 8f4f 	dsb	sy
1a0035c2:	e7fe      	b.n	1a0035c2 <xQueueGenericSend+0x4e>
1a0035c4:	461e      	mov	r6, r3
1a0035c6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0035c8:	f000 ff1c 	bl	1a004404 <xTaskGetSchedulerState>
1a0035cc:	b950      	cbnz	r0, 1a0035e4 <xQueueGenericSend+0x70>
1a0035ce:	9b01      	ldr	r3, [sp, #4]
1a0035d0:	b153      	cbz	r3, 1a0035e8 <xQueueGenericSend+0x74>
1a0035d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0035d6:	f383 8811 	msr	BASEPRI, r3
1a0035da:	f3bf 8f6f 	isb	sy
1a0035de:	f3bf 8f4f 	dsb	sy
1a0035e2:	e7fe      	b.n	1a0035e2 <xQueueGenericSend+0x6e>
1a0035e4:	2500      	movs	r5, #0
1a0035e6:	e03a      	b.n	1a00365e <xQueueGenericSend+0xea>
1a0035e8:	2500      	movs	r5, #0
1a0035ea:	e038      	b.n	1a00365e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0035ec:	4632      	mov	r2, r6
1a0035ee:	4639      	mov	r1, r7
1a0035f0:	4620      	mov	r0, r4
1a0035f2:	f7ff fe79 	bl	1a0032e8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0035f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0035f8:	b94b      	cbnz	r3, 1a00360e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a0035fa:	b1a8      	cbz	r0, 1a003628 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a0035fc:	4b3b      	ldr	r3, [pc, #236]	; (1a0036ec <xQueueGenericSend+0x178>)
1a0035fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003602:	601a      	str	r2, [r3, #0]
1a003604:	f3bf 8f4f 	dsb	sy
1a003608:	f3bf 8f6f 	isb	sy
1a00360c:	e00c      	b.n	1a003628 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a00360e:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003612:	f000 fe5f 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a003616:	b138      	cbz	r0, 1a003628 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a003618:	4b34      	ldr	r3, [pc, #208]	; (1a0036ec <xQueueGenericSend+0x178>)
1a00361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00361e:	601a      	str	r2, [r3, #0]
1a003620:	f3bf 8f4f 	dsb	sy
1a003624:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a003628:	f001 fa3e 	bl	1a004aa8 <vPortExitCritical>
				return pdPASS;
1a00362c:	2001      	movs	r0, #1
}
1a00362e:	b005      	add	sp, #20
1a003630:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a003632:	f001 fa39 	bl	1a004aa8 <vPortExitCritical>
					return errQUEUE_FULL;
1a003636:	2000      	movs	r0, #0
1a003638:	e7f9      	b.n	1a00362e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00363a:	a802      	add	r0, sp, #8
1a00363c:	f000 fe90 	bl	1a004360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a003640:	2501      	movs	r5, #1
1a003642:	e019      	b.n	1a003678 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a003644:	2300      	movs	r3, #0
1a003646:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00364a:	e021      	b.n	1a003690 <xQueueGenericSend+0x11c>
1a00364c:	2300      	movs	r3, #0
1a00364e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003652:	e023      	b.n	1a00369c <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a003654:	4620      	mov	r0, r4
1a003656:	f7ff fe94 	bl	1a003382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00365a:	f000 fcd7 	bl	1a00400c <xTaskResumeAll>
		taskENTER_CRITICAL();
1a00365e:	f001 fa01 	bl	1a004a64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a003662:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a003664:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003666:	429a      	cmp	r2, r3
1a003668:	d3c0      	bcc.n	1a0035ec <xQueueGenericSend+0x78>
1a00366a:	2e02      	cmp	r6, #2
1a00366c:	d0be      	beq.n	1a0035ec <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00366e:	9b01      	ldr	r3, [sp, #4]
1a003670:	2b00      	cmp	r3, #0
1a003672:	d0de      	beq.n	1a003632 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a003674:	2d00      	cmp	r5, #0
1a003676:	d0e0      	beq.n	1a00363a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a003678:	f001 fa16 	bl	1a004aa8 <vPortExitCritical>
		vTaskSuspendAll();
1a00367c:	f000 fc2c 	bl	1a003ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a003680:	f001 f9f0 	bl	1a004a64 <vPortEnterCritical>
1a003684:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a003688:	b25b      	sxtb	r3, r3
1a00368a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00368e:	d0d9      	beq.n	1a003644 <xQueueGenericSend+0xd0>
1a003690:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003694:	b25b      	sxtb	r3, r3
1a003696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00369a:	d0d7      	beq.n	1a00364c <xQueueGenericSend+0xd8>
1a00369c:	f001 fa04 	bl	1a004aa8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0036a0:	a901      	add	r1, sp, #4
1a0036a2:	a802      	add	r0, sp, #8
1a0036a4:	f000 fe68 	bl	1a004378 <xTaskCheckForTimeOut>
1a0036a8:	b9c8      	cbnz	r0, 1a0036de <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0036aa:	4620      	mov	r0, r4
1a0036ac:	f7ff fe00 	bl	1a0032b0 <prvIsQueueFull>
1a0036b0:	2800      	cmp	r0, #0
1a0036b2:	d0cf      	beq.n	1a003654 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0036b4:	9901      	ldr	r1, [sp, #4]
1a0036b6:	f104 0010 	add.w	r0, r4, #16
1a0036ba:	f000 fdd7 	bl	1a00426c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0036be:	4620      	mov	r0, r4
1a0036c0:	f7ff fe5f 	bl	1a003382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0036c4:	f000 fca2 	bl	1a00400c <xTaskResumeAll>
1a0036c8:	2800      	cmp	r0, #0
1a0036ca:	d1c8      	bne.n	1a00365e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a0036cc:	4b07      	ldr	r3, [pc, #28]	; (1a0036ec <xQueueGenericSend+0x178>)
1a0036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0036d2:	601a      	str	r2, [r3, #0]
1a0036d4:	f3bf 8f4f 	dsb	sy
1a0036d8:	f3bf 8f6f 	isb	sy
1a0036dc:	e7bf      	b.n	1a00365e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a0036de:	4620      	mov	r0, r4
1a0036e0:	f7ff fe4f 	bl	1a003382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0036e4:	f000 fc92 	bl	1a00400c <xTaskResumeAll>
			return errQUEUE_FULL;
1a0036e8:	2000      	movs	r0, #0
1a0036ea:	e7a0      	b.n	1a00362e <xQueueGenericSend+0xba>
1a0036ec:	e000ed04 	.word	0xe000ed04

1a0036f0 <xQueueGenericSendFromISR>:
{
1a0036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a0036f4:	b160      	cbz	r0, 1a003710 <xQueueGenericSendFromISR+0x20>
1a0036f6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0036f8:	b999      	cbnz	r1, 1a003722 <xQueueGenericSendFromISR+0x32>
1a0036fa:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a0036fc:	b188      	cbz	r0, 1a003722 <xQueueGenericSendFromISR+0x32>
1a0036fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003702:	f383 8811 	msr	BASEPRI, r3
1a003706:	f3bf 8f6f 	isb	sy
1a00370a:	f3bf 8f4f 	dsb	sy
1a00370e:	e7fe      	b.n	1a00370e <xQueueGenericSendFromISR+0x1e>
1a003710:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003714:	f383 8811 	msr	BASEPRI, r3
1a003718:	f3bf 8f6f 	isb	sy
1a00371c:	f3bf 8f4f 	dsb	sy
1a003720:	e7fe      	b.n	1a003720 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a003722:	2b02      	cmp	r3, #2
1a003724:	d10b      	bne.n	1a00373e <xQueueGenericSendFromISR+0x4e>
1a003726:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a003728:	2801      	cmp	r0, #1
1a00372a:	d008      	beq.n	1a00373e <xQueueGenericSendFromISR+0x4e>
1a00372c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003730:	f383 8811 	msr	BASEPRI, r3
1a003734:	f3bf 8f6f 	isb	sy
1a003738:	f3bf 8f4f 	dsb	sy
1a00373c:	e7fe      	b.n	1a00373c <xQueueGenericSendFromISR+0x4c>
1a00373e:	461f      	mov	r7, r3
1a003740:	4690      	mov	r8, r2
1a003742:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a003744:	f001 fab8 	bl	1a004cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a003748:	f3ef 8611 	mrs	r6, BASEPRI
1a00374c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003750:	f383 8811 	msr	BASEPRI, r3
1a003754:	f3bf 8f6f 	isb	sy
1a003758:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a00375c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a00375e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a003760:	429a      	cmp	r2, r3
1a003762:	d303      	bcc.n	1a00376c <xQueueGenericSendFromISR+0x7c>
1a003764:	2f02      	cmp	r7, #2
1a003766:	d001      	beq.n	1a00376c <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a003768:	2000      	movs	r0, #0
1a00376a:	e00f      	b.n	1a00378c <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a00376c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a003770:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a003772:	463a      	mov	r2, r7
1a003774:	4649      	mov	r1, r9
1a003776:	4620      	mov	r0, r4
1a003778:	f7ff fdb6 	bl	1a0032e8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a00377c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a003780:	d008      	beq.n	1a003794 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a003782:	1c6b      	adds	r3, r5, #1
1a003784:	b25b      	sxtb	r3, r3
1a003786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a00378a:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a00378c:	f386 8811 	msr	BASEPRI, r6
}
1a003790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a003794:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a003796:	b15b      	cbz	r3, 1a0037b0 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a003798:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00379c:	f000 fd9a 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a0037a0:	b140      	cbz	r0, 1a0037b4 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0037a2:	f1b8 0f00 	cmp.w	r8, #0
1a0037a6:	d007      	beq.n	1a0037b8 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0037a8:	2001      	movs	r0, #1
1a0037aa:	f8c8 0000 	str.w	r0, [r8]
1a0037ae:	e7ed      	b.n	1a00378c <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0037b0:	2001      	movs	r0, #1
1a0037b2:	e7eb      	b.n	1a00378c <xQueueGenericSendFromISR+0x9c>
1a0037b4:	2001      	movs	r0, #1
1a0037b6:	e7e9      	b.n	1a00378c <xQueueGenericSendFromISR+0x9c>
1a0037b8:	2001      	movs	r0, #1
1a0037ba:	e7e7      	b.n	1a00378c <xQueueGenericSendFromISR+0x9c>

1a0037bc <xQueueReceive>:
{
1a0037bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0037be:	b085      	sub	sp, #20
1a0037c0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0037c2:	b160      	cbz	r0, 1a0037de <xQueueReceive+0x22>
1a0037c4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0037c6:	b999      	cbnz	r1, 1a0037f0 <xQueueReceive+0x34>
1a0037c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0037ca:	b18b      	cbz	r3, 1a0037f0 <xQueueReceive+0x34>
	__asm volatile
1a0037cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037d0:	f383 8811 	msr	BASEPRI, r3
1a0037d4:	f3bf 8f6f 	isb	sy
1a0037d8:	f3bf 8f4f 	dsb	sy
1a0037dc:	e7fe      	b.n	1a0037dc <xQueueReceive+0x20>
1a0037de:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0037e2:	f383 8811 	msr	BASEPRI, r3
1a0037e6:	f3bf 8f6f 	isb	sy
1a0037ea:	f3bf 8f4f 	dsb	sy
1a0037ee:	e7fe      	b.n	1a0037ee <xQueueReceive+0x32>
1a0037f0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0037f2:	f000 fe07 	bl	1a004404 <xTaskGetSchedulerState>
1a0037f6:	b950      	cbnz	r0, 1a00380e <xQueueReceive+0x52>
1a0037f8:	9b01      	ldr	r3, [sp, #4]
1a0037fa:	b153      	cbz	r3, 1a003812 <xQueueReceive+0x56>
1a0037fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003800:	f383 8811 	msr	BASEPRI, r3
1a003804:	f3bf 8f6f 	isb	sy
1a003808:	f3bf 8f4f 	dsb	sy
1a00380c:	e7fe      	b.n	1a00380c <xQueueReceive+0x50>
1a00380e:	2600      	movs	r6, #0
1a003810:	e03e      	b.n	1a003890 <xQueueReceive+0xd4>
1a003812:	2600      	movs	r6, #0
1a003814:	e03c      	b.n	1a003890 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a003816:	4639      	mov	r1, r7
1a003818:	4620      	mov	r0, r4
1a00381a:	f7ff fda0 	bl	1a00335e <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a00381e:	3d01      	subs	r5, #1
1a003820:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a003822:	6923      	ldr	r3, [r4, #16]
1a003824:	b923      	cbnz	r3, 1a003830 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a003826:	f001 f93f 	bl	1a004aa8 <vPortExitCritical>
				return pdPASS;
1a00382a:	2001      	movs	r0, #1
}
1a00382c:	b005      	add	sp, #20
1a00382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a003830:	f104 0010 	add.w	r0, r4, #16
1a003834:	f000 fd4e 	bl	1a0042d4 <xTaskRemoveFromEventList>
1a003838:	2800      	cmp	r0, #0
1a00383a:	d0f4      	beq.n	1a003826 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a00383c:	4b34      	ldr	r3, [pc, #208]	; (1a003910 <xQueueReceive+0x154>)
1a00383e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003842:	601a      	str	r2, [r3, #0]
1a003844:	f3bf 8f4f 	dsb	sy
1a003848:	f3bf 8f6f 	isb	sy
1a00384c:	e7eb      	b.n	1a003826 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a00384e:	f001 f92b 	bl	1a004aa8 <vPortExitCritical>
					return errQUEUE_EMPTY;
1a003852:	2000      	movs	r0, #0
1a003854:	e7ea      	b.n	1a00382c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a003856:	a802      	add	r0, sp, #8
1a003858:	f000 fd82 	bl	1a004360 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a00385c:	2601      	movs	r6, #1
1a00385e:	e021      	b.n	1a0038a4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a003860:	2300      	movs	r3, #0
1a003862:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003866:	e029      	b.n	1a0038bc <xQueueReceive+0x100>
1a003868:	2300      	movs	r3, #0
1a00386a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00386e:	e02b      	b.n	1a0038c8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a003870:	4620      	mov	r0, r4
1a003872:	f7ff fd86 	bl	1a003382 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a003876:	f000 fbc9 	bl	1a00400c <xTaskResumeAll>
1a00387a:	e009      	b.n	1a003890 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a00387c:	4620      	mov	r0, r4
1a00387e:	f7ff fd80 	bl	1a003382 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a003882:	f000 fbc3 	bl	1a00400c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a003886:	4620      	mov	r0, r4
1a003888:	f7ff fd21 	bl	1a0032ce <prvIsQueueEmpty>
1a00388c:	2800      	cmp	r0, #0
1a00388e:	d13d      	bne.n	1a00390c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a003890:	f001 f8e8 	bl	1a004a64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a003894:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a003896:	2d00      	cmp	r5, #0
1a003898:	d1bd      	bne.n	1a003816 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a00389a:	9b01      	ldr	r3, [sp, #4]
1a00389c:	2b00      	cmp	r3, #0
1a00389e:	d0d6      	beq.n	1a00384e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0038a0:	2e00      	cmp	r6, #0
1a0038a2:	d0d8      	beq.n	1a003856 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0038a4:	f001 f900 	bl	1a004aa8 <vPortExitCritical>
		vTaskSuspendAll();
1a0038a8:	f000 fb16 	bl	1a003ed8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0038ac:	f001 f8da 	bl	1a004a64 <vPortEnterCritical>
1a0038b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0038b4:	b25b      	sxtb	r3, r3
1a0038b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0038ba:	d0d1      	beq.n	1a003860 <xQueueReceive+0xa4>
1a0038bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0038c0:	b25b      	sxtb	r3, r3
1a0038c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0038c6:	d0cf      	beq.n	1a003868 <xQueueReceive+0xac>
1a0038c8:	f001 f8ee 	bl	1a004aa8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0038cc:	a901      	add	r1, sp, #4
1a0038ce:	a802      	add	r0, sp, #8
1a0038d0:	f000 fd52 	bl	1a004378 <xTaskCheckForTimeOut>
1a0038d4:	2800      	cmp	r0, #0
1a0038d6:	d1d1      	bne.n	1a00387c <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0038d8:	4620      	mov	r0, r4
1a0038da:	f7ff fcf8 	bl	1a0032ce <prvIsQueueEmpty>
1a0038de:	2800      	cmp	r0, #0
1a0038e0:	d0c6      	beq.n	1a003870 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a0038e2:	9901      	ldr	r1, [sp, #4]
1a0038e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0038e8:	f000 fcc0 	bl	1a00426c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0038ec:	4620      	mov	r0, r4
1a0038ee:	f7ff fd48 	bl	1a003382 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0038f2:	f000 fb8b 	bl	1a00400c <xTaskResumeAll>
1a0038f6:	2800      	cmp	r0, #0
1a0038f8:	d1ca      	bne.n	1a003890 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a0038fa:	4b05      	ldr	r3, [pc, #20]	; (1a003910 <xQueueReceive+0x154>)
1a0038fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003900:	601a      	str	r2, [r3, #0]
1a003902:	f3bf 8f4f 	dsb	sy
1a003906:	f3bf 8f6f 	isb	sy
1a00390a:	e7c1      	b.n	1a003890 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a00390c:	2000      	movs	r0, #0
1a00390e:	e78d      	b.n	1a00382c <xQueueReceive+0x70>
1a003910:	e000ed04 	.word	0xe000ed04

1a003914 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a003914:	2300      	movs	r3, #0
1a003916:	2b07      	cmp	r3, #7
1a003918:	d80c      	bhi.n	1a003934 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a00391a:	4a07      	ldr	r2, [pc, #28]	; (1a003938 <vQueueAddToRegistry+0x24>)
1a00391c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a003920:	b10a      	cbz	r2, 1a003926 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a003922:	3301      	adds	r3, #1
1a003924:	e7f7      	b.n	1a003916 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a003926:	4a04      	ldr	r2, [pc, #16]	; (1a003938 <vQueueAddToRegistry+0x24>)
1a003928:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a00392c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a003930:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a003932:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a003934:	4770      	bx	lr
1a003936:	bf00      	nop
1a003938:	10003604 	.word	0x10003604

1a00393c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a00393c:	b570      	push	{r4, r5, r6, lr}
1a00393e:	4604      	mov	r4, r0
1a003940:	460d      	mov	r5, r1
1a003942:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a003944:	f001 f88e 	bl	1a004a64 <vPortEnterCritical>
1a003948:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a00394c:	b25b      	sxtb	r3, r3
1a00394e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a003952:	d00d      	beq.n	1a003970 <vQueueWaitForMessageRestricted+0x34>
1a003954:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a003958:	b25b      	sxtb	r3, r3
1a00395a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00395e:	d00b      	beq.n	1a003978 <vQueueWaitForMessageRestricted+0x3c>
1a003960:	f001 f8a2 	bl	1a004aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a003964:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a003966:	b15b      	cbz	r3, 1a003980 <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a003968:	4620      	mov	r0, r4
1a00396a:	f7ff fd0a 	bl	1a003382 <prvUnlockQueue>
	}
1a00396e:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a003970:	2300      	movs	r3, #0
1a003972:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a003976:	e7ed      	b.n	1a003954 <vQueueWaitForMessageRestricted+0x18>
1a003978:	2300      	movs	r3, #0
1a00397a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a00397e:	e7ef      	b.n	1a003960 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a003980:	4632      	mov	r2, r6
1a003982:	4629      	mov	r1, r5
1a003984:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a003988:	f000 fc88 	bl	1a00429c <vTaskPlaceOnEventListRestricted>
1a00398c:	e7ec      	b.n	1a003968 <vQueueWaitForMessageRestricted+0x2c>

1a00398e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00398e:	f100 0308 	add.w	r3, r0, #8
1a003992:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a003994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003998:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00399a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a00399c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a00399e:	2300      	movs	r3, #0
1a0039a0:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0039a2:	4770      	bx	lr

1a0039a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a0039a4:	2300      	movs	r3, #0
1a0039a6:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a0039a8:	4770      	bx	lr

1a0039aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a0039aa:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a0039ac:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a0039ae:	689a      	ldr	r2, [r3, #8]
1a0039b0:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a0039b2:	689a      	ldr	r2, [r3, #8]
1a0039b4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a0039b6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0039b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0039ba:	6803      	ldr	r3, [r0, #0]
1a0039bc:	3301      	adds	r3, #1
1a0039be:	6003      	str	r3, [r0, #0]
}
1a0039c0:	4770      	bx	lr

1a0039c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a0039c2:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a0039c4:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a0039c6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0039ca:	d002      	beq.n	1a0039d2 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0039cc:	f100 0208 	add.w	r2, r0, #8
1a0039d0:	e002      	b.n	1a0039d8 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a0039d2:	6902      	ldr	r2, [r0, #16]
1a0039d4:	e004      	b.n	1a0039e0 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0039d6:	461a      	mov	r2, r3
1a0039d8:	6853      	ldr	r3, [r2, #4]
1a0039da:	681c      	ldr	r4, [r3, #0]
1a0039dc:	42ac      	cmp	r4, r5
1a0039de:	d9fa      	bls.n	1a0039d6 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a0039e0:	6853      	ldr	r3, [r2, #4]
1a0039e2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a0039e4:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a0039e6:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a0039e8:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a0039ea:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a0039ec:	6803      	ldr	r3, [r0, #0]
1a0039ee:	3301      	adds	r3, #1
1a0039f0:	6003      	str	r3, [r0, #0]
}
1a0039f2:	bc30      	pop	{r4, r5}
1a0039f4:	4770      	bx	lr

1a0039f6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a0039f6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a0039f8:	6842      	ldr	r2, [r0, #4]
1a0039fa:	6881      	ldr	r1, [r0, #8]
1a0039fc:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a0039fe:	6882      	ldr	r2, [r0, #8]
1a003a00:	6841      	ldr	r1, [r0, #4]
1a003a02:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a003a04:	685a      	ldr	r2, [r3, #4]
1a003a06:	4282      	cmp	r2, r0
1a003a08:	d006      	beq.n	1a003a18 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a003a0a:	2200      	movs	r2, #0
1a003a0c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a003a0e:	681a      	ldr	r2, [r3, #0]
1a003a10:	3a01      	subs	r2, #1
1a003a12:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a003a14:	6818      	ldr	r0, [r3, #0]
}
1a003a16:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a003a18:	6882      	ldr	r2, [r0, #8]
1a003a1a:	605a      	str	r2, [r3, #4]
1a003a1c:	e7f5      	b.n	1a003a0a <uxListRemove+0x14>
1a003a1e:	Address 0x000000001a003a1e is out of bounds.


1a003a20 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a003a20:	4b03      	ldr	r3, [pc, #12]	; (1a003a30 <vApplicationGetIdleTaskMemory+0x10>)
1a003a22:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a003a24:	4b03      	ldr	r3, [pc, #12]	; (1a003a34 <vApplicationGetIdleTaskMemory+0x14>)
1a003a26:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a003a28:	235a      	movs	r3, #90	; 0x5a
1a003a2a:	6013      	str	r3, [r2, #0]
}
1a003a2c:	4770      	bx	lr
1a003a2e:	bf00      	nop
1a003a30:	10003120 	.word	0x10003120
1a003a34:	10002a18 	.word	0x10002a18

1a003a38 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a003a38:	4b03      	ldr	r3, [pc, #12]	; (1a003a48 <vApplicationGetTimerTaskMemory+0x10>)
1a003a3a:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a003a3c:	4b03      	ldr	r3, [pc, #12]	; (1a003a4c <vApplicationGetTimerTaskMemory+0x14>)
1a003a3e:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a003a40:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a003a44:	6013      	str	r3, [r2, #0]
1a003a46:	4770      	bx	lr
1a003a48:	10003180 	.word	0x10003180
1a003a4c:	10002b80 	.word	0x10002b80

1a003a50 <vApplicationStackOverflowHook>:
#include <FreeRTOS.h>
#include <task.h>

void vApplicationStackOverflowHook(TaskHandle_t xTask,
                                   signed char *pcTaskName)
{
1a003a50:	e7fe      	b.n	1a003a50 <vApplicationStackOverflowHook>

1a003a52 <vApplicationMallocFailedHook>:
    while(1)
        ;
}

void vApplicationMallocFailedHook( void )
{
1a003a52:	e7fe      	b.n	1a003a52 <vApplicationMallocFailedHook>

1a003a54 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003a54:	4b08      	ldr	r3, [pc, #32]	; (1a003a78 <prvResetNextTaskUnblockTime+0x24>)
1a003a56:	681b      	ldr	r3, [r3, #0]
1a003a58:	681b      	ldr	r3, [r3, #0]
1a003a5a:	b13b      	cbz	r3, 1a003a6c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003a5c:	4b06      	ldr	r3, [pc, #24]	; (1a003a78 <prvResetNextTaskUnblockTime+0x24>)
1a003a5e:	681b      	ldr	r3, [r3, #0]
1a003a60:	68db      	ldr	r3, [r3, #12]
1a003a62:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a003a64:	685a      	ldr	r2, [r3, #4]
1a003a66:	4b05      	ldr	r3, [pc, #20]	; (1a003a7c <prvResetNextTaskUnblockTime+0x28>)
1a003a68:	601a      	str	r2, [r3, #0]
	}
}
1a003a6a:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a003a6c:	4b03      	ldr	r3, [pc, #12]	; (1a003a7c <prvResetNextTaskUnblockTime+0x28>)
1a003a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003a72:	601a      	str	r2, [r3, #0]
1a003a74:	4770      	bx	lr
1a003a76:	bf00      	nop
1a003a78:	100031e4 	.word	0x100031e4
1a003a7c:	100032b8 	.word	0x100032b8

1a003a80 <prvInitialiseNewTask>:
{
1a003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a003a84:	4681      	mov	r9, r0
1a003a86:	460d      	mov	r5, r1
1a003a88:	4617      	mov	r7, r2
1a003a8a:	469a      	mov	sl, r3
1a003a8c:	9e08      	ldr	r6, [sp, #32]
1a003a8e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a003a92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a003a94:	0092      	lsls	r2, r2, #2
1a003a96:	21a5      	movs	r1, #165	; 0xa5
1a003a98:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a003a9a:	f004 fc72 	bl	1a008382 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a003a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a003aa0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a003aa4:	3a01      	subs	r2, #1
1a003aa6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a003aaa:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a003aae:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a003ab0:	2300      	movs	r3, #0
1a003ab2:	2b0f      	cmp	r3, #15
1a003ab4:	d807      	bhi.n	1a003ac6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a003ab6:	5ce9      	ldrb	r1, [r5, r3]
1a003ab8:	18e2      	adds	r2, r4, r3
1a003aba:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a003abe:	5cea      	ldrb	r2, [r5, r3]
1a003ac0:	b10a      	cbz	r2, 1a003ac6 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a003ac2:	3301      	adds	r3, #1
1a003ac4:	e7f5      	b.n	1a003ab2 <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a003ac6:	2300      	movs	r3, #0
1a003ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a003acc:	2e06      	cmp	r6, #6
1a003ace:	d900      	bls.n	1a003ad2 <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a003ad0:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a003ad2:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a003ad4:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a003ad6:	2500      	movs	r5, #0
1a003ad8:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a003ada:	1d20      	adds	r0, r4, #4
1a003adc:	f7ff ff62 	bl	1a0039a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a003ae0:	f104 0018 	add.w	r0, r4, #24
1a003ae4:	f7ff ff5e 	bl	1a0039a4 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a003ae8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003aea:	f1c6 0607 	rsb	r6, r6, #7
1a003aee:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a003af0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a003af2:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a003af4:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a003af8:	4652      	mov	r2, sl
1a003afa:	4649      	mov	r1, r9
1a003afc:	4638      	mov	r0, r7
1a003afe:	f000 ff87 	bl	1a004a10 <pxPortInitialiseStack>
1a003b02:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a003b04:	f1b8 0f00 	cmp.w	r8, #0
1a003b08:	d001      	beq.n	1a003b0e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a003b0a:	f8c8 4000 	str.w	r4, [r8]
}
1a003b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003b12:	Address 0x000000001a003b12 is out of bounds.


1a003b14 <prvInitialiseTaskLists>:
{
1a003b14:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a003b16:	2400      	movs	r4, #0
1a003b18:	e007      	b.n	1a003b2a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a003b1a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a003b1e:	0093      	lsls	r3, r2, #2
1a003b20:	480e      	ldr	r0, [pc, #56]	; (1a003b5c <prvInitialiseTaskLists+0x48>)
1a003b22:	4418      	add	r0, r3
1a003b24:	f7ff ff33 	bl	1a00398e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a003b28:	3401      	adds	r4, #1
1a003b2a:	2c06      	cmp	r4, #6
1a003b2c:	d9f5      	bls.n	1a003b1a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a003b2e:	4d0c      	ldr	r5, [pc, #48]	; (1a003b60 <prvInitialiseTaskLists+0x4c>)
1a003b30:	4628      	mov	r0, r5
1a003b32:	f7ff ff2c 	bl	1a00398e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a003b36:	4c0b      	ldr	r4, [pc, #44]	; (1a003b64 <prvInitialiseTaskLists+0x50>)
1a003b38:	4620      	mov	r0, r4
1a003b3a:	f7ff ff28 	bl	1a00398e <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a003b3e:	480a      	ldr	r0, [pc, #40]	; (1a003b68 <prvInitialiseTaskLists+0x54>)
1a003b40:	f7ff ff25 	bl	1a00398e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a003b44:	4809      	ldr	r0, [pc, #36]	; (1a003b6c <prvInitialiseTaskLists+0x58>)
1a003b46:	f7ff ff22 	bl	1a00398e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a003b4a:	4809      	ldr	r0, [pc, #36]	; (1a003b70 <prvInitialiseTaskLists+0x5c>)
1a003b4c:	f7ff ff1f 	bl	1a00398e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a003b50:	4b08      	ldr	r3, [pc, #32]	; (1a003b74 <prvInitialiseTaskLists+0x60>)
1a003b52:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a003b54:	4b08      	ldr	r3, [pc, #32]	; (1a003b78 <prvInitialiseTaskLists+0x64>)
1a003b56:	601c      	str	r4, [r3, #0]
}
1a003b58:	bd38      	pop	{r3, r4, r5, pc}
1a003b5a:	bf00      	nop
1a003b5c:	100031ec 	.word	0x100031ec
1a003b60:	10003290 	.word	0x10003290
1a003b64:	100032a4 	.word	0x100032a4
1a003b68:	100032c0 	.word	0x100032c0
1a003b6c:	100032ec 	.word	0x100032ec
1a003b70:	100032d8 	.word	0x100032d8
1a003b74:	100031e4 	.word	0x100031e4
1a003b78:	100031e8 	.word	0x100031e8

1a003b7c <prvAddNewTaskToReadyList>:
{
1a003b7c:	b510      	push	{r4, lr}
1a003b7e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a003b80:	f000 ff70 	bl	1a004a64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a003b84:	4a21      	ldr	r2, [pc, #132]	; (1a003c0c <prvAddNewTaskToReadyList+0x90>)
1a003b86:	6813      	ldr	r3, [r2, #0]
1a003b88:	3301      	adds	r3, #1
1a003b8a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a003b8c:	4b20      	ldr	r3, [pc, #128]	; (1a003c10 <prvAddNewTaskToReadyList+0x94>)
1a003b8e:	681b      	ldr	r3, [r3, #0]
1a003b90:	b15b      	cbz	r3, 1a003baa <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a003b92:	4b20      	ldr	r3, [pc, #128]	; (1a003c14 <prvAddNewTaskToReadyList+0x98>)
1a003b94:	681b      	ldr	r3, [r3, #0]
1a003b96:	b96b      	cbnz	r3, 1a003bb4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a003b98:	4b1d      	ldr	r3, [pc, #116]	; (1a003c10 <prvAddNewTaskToReadyList+0x94>)
1a003b9a:	681b      	ldr	r3, [r3, #0]
1a003b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003b9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003ba0:	429a      	cmp	r2, r3
1a003ba2:	d807      	bhi.n	1a003bb4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a003ba4:	4b1a      	ldr	r3, [pc, #104]	; (1a003c10 <prvAddNewTaskToReadyList+0x94>)
1a003ba6:	601c      	str	r4, [r3, #0]
1a003ba8:	e004      	b.n	1a003bb4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a003baa:	4b19      	ldr	r3, [pc, #100]	; (1a003c10 <prvAddNewTaskToReadyList+0x94>)
1a003bac:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a003bae:	6813      	ldr	r3, [r2, #0]
1a003bb0:	2b01      	cmp	r3, #1
1a003bb2:	d027      	beq.n	1a003c04 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a003bb4:	4a18      	ldr	r2, [pc, #96]	; (1a003c18 <prvAddNewTaskToReadyList+0x9c>)
1a003bb6:	6813      	ldr	r3, [r2, #0]
1a003bb8:	3301      	adds	r3, #1
1a003bba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a003bbc:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a003bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003bc0:	2201      	movs	r2, #1
1a003bc2:	409a      	lsls	r2, r3
1a003bc4:	4915      	ldr	r1, [pc, #84]	; (1a003c1c <prvAddNewTaskToReadyList+0xa0>)
1a003bc6:	6808      	ldr	r0, [r1, #0]
1a003bc8:	4302      	orrs	r2, r0
1a003bca:	600a      	str	r2, [r1, #0]
1a003bcc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003bd0:	009a      	lsls	r2, r3, #2
1a003bd2:	1d21      	adds	r1, r4, #4
1a003bd4:	4812      	ldr	r0, [pc, #72]	; (1a003c20 <prvAddNewTaskToReadyList+0xa4>)
1a003bd6:	4410      	add	r0, r2
1a003bd8:	f7ff fee7 	bl	1a0039aa <vListInsertEnd>
	taskEXIT_CRITICAL();
1a003bdc:	f000 ff64 	bl	1a004aa8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a003be0:	4b0c      	ldr	r3, [pc, #48]	; (1a003c14 <prvAddNewTaskToReadyList+0x98>)
1a003be2:	681b      	ldr	r3, [r3, #0]
1a003be4:	b16b      	cbz	r3, 1a003c02 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a003be6:	4b0a      	ldr	r3, [pc, #40]	; (1a003c10 <prvAddNewTaskToReadyList+0x94>)
1a003be8:	681b      	ldr	r3, [r3, #0]
1a003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a003bee:	429a      	cmp	r2, r3
1a003bf0:	d207      	bcs.n	1a003c02 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a003bf2:	4b0c      	ldr	r3, [pc, #48]	; (1a003c24 <prvAddNewTaskToReadyList+0xa8>)
1a003bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003bf8:	601a      	str	r2, [r3, #0]
1a003bfa:	f3bf 8f4f 	dsb	sy
1a003bfe:	f3bf 8f6f 	isb	sy
}
1a003c02:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a003c04:	f7ff ff86 	bl	1a003b14 <prvInitialiseTaskLists>
1a003c08:	e7d4      	b.n	1a003bb4 <prvAddNewTaskToReadyList+0x38>
1a003c0a:	bf00      	nop
1a003c0c:	10003278 	.word	0x10003278
1a003c10:	100031e0 	.word	0x100031e0
1a003c14:	100032d4 	.word	0x100032d4
1a003c18:	10003288 	.word	0x10003288
1a003c1c:	1000328c 	.word	0x1000328c
1a003c20:	100031ec 	.word	0x100031ec
1a003c24:	e000ed04 	.word	0xe000ed04

1a003c28 <prvDeleteTCB>:
	{
1a003c28:	b510      	push	{r4, lr}
1a003c2a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a003c2c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a003c30:	b933      	cbnz	r3, 1a003c40 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a003c32:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a003c34:	f7ff fb1a 	bl	1a00326c <vPortFree>
				vPortFree( pxTCB );
1a003c38:	4620      	mov	r0, r4
1a003c3a:	f7ff fb17 	bl	1a00326c <vPortFree>
	}
1a003c3e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a003c40:	2b01      	cmp	r3, #1
1a003c42:	d00a      	beq.n	1a003c5a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a003c44:	2b02      	cmp	r3, #2
1a003c46:	d0fa      	beq.n	1a003c3e <prvDeleteTCB+0x16>
1a003c48:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003c4c:	f383 8811 	msr	BASEPRI, r3
1a003c50:	f3bf 8f6f 	isb	sy
1a003c54:	f3bf 8f4f 	dsb	sy
1a003c58:	e7fe      	b.n	1a003c58 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a003c5a:	f7ff fb07 	bl	1a00326c <vPortFree>
1a003c5e:	e7ee      	b.n	1a003c3e <prvDeleteTCB+0x16>

1a003c60 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003c60:	4b0f      	ldr	r3, [pc, #60]	; (1a003ca0 <prvCheckTasksWaitingTermination+0x40>)
1a003c62:	681b      	ldr	r3, [r3, #0]
1a003c64:	b1d3      	cbz	r3, 1a003c9c <prvCheckTasksWaitingTermination+0x3c>
{
1a003c66:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a003c68:	f000 fefc 	bl	1a004a64 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a003c6c:	4b0d      	ldr	r3, [pc, #52]	; (1a003ca4 <prvCheckTasksWaitingTermination+0x44>)
1a003c6e:	68db      	ldr	r3, [r3, #12]
1a003c70:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003c72:	1d20      	adds	r0, r4, #4
1a003c74:	f7ff febf 	bl	1a0039f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a003c78:	4a0b      	ldr	r2, [pc, #44]	; (1a003ca8 <prvCheckTasksWaitingTermination+0x48>)
1a003c7a:	6813      	ldr	r3, [r2, #0]
1a003c7c:	3b01      	subs	r3, #1
1a003c7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a003c80:	4a07      	ldr	r2, [pc, #28]	; (1a003ca0 <prvCheckTasksWaitingTermination+0x40>)
1a003c82:	6813      	ldr	r3, [r2, #0]
1a003c84:	3b01      	subs	r3, #1
1a003c86:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a003c88:	f000 ff0e 	bl	1a004aa8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a003c8c:	4620      	mov	r0, r4
1a003c8e:	f7ff ffcb 	bl	1a003c28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a003c92:	4b03      	ldr	r3, [pc, #12]	; (1a003ca0 <prvCheckTasksWaitingTermination+0x40>)
1a003c94:	681b      	ldr	r3, [r3, #0]
1a003c96:	2b00      	cmp	r3, #0
1a003c98:	d1e6      	bne.n	1a003c68 <prvCheckTasksWaitingTermination+0x8>
}
1a003c9a:	bd10      	pop	{r4, pc}
1a003c9c:	4770      	bx	lr
1a003c9e:	bf00      	nop
1a003ca0:	1000327c 	.word	0x1000327c
1a003ca4:	100032ec 	.word	0x100032ec
1a003ca8:	10003278 	.word	0x10003278

1a003cac <prvIdleTask>:
{
1a003cac:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a003cae:	f7ff ffd7 	bl	1a003c60 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a003cb2:	4b06      	ldr	r3, [pc, #24]	; (1a003ccc <prvIdleTask+0x20>)
1a003cb4:	681b      	ldr	r3, [r3, #0]
1a003cb6:	2b01      	cmp	r3, #1
1a003cb8:	d9f9      	bls.n	1a003cae <prvIdleTask+0x2>
				taskYIELD();
1a003cba:	4b05      	ldr	r3, [pc, #20]	; (1a003cd0 <prvIdleTask+0x24>)
1a003cbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a003cc0:	601a      	str	r2, [r3, #0]
1a003cc2:	f3bf 8f4f 	dsb	sy
1a003cc6:	f3bf 8f6f 	isb	sy
1a003cca:	e7f0      	b.n	1a003cae <prvIdleTask+0x2>
1a003ccc:	100031ec 	.word	0x100031ec
1a003cd0:	e000ed04 	.word	0xe000ed04

1a003cd4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a003cd4:	b570      	push	{r4, r5, r6, lr}
1a003cd6:	4604      	mov	r4, r0
1a003cd8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a003cda:	4b1d      	ldr	r3, [pc, #116]	; (1a003d50 <prvAddCurrentTaskToDelayedList+0x7c>)
1a003cdc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a003cde:	4b1d      	ldr	r3, [pc, #116]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003ce0:	6818      	ldr	r0, [r3, #0]
1a003ce2:	3004      	adds	r0, #4
1a003ce4:	f7ff fe87 	bl	1a0039f6 <uxListRemove>
1a003ce8:	b950      	cbnz	r0, 1a003d00 <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a003cea:	4b1a      	ldr	r3, [pc, #104]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003cec:	681b      	ldr	r3, [r3, #0]
1a003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a003cf0:	2301      	movs	r3, #1
1a003cf2:	fa03 f202 	lsl.w	r2, r3, r2
1a003cf6:	4918      	ldr	r1, [pc, #96]	; (1a003d58 <prvAddCurrentTaskToDelayedList+0x84>)
1a003cf8:	680b      	ldr	r3, [r1, #0]
1a003cfa:	ea23 0302 	bic.w	r3, r3, r2
1a003cfe:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003d00:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a003d04:	d013      	beq.n	1a003d2e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a003d06:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a003d08:	4b12      	ldr	r3, [pc, #72]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003d0a:	681b      	ldr	r3, [r3, #0]
1a003d0c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a003d0e:	42a5      	cmp	r5, r4
1a003d10:	d816      	bhi.n	1a003d40 <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003d12:	4b12      	ldr	r3, [pc, #72]	; (1a003d5c <prvAddCurrentTaskToDelayedList+0x88>)
1a003d14:	6818      	ldr	r0, [r3, #0]
1a003d16:	4b0f      	ldr	r3, [pc, #60]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003d18:	6819      	ldr	r1, [r3, #0]
1a003d1a:	3104      	adds	r1, #4
1a003d1c:	f7ff fe51 	bl	1a0039c2 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a003d20:	4b0f      	ldr	r3, [pc, #60]	; (1a003d60 <prvAddCurrentTaskToDelayedList+0x8c>)
1a003d22:	681b      	ldr	r3, [r3, #0]
1a003d24:	42a3      	cmp	r3, r4
1a003d26:	d912      	bls.n	1a003d4e <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a003d28:	4b0d      	ldr	r3, [pc, #52]	; (1a003d60 <prvAddCurrentTaskToDelayedList+0x8c>)
1a003d2a:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a003d2c:	e00f      	b.n	1a003d4e <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a003d2e:	2e00      	cmp	r6, #0
1a003d30:	d0e9      	beq.n	1a003d06 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003d32:	4b08      	ldr	r3, [pc, #32]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003d34:	6819      	ldr	r1, [r3, #0]
1a003d36:	3104      	adds	r1, #4
1a003d38:	480a      	ldr	r0, [pc, #40]	; (1a003d64 <prvAddCurrentTaskToDelayedList+0x90>)
1a003d3a:	f7ff fe36 	bl	1a0039aa <vListInsertEnd>
1a003d3e:	e006      	b.n	1a003d4e <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a003d40:	4b09      	ldr	r3, [pc, #36]	; (1a003d68 <prvAddCurrentTaskToDelayedList+0x94>)
1a003d42:	6818      	ldr	r0, [r3, #0]
1a003d44:	4b03      	ldr	r3, [pc, #12]	; (1a003d54 <prvAddCurrentTaskToDelayedList+0x80>)
1a003d46:	6819      	ldr	r1, [r3, #0]
1a003d48:	3104      	adds	r1, #4
1a003d4a:	f7ff fe3a 	bl	1a0039c2 <vListInsert>
}
1a003d4e:	bd70      	pop	{r4, r5, r6, pc}
1a003d50:	10003300 	.word	0x10003300
1a003d54:	100031e0 	.word	0x100031e0
1a003d58:	1000328c 	.word	0x1000328c
1a003d5c:	100031e4 	.word	0x100031e4
1a003d60:	100032b8 	.word	0x100032b8
1a003d64:	100032d8 	.word	0x100032d8
1a003d68:	100031e8 	.word	0x100031e8

1a003d6c <xTaskCreateStatic>:
	{
1a003d6c:	b570      	push	{r4, r5, r6, lr}
1a003d6e:	b086      	sub	sp, #24
1a003d70:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a003d72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a003d74:	b945      	cbnz	r5, 1a003d88 <xTaskCreateStatic+0x1c>
1a003d76:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d7a:	f383 8811 	msr	BASEPRI, r3
1a003d7e:	f3bf 8f6f 	isb	sy
1a003d82:	f3bf 8f4f 	dsb	sy
1a003d86:	e7fe      	b.n	1a003d86 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a003d88:	b944      	cbnz	r4, 1a003d9c <xTaskCreateStatic+0x30>
1a003d8a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003d8e:	f383 8811 	msr	BASEPRI, r3
1a003d92:	f3bf 8f6f 	isb	sy
1a003d96:	f3bf 8f4f 	dsb	sy
1a003d9a:	e7fe      	b.n	1a003d9a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a003d9c:	2660      	movs	r6, #96	; 0x60
1a003d9e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a003da0:	9e04      	ldr	r6, [sp, #16]
1a003da2:	2e60      	cmp	r6, #96	; 0x60
1a003da4:	d008      	beq.n	1a003db8 <xTaskCreateStatic+0x4c>
1a003da6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003daa:	f383 8811 	msr	BASEPRI, r3
1a003dae:	f3bf 8f6f 	isb	sy
1a003db2:	f3bf 8f4f 	dsb	sy
1a003db6:	e7fe      	b.n	1a003db6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a003db8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a003dba:	2502      	movs	r5, #2
1a003dbc:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a003dc0:	2500      	movs	r5, #0
1a003dc2:	9503      	str	r5, [sp, #12]
1a003dc4:	9402      	str	r4, [sp, #8]
1a003dc6:	ad05      	add	r5, sp, #20
1a003dc8:	9501      	str	r5, [sp, #4]
1a003dca:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a003dcc:	9500      	str	r5, [sp, #0]
1a003dce:	f7ff fe57 	bl	1a003a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003dd2:	4620      	mov	r0, r4
1a003dd4:	f7ff fed2 	bl	1a003b7c <prvAddNewTaskToReadyList>
	}
1a003dd8:	9805      	ldr	r0, [sp, #20]
1a003dda:	b006      	add	sp, #24
1a003ddc:	bd70      	pop	{r4, r5, r6, pc}

1a003dde <xTaskCreate>:
	{
1a003dde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003de2:	b085      	sub	sp, #20
1a003de4:	4607      	mov	r7, r0
1a003de6:	4688      	mov	r8, r1
1a003de8:	4615      	mov	r5, r2
1a003dea:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003dec:	0090      	lsls	r0, r2, #2
1a003dee:	f7ff f9e3 	bl	1a0031b8 <pvPortMalloc>
			if( pxStack != NULL )
1a003df2:	b308      	cbz	r0, 1a003e38 <xTaskCreate+0x5a>
1a003df4:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a003df6:	2060      	movs	r0, #96	; 0x60
1a003df8:	f7ff f9de 	bl	1a0031b8 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a003dfc:	4604      	mov	r4, r0
1a003dfe:	b1b8      	cbz	r0, 1a003e30 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a003e00:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a003e02:	b1e4      	cbz	r4, 1a003e3e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a003e04:	2300      	movs	r3, #0
1a003e06:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a003e0a:	9303      	str	r3, [sp, #12]
1a003e0c:	9402      	str	r4, [sp, #8]
1a003e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003e10:	9301      	str	r3, [sp, #4]
1a003e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003e14:	9300      	str	r3, [sp, #0]
1a003e16:	464b      	mov	r3, r9
1a003e18:	462a      	mov	r2, r5
1a003e1a:	4641      	mov	r1, r8
1a003e1c:	4638      	mov	r0, r7
1a003e1e:	f7ff fe2f 	bl	1a003a80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a003e22:	4620      	mov	r0, r4
1a003e24:	f7ff feaa 	bl	1a003b7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a003e28:	2001      	movs	r0, #1
	}
1a003e2a:	b005      	add	sp, #20
1a003e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a003e30:	4630      	mov	r0, r6
1a003e32:	f7ff fa1b 	bl	1a00326c <vPortFree>
1a003e36:	e7e4      	b.n	1a003e02 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003e3c:	e7f5      	b.n	1a003e2a <xTaskCreate+0x4c>
1a003e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a003e42:	e7f2      	b.n	1a003e2a <xTaskCreate+0x4c>

1a003e44 <vTaskStartScheduler>:
{
1a003e44:	b510      	push	{r4, lr}
1a003e46:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a003e48:	2400      	movs	r4, #0
1a003e4a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a003e4c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a003e4e:	aa07      	add	r2, sp, #28
1a003e50:	a906      	add	r1, sp, #24
1a003e52:	a805      	add	r0, sp, #20
1a003e54:	f7ff fde4 	bl	1a003a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a003e58:	9b05      	ldr	r3, [sp, #20]
1a003e5a:	9302      	str	r3, [sp, #8]
1a003e5c:	9b06      	ldr	r3, [sp, #24]
1a003e5e:	9301      	str	r3, [sp, #4]
1a003e60:	9400      	str	r4, [sp, #0]
1a003e62:	4623      	mov	r3, r4
1a003e64:	9a07      	ldr	r2, [sp, #28]
1a003e66:	4917      	ldr	r1, [pc, #92]	; (1a003ec4 <vTaskStartScheduler+0x80>)
1a003e68:	4817      	ldr	r0, [pc, #92]	; (1a003ec8 <vTaskStartScheduler+0x84>)
1a003e6a:	f7ff ff7f 	bl	1a003d6c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a003e6e:	b140      	cbz	r0, 1a003e82 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a003e70:	f000 fbbc 	bl	1a0045ec <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a003e74:	2801      	cmp	r0, #1
1a003e76:	d006      	beq.n	1a003e86 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a003e78:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003e7c:	d018      	beq.n	1a003eb0 <vTaskStartScheduler+0x6c>
}
1a003e7e:	b008      	add	sp, #32
1a003e80:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a003e82:	2000      	movs	r0, #0
1a003e84:	e7f6      	b.n	1a003e74 <vTaskStartScheduler+0x30>
1a003e86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003e8a:	f383 8811 	msr	BASEPRI, r3
1a003e8e:	f3bf 8f6f 	isb	sy
1a003e92:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a003e96:	4b0d      	ldr	r3, [pc, #52]	; (1a003ecc <vTaskStartScheduler+0x88>)
1a003e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003e9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a003e9e:	4b0c      	ldr	r3, [pc, #48]	; (1a003ed0 <vTaskStartScheduler+0x8c>)
1a003ea0:	2201      	movs	r2, #1
1a003ea2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a003ea4:	4b0b      	ldr	r3, [pc, #44]	; (1a003ed4 <vTaskStartScheduler+0x90>)
1a003ea6:	2200      	movs	r2, #0
1a003ea8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a003eaa:	f000 fe7d 	bl	1a004ba8 <xPortStartScheduler>
1a003eae:	e7e6      	b.n	1a003e7e <vTaskStartScheduler+0x3a>
1a003eb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003eb4:	f383 8811 	msr	BASEPRI, r3
1a003eb8:	f3bf 8f6f 	isb	sy
1a003ebc:	f3bf 8f4f 	dsb	sy
1a003ec0:	e7fe      	b.n	1a003ec0 <vTaskStartScheduler+0x7c>
1a003ec2:	bf00      	nop
1a003ec4:	1a009a98 	.word	0x1a009a98
1a003ec8:	1a003cad 	.word	0x1a003cad
1a003ecc:	100032b8 	.word	0x100032b8
1a003ed0:	100032d4 	.word	0x100032d4
1a003ed4:	10003300 	.word	0x10003300

1a003ed8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a003ed8:	4a02      	ldr	r2, [pc, #8]	; (1a003ee4 <vTaskSuspendAll+0xc>)
1a003eda:	6813      	ldr	r3, [r2, #0]
1a003edc:	3301      	adds	r3, #1
1a003ede:	6013      	str	r3, [r2, #0]
}
1a003ee0:	4770      	bx	lr
1a003ee2:	bf00      	nop
1a003ee4:	10003284 	.word	0x10003284

1a003ee8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a003ee8:	4b01      	ldr	r3, [pc, #4]	; (1a003ef0 <xTaskGetTickCount+0x8>)
1a003eea:	6818      	ldr	r0, [r3, #0]
}
1a003eec:	4770      	bx	lr
1a003eee:	bf00      	nop
1a003ef0:	10003300 	.word	0x10003300

1a003ef4 <xTaskIncrementTick>:
{
1a003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a003ef6:	4b3a      	ldr	r3, [pc, #232]	; (1a003fe0 <xTaskIncrementTick+0xec>)
1a003ef8:	681b      	ldr	r3, [r3, #0]
1a003efa:	2b00      	cmp	r3, #0
1a003efc:	d164      	bne.n	1a003fc8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a003efe:	4b39      	ldr	r3, [pc, #228]	; (1a003fe4 <xTaskIncrementTick+0xf0>)
1a003f00:	681d      	ldr	r5, [r3, #0]
1a003f02:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a003f04:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a003f06:	b9c5      	cbnz	r5, 1a003f3a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a003f08:	4b37      	ldr	r3, [pc, #220]	; (1a003fe8 <xTaskIncrementTick+0xf4>)
1a003f0a:	681b      	ldr	r3, [r3, #0]
1a003f0c:	681b      	ldr	r3, [r3, #0]
1a003f0e:	b143      	cbz	r3, 1a003f22 <xTaskIncrementTick+0x2e>
1a003f10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a003f14:	f383 8811 	msr	BASEPRI, r3
1a003f18:	f3bf 8f6f 	isb	sy
1a003f1c:	f3bf 8f4f 	dsb	sy
1a003f20:	e7fe      	b.n	1a003f20 <xTaskIncrementTick+0x2c>
1a003f22:	4a31      	ldr	r2, [pc, #196]	; (1a003fe8 <xTaskIncrementTick+0xf4>)
1a003f24:	6811      	ldr	r1, [r2, #0]
1a003f26:	4b31      	ldr	r3, [pc, #196]	; (1a003fec <xTaskIncrementTick+0xf8>)
1a003f28:	6818      	ldr	r0, [r3, #0]
1a003f2a:	6010      	str	r0, [r2, #0]
1a003f2c:	6019      	str	r1, [r3, #0]
1a003f2e:	4a30      	ldr	r2, [pc, #192]	; (1a003ff0 <xTaskIncrementTick+0xfc>)
1a003f30:	6813      	ldr	r3, [r2, #0]
1a003f32:	3301      	adds	r3, #1
1a003f34:	6013      	str	r3, [r2, #0]
1a003f36:	f7ff fd8d 	bl	1a003a54 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a003f3a:	4b2e      	ldr	r3, [pc, #184]	; (1a003ff4 <xTaskIncrementTick+0x100>)
1a003f3c:	681b      	ldr	r3, [r3, #0]
1a003f3e:	42ab      	cmp	r3, r5
1a003f40:	d938      	bls.n	1a003fb4 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a003f42:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a003f44:	4b2c      	ldr	r3, [pc, #176]	; (1a003ff8 <xTaskIncrementTick+0x104>)
1a003f46:	681b      	ldr	r3, [r3, #0]
1a003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003f4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003f4e:	009a      	lsls	r2, r3, #2
1a003f50:	4b2a      	ldr	r3, [pc, #168]	; (1a003ffc <xTaskIncrementTick+0x108>)
1a003f52:	589b      	ldr	r3, [r3, r2]
1a003f54:	2b01      	cmp	r3, #1
1a003f56:	d93c      	bls.n	1a003fd2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a003f58:	2401      	movs	r4, #1
1a003f5a:	e03a      	b.n	1a003fd2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a003f5c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a003f5e:	4b22      	ldr	r3, [pc, #136]	; (1a003fe8 <xTaskIncrementTick+0xf4>)
1a003f60:	681b      	ldr	r3, [r3, #0]
1a003f62:	681b      	ldr	r3, [r3, #0]
1a003f64:	b343      	cbz	r3, 1a003fb8 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a003f66:	4b20      	ldr	r3, [pc, #128]	; (1a003fe8 <xTaskIncrementTick+0xf4>)
1a003f68:	681b      	ldr	r3, [r3, #0]
1a003f6a:	68db      	ldr	r3, [r3, #12]
1a003f6c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a003f6e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a003f70:	429d      	cmp	r5, r3
1a003f72:	d326      	bcc.n	1a003fc2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a003f74:	1d37      	adds	r7, r6, #4
1a003f76:	4638      	mov	r0, r7
1a003f78:	f7ff fd3d 	bl	1a0039f6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a003f7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a003f7e:	b11b      	cbz	r3, 1a003f88 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a003f80:	f106 0018 	add.w	r0, r6, #24
1a003f84:	f7ff fd37 	bl	1a0039f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a003f88:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a003f8a:	2201      	movs	r2, #1
1a003f8c:	409a      	lsls	r2, r3
1a003f8e:	491c      	ldr	r1, [pc, #112]	; (1a004000 <xTaskIncrementTick+0x10c>)
1a003f90:	6808      	ldr	r0, [r1, #0]
1a003f92:	4302      	orrs	r2, r0
1a003f94:	600a      	str	r2, [r1, #0]
1a003f96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a003f9a:	009a      	lsls	r2, r3, #2
1a003f9c:	4639      	mov	r1, r7
1a003f9e:	4817      	ldr	r0, [pc, #92]	; (1a003ffc <xTaskIncrementTick+0x108>)
1a003fa0:	4410      	add	r0, r2
1a003fa2:	f7ff fd02 	bl	1a0039aa <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a003fa6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a003fa8:	4b13      	ldr	r3, [pc, #76]	; (1a003ff8 <xTaskIncrementTick+0x104>)
1a003faa:	681b      	ldr	r3, [r3, #0]
1a003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a003fae:	429a      	cmp	r2, r3
1a003fb0:	d2d4      	bcs.n	1a003f5c <xTaskIncrementTick+0x68>
1a003fb2:	e7d4      	b.n	1a003f5e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a003fb4:	2400      	movs	r4, #0
1a003fb6:	e7d2      	b.n	1a003f5e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a003fb8:	4b0e      	ldr	r3, [pc, #56]	; (1a003ff4 <xTaskIncrementTick+0x100>)
1a003fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a003fbe:	601a      	str	r2, [r3, #0]
					break;
1a003fc0:	e7c0      	b.n	1a003f44 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a003fc2:	4a0c      	ldr	r2, [pc, #48]	; (1a003ff4 <xTaskIncrementTick+0x100>)
1a003fc4:	6013      	str	r3, [r2, #0]
						break;
1a003fc6:	e7bd      	b.n	1a003f44 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a003fc8:	4a0e      	ldr	r2, [pc, #56]	; (1a004004 <xTaskIncrementTick+0x110>)
1a003fca:	6813      	ldr	r3, [r2, #0]
1a003fcc:	3301      	adds	r3, #1
1a003fce:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a003fd0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a003fd2:	4b0d      	ldr	r3, [pc, #52]	; (1a004008 <xTaskIncrementTick+0x114>)
1a003fd4:	681b      	ldr	r3, [r3, #0]
1a003fd6:	b103      	cbz	r3, 1a003fda <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a003fd8:	2401      	movs	r4, #1
}
1a003fda:	4620      	mov	r0, r4
1a003fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003fde:	bf00      	nop
1a003fe0:	10003284 	.word	0x10003284
1a003fe4:	10003300 	.word	0x10003300
1a003fe8:	100031e4 	.word	0x100031e4
1a003fec:	100031e8 	.word	0x100031e8
1a003ff0:	100032bc 	.word	0x100032bc
1a003ff4:	100032b8 	.word	0x100032b8
1a003ff8:	100031e0 	.word	0x100031e0
1a003ffc:	100031ec 	.word	0x100031ec
1a004000:	1000328c 	.word	0x1000328c
1a004004:	10003280 	.word	0x10003280
1a004008:	10003304 	.word	0x10003304

1a00400c <xTaskResumeAll>:
{
1a00400c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a00400e:	4b33      	ldr	r3, [pc, #204]	; (1a0040dc <xTaskResumeAll+0xd0>)
1a004010:	681b      	ldr	r3, [r3, #0]
1a004012:	b943      	cbnz	r3, 1a004026 <xTaskResumeAll+0x1a>
1a004014:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004018:	f383 8811 	msr	BASEPRI, r3
1a00401c:	f3bf 8f6f 	isb	sy
1a004020:	f3bf 8f4f 	dsb	sy
1a004024:	e7fe      	b.n	1a004024 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a004026:	f000 fd1d 	bl	1a004a64 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00402a:	4b2c      	ldr	r3, [pc, #176]	; (1a0040dc <xTaskResumeAll+0xd0>)
1a00402c:	681a      	ldr	r2, [r3, #0]
1a00402e:	3a01      	subs	r2, #1
1a004030:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a004032:	681b      	ldr	r3, [r3, #0]
1a004034:	2b00      	cmp	r3, #0
1a004036:	d14d      	bne.n	1a0040d4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a004038:	4b29      	ldr	r3, [pc, #164]	; (1a0040e0 <xTaskResumeAll+0xd4>)
1a00403a:	681b      	ldr	r3, [r3, #0]
1a00403c:	b923      	cbnz	r3, 1a004048 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00403e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a004040:	f000 fd32 	bl	1a004aa8 <vPortExitCritical>
}
1a004044:	4620      	mov	r0, r4
1a004046:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a004048:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00404a:	4b26      	ldr	r3, [pc, #152]	; (1a0040e4 <xTaskResumeAll+0xd8>)
1a00404c:	681b      	ldr	r3, [r3, #0]
1a00404e:	b31b      	cbz	r3, 1a004098 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a004050:	4b24      	ldr	r3, [pc, #144]	; (1a0040e4 <xTaskResumeAll+0xd8>)
1a004052:	68db      	ldr	r3, [r3, #12]
1a004054:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a004056:	f104 0018 	add.w	r0, r4, #24
1a00405a:	f7ff fccc 	bl	1a0039f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00405e:	1d25      	adds	r5, r4, #4
1a004060:	4628      	mov	r0, r5
1a004062:	f7ff fcc8 	bl	1a0039f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a004066:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004068:	2201      	movs	r2, #1
1a00406a:	409a      	lsls	r2, r3
1a00406c:	491e      	ldr	r1, [pc, #120]	; (1a0040e8 <xTaskResumeAll+0xdc>)
1a00406e:	6808      	ldr	r0, [r1, #0]
1a004070:	4302      	orrs	r2, r0
1a004072:	600a      	str	r2, [r1, #0]
1a004074:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004078:	009a      	lsls	r2, r3, #2
1a00407a:	4629      	mov	r1, r5
1a00407c:	481b      	ldr	r0, [pc, #108]	; (1a0040ec <xTaskResumeAll+0xe0>)
1a00407e:	4410      	add	r0, r2
1a004080:	f7ff fc93 	bl	1a0039aa <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a004084:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004086:	4b1a      	ldr	r3, [pc, #104]	; (1a0040f0 <xTaskResumeAll+0xe4>)
1a004088:	681b      	ldr	r3, [r3, #0]
1a00408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00408c:	429a      	cmp	r2, r3
1a00408e:	d3dc      	bcc.n	1a00404a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a004090:	4b18      	ldr	r3, [pc, #96]	; (1a0040f4 <xTaskResumeAll+0xe8>)
1a004092:	2201      	movs	r2, #1
1a004094:	601a      	str	r2, [r3, #0]
1a004096:	e7d8      	b.n	1a00404a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a004098:	b10c      	cbz	r4, 1a00409e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00409a:	f7ff fcdb 	bl	1a003a54 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00409e:	4b16      	ldr	r3, [pc, #88]	; (1a0040f8 <xTaskResumeAll+0xec>)
1a0040a0:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a0040a2:	b154      	cbz	r4, 1a0040ba <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a0040a4:	f7ff ff26 	bl	1a003ef4 <xTaskIncrementTick>
1a0040a8:	b110      	cbz	r0, 1a0040b0 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a0040aa:	4b12      	ldr	r3, [pc, #72]	; (1a0040f4 <xTaskResumeAll+0xe8>)
1a0040ac:	2201      	movs	r2, #1
1a0040ae:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a0040b0:	3c01      	subs	r4, #1
1a0040b2:	d1f7      	bne.n	1a0040a4 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a0040b4:	4b10      	ldr	r3, [pc, #64]	; (1a0040f8 <xTaskResumeAll+0xec>)
1a0040b6:	2200      	movs	r2, #0
1a0040b8:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a0040ba:	4b0e      	ldr	r3, [pc, #56]	; (1a0040f4 <xTaskResumeAll+0xe8>)
1a0040bc:	681b      	ldr	r3, [r3, #0]
1a0040be:	b15b      	cbz	r3, 1a0040d8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0040c0:	4b0e      	ldr	r3, [pc, #56]	; (1a0040fc <xTaskResumeAll+0xf0>)
1a0040c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0040c6:	601a      	str	r2, [r3, #0]
1a0040c8:	f3bf 8f4f 	dsb	sy
1a0040cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0040d0:	2401      	movs	r4, #1
1a0040d2:	e7b5      	b.n	1a004040 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0040d4:	2400      	movs	r4, #0
1a0040d6:	e7b3      	b.n	1a004040 <xTaskResumeAll+0x34>
1a0040d8:	2400      	movs	r4, #0
1a0040da:	e7b1      	b.n	1a004040 <xTaskResumeAll+0x34>
1a0040dc:	10003284 	.word	0x10003284
1a0040e0:	10003278 	.word	0x10003278
1a0040e4:	100032c0 	.word	0x100032c0
1a0040e8:	1000328c 	.word	0x1000328c
1a0040ec:	100031ec 	.word	0x100031ec
1a0040f0:	100031e0 	.word	0x100031e0
1a0040f4:	10003304 	.word	0x10003304
1a0040f8:	10003280 	.word	0x10003280
1a0040fc:	e000ed04 	.word	0xe000ed04

1a004100 <vTaskDelayUntil>:
	{
1a004100:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
1a004102:	b150      	cbz	r0, 1a00411a <vTaskDelayUntil+0x1a>
1a004104:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
1a004106:	b989      	cbnz	r1, 1a00412c <vTaskDelayUntil+0x2c>
1a004108:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00410c:	f383 8811 	msr	BASEPRI, r3
1a004110:	f3bf 8f6f 	isb	sy
1a004114:	f3bf 8f4f 	dsb	sy
1a004118:	e7fe      	b.n	1a004118 <vTaskDelayUntil+0x18>
1a00411a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00411e:	f383 8811 	msr	BASEPRI, r3
1a004122:	f3bf 8f6f 	isb	sy
1a004126:	f3bf 8f4f 	dsb	sy
1a00412a:	e7fe      	b.n	1a00412a <vTaskDelayUntil+0x2a>
		configASSERT( uxSchedulerSuspended == 0 );
1a00412c:	4b1a      	ldr	r3, [pc, #104]	; (1a004198 <vTaskDelayUntil+0x98>)
1a00412e:	681b      	ldr	r3, [r3, #0]
1a004130:	b143      	cbz	r3, 1a004144 <vTaskDelayUntil+0x44>
1a004132:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004136:	f383 8811 	msr	BASEPRI, r3
1a00413a:	f3bf 8f6f 	isb	sy
1a00413e:	f3bf 8f4f 	dsb	sy
1a004142:	e7fe      	b.n	1a004142 <vTaskDelayUntil+0x42>
1a004144:	460c      	mov	r4, r1
		vTaskSuspendAll();
1a004146:	f7ff fec7 	bl	1a003ed8 <vTaskSuspendAll>
			const TickType_t xConstTickCount = xTickCount;
1a00414a:	4b14      	ldr	r3, [pc, #80]	; (1a00419c <vTaskDelayUntil+0x9c>)
1a00414c:	6818      	ldr	r0, [r3, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1a00414e:	682a      	ldr	r2, [r5, #0]
1a004150:	4414      	add	r4, r2
			if( xConstTickCount < *pxPreviousWakeTime )
1a004152:	4282      	cmp	r2, r0
1a004154:	d918      	bls.n	1a004188 <vTaskDelayUntil+0x88>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a004156:	42a2      	cmp	r2, r4
1a004158:	d80c      	bhi.n	1a004174 <vTaskDelayUntil+0x74>
			*pxPreviousWakeTime = xTimeToWake;
1a00415a:	602c      	str	r4, [r5, #0]
		xAlreadyYielded = xTaskResumeAll();
1a00415c:	f7ff ff56 	bl	1a00400c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a004160:	b938      	cbnz	r0, 1a004172 <vTaskDelayUntil+0x72>
			portYIELD_WITHIN_API();
1a004162:	4b0f      	ldr	r3, [pc, #60]	; (1a0041a0 <vTaskDelayUntil+0xa0>)
1a004164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004168:	601a      	str	r2, [r3, #0]
1a00416a:	f3bf 8f4f 	dsb	sy
1a00416e:	f3bf 8f6f 	isb	sy
	}
1a004172:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1a004174:	42a0      	cmp	r0, r4
1a004176:	d301      	bcc.n	1a00417c <vTaskDelayUntil+0x7c>
			*pxPreviousWakeTime = xTimeToWake;
1a004178:	602c      	str	r4, [r5, #0]
1a00417a:	e7ef      	b.n	1a00415c <vTaskDelayUntil+0x5c>
1a00417c:	602c      	str	r4, [r5, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1a00417e:	2100      	movs	r1, #0
1a004180:	1a20      	subs	r0, r4, r0
1a004182:	f7ff fda7 	bl	1a003cd4 <prvAddCurrentTaskToDelayedList>
1a004186:	e7e9      	b.n	1a00415c <vTaskDelayUntil+0x5c>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1a004188:	42a2      	cmp	r2, r4
1a00418a:	d801      	bhi.n	1a004190 <vTaskDelayUntil+0x90>
1a00418c:	42a0      	cmp	r0, r4
1a00418e:	d201      	bcs.n	1a004194 <vTaskDelayUntil+0x94>
			*pxPreviousWakeTime = xTimeToWake;
1a004190:	602c      	str	r4, [r5, #0]
1a004192:	e7f4      	b.n	1a00417e <vTaskDelayUntil+0x7e>
1a004194:	602c      	str	r4, [r5, #0]
1a004196:	e7e1      	b.n	1a00415c <vTaskDelayUntil+0x5c>
1a004198:	10003284 	.word	0x10003284
1a00419c:	10003300 	.word	0x10003300
1a0041a0:	e000ed04 	.word	0xe000ed04

1a0041a4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a0041a4:	4b2c      	ldr	r3, [pc, #176]	; (1a004258 <vTaskSwitchContext+0xb4>)
1a0041a6:	681b      	ldr	r3, [r3, #0]
1a0041a8:	b11b      	cbz	r3, 1a0041b2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a0041aa:	4b2c      	ldr	r3, [pc, #176]	; (1a00425c <vTaskSwitchContext+0xb8>)
1a0041ac:	2201      	movs	r2, #1
1a0041ae:	601a      	str	r2, [r3, #0]
1a0041b0:	4770      	bx	lr
{
1a0041b2:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a0041b4:	4b29      	ldr	r3, [pc, #164]	; (1a00425c <vTaskSwitchContext+0xb8>)
1a0041b6:	2200      	movs	r2, #0
1a0041b8:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a0041ba:	4b29      	ldr	r3, [pc, #164]	; (1a004260 <vTaskSwitchContext+0xbc>)
1a0041bc:	681b      	ldr	r3, [r3, #0]
1a0041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a0041c0:	681a      	ldr	r2, [r3, #0]
1a0041c2:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0041c6:	d103      	bne.n	1a0041d0 <vTaskSwitchContext+0x2c>
1a0041c8:	685a      	ldr	r2, [r3, #4]
1a0041ca:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a0041ce:	d01b      	beq.n	1a004208 <vTaskSwitchContext+0x64>
1a0041d0:	4b23      	ldr	r3, [pc, #140]	; (1a004260 <vTaskSwitchContext+0xbc>)
1a0041d2:	6818      	ldr	r0, [r3, #0]
1a0041d4:	6819      	ldr	r1, [r3, #0]
1a0041d6:	3134      	adds	r1, #52	; 0x34
1a0041d8:	f7ff fc3a 	bl	1a003a50 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0041dc:	4b21      	ldr	r3, [pc, #132]	; (1a004264 <vTaskSwitchContext+0xc0>)
1a0041de:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a0041e0:	fab3 f383 	clz	r3, r3
1a0041e4:	b2db      	uxtb	r3, r3
1a0041e6:	f1c3 031f 	rsb	r3, r3, #31
1a0041ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a0041ee:	008a      	lsls	r2, r1, #2
1a0041f0:	491d      	ldr	r1, [pc, #116]	; (1a004268 <vTaskSwitchContext+0xc4>)
1a0041f2:	588a      	ldr	r2, [r1, r2]
1a0041f4:	b98a      	cbnz	r2, 1a00421a <vTaskSwitchContext+0x76>
	__asm volatile
1a0041f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0041fa:	f383 8811 	msr	BASEPRI, r3
1a0041fe:	f3bf 8f6f 	isb	sy
1a004202:	f3bf 8f4f 	dsb	sy
1a004206:	e7fe      	b.n	1a004206 <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a004208:	689a      	ldr	r2, [r3, #8]
1a00420a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00420e:	d1df      	bne.n	1a0041d0 <vTaskSwitchContext+0x2c>
1a004210:	68db      	ldr	r3, [r3, #12]
1a004212:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a004216:	d1db      	bne.n	1a0041d0 <vTaskSwitchContext+0x2c>
1a004218:	e7e0      	b.n	1a0041dc <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00421a:	4813      	ldr	r0, [pc, #76]	; (1a004268 <vTaskSwitchContext+0xc4>)
1a00421c:	009a      	lsls	r2, r3, #2
1a00421e:	18d4      	adds	r4, r2, r3
1a004220:	00a1      	lsls	r1, r4, #2
1a004222:	4401      	add	r1, r0
1a004224:	684c      	ldr	r4, [r1, #4]
1a004226:	6864      	ldr	r4, [r4, #4]
1a004228:	604c      	str	r4, [r1, #4]
1a00422a:	441a      	add	r2, r3
1a00422c:	0091      	lsls	r1, r2, #2
1a00422e:	3108      	adds	r1, #8
1a004230:	4408      	add	r0, r1
1a004232:	4284      	cmp	r4, r0
1a004234:	d009      	beq.n	1a00424a <vTaskSwitchContext+0xa6>
1a004236:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00423a:	009a      	lsls	r2, r3, #2
1a00423c:	4b0a      	ldr	r3, [pc, #40]	; (1a004268 <vTaskSwitchContext+0xc4>)
1a00423e:	4413      	add	r3, r2
1a004240:	685b      	ldr	r3, [r3, #4]
1a004242:	68da      	ldr	r2, [r3, #12]
1a004244:	4b06      	ldr	r3, [pc, #24]	; (1a004260 <vTaskSwitchContext+0xbc>)
1a004246:	601a      	str	r2, [r3, #0]
}
1a004248:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a00424a:	6861      	ldr	r1, [r4, #4]
1a00424c:	4806      	ldr	r0, [pc, #24]	; (1a004268 <vTaskSwitchContext+0xc4>)
1a00424e:	2214      	movs	r2, #20
1a004250:	fb02 0203 	mla	r2, r2, r3, r0
1a004254:	6051      	str	r1, [r2, #4]
1a004256:	e7ee      	b.n	1a004236 <vTaskSwitchContext+0x92>
1a004258:	10003284 	.word	0x10003284
1a00425c:	10003304 	.word	0x10003304
1a004260:	100031e0 	.word	0x100031e0
1a004264:	1000328c 	.word	0x1000328c
1a004268:	100031ec 	.word	0x100031ec

1a00426c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a00426c:	b940      	cbnz	r0, 1a004280 <vTaskPlaceOnEventList+0x14>
1a00426e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004272:	f383 8811 	msr	BASEPRI, r3
1a004276:	f3bf 8f6f 	isb	sy
1a00427a:	f3bf 8f4f 	dsb	sy
1a00427e:	e7fe      	b.n	1a00427e <vTaskPlaceOnEventList+0x12>
{
1a004280:	b510      	push	{r4, lr}
1a004282:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a004284:	4b04      	ldr	r3, [pc, #16]	; (1a004298 <vTaskPlaceOnEventList+0x2c>)
1a004286:	6819      	ldr	r1, [r3, #0]
1a004288:	3118      	adds	r1, #24
1a00428a:	f7ff fb9a 	bl	1a0039c2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a00428e:	2101      	movs	r1, #1
1a004290:	4620      	mov	r0, r4
1a004292:	f7ff fd1f 	bl	1a003cd4 <prvAddCurrentTaskToDelayedList>
}
1a004296:	bd10      	pop	{r4, pc}
1a004298:	100031e0 	.word	0x100031e0

1a00429c <vTaskPlaceOnEventListRestricted>:
	{
1a00429c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a00429e:	b940      	cbnz	r0, 1a0042b2 <vTaskPlaceOnEventListRestricted+0x16>
1a0042a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0042a4:	f383 8811 	msr	BASEPRI, r3
1a0042a8:	f3bf 8f6f 	isb	sy
1a0042ac:	f3bf 8f4f 	dsb	sy
1a0042b0:	e7fe      	b.n	1a0042b0 <vTaskPlaceOnEventListRestricted+0x14>
1a0042b2:	460c      	mov	r4, r1
1a0042b4:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a0042b6:	4a06      	ldr	r2, [pc, #24]	; (1a0042d0 <vTaskPlaceOnEventListRestricted+0x34>)
1a0042b8:	6811      	ldr	r1, [r2, #0]
1a0042ba:	3118      	adds	r1, #24
1a0042bc:	f7ff fb75 	bl	1a0039aa <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a0042c0:	b10d      	cbz	r5, 1a0042c6 <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a0042c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a0042c6:	4629      	mov	r1, r5
1a0042c8:	4620      	mov	r0, r4
1a0042ca:	f7ff fd03 	bl	1a003cd4 <prvAddCurrentTaskToDelayedList>
	}
1a0042ce:	bd38      	pop	{r3, r4, r5, pc}
1a0042d0:	100031e0 	.word	0x100031e0

1a0042d4 <xTaskRemoveFromEventList>:
{
1a0042d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a0042d6:	68c3      	ldr	r3, [r0, #12]
1a0042d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a0042da:	b944      	cbnz	r4, 1a0042ee <xTaskRemoveFromEventList+0x1a>
1a0042dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0042e0:	f383 8811 	msr	BASEPRI, r3
1a0042e4:	f3bf 8f6f 	isb	sy
1a0042e8:	f3bf 8f4f 	dsb	sy
1a0042ec:	e7fe      	b.n	1a0042ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a0042ee:	f104 0518 	add.w	r5, r4, #24
1a0042f2:	4628      	mov	r0, r5
1a0042f4:	f7ff fb7f 	bl	1a0039f6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a0042f8:	4b13      	ldr	r3, [pc, #76]	; (1a004348 <xTaskRemoveFromEventList+0x74>)
1a0042fa:	681b      	ldr	r3, [r3, #0]
1a0042fc:	b9e3      	cbnz	r3, 1a004338 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a0042fe:	1d25      	adds	r5, r4, #4
1a004300:	4628      	mov	r0, r5
1a004302:	f7ff fb78 	bl	1a0039f6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a004306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a004308:	2201      	movs	r2, #1
1a00430a:	409a      	lsls	r2, r3
1a00430c:	490f      	ldr	r1, [pc, #60]	; (1a00434c <xTaskRemoveFromEventList+0x78>)
1a00430e:	6808      	ldr	r0, [r1, #0]
1a004310:	4302      	orrs	r2, r0
1a004312:	600a      	str	r2, [r1, #0]
1a004314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a004318:	009a      	lsls	r2, r3, #2
1a00431a:	4629      	mov	r1, r5
1a00431c:	480c      	ldr	r0, [pc, #48]	; (1a004350 <xTaskRemoveFromEventList+0x7c>)
1a00431e:	4410      	add	r0, r2
1a004320:	f7ff fb43 	bl	1a0039aa <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a004324:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004326:	4b0b      	ldr	r3, [pc, #44]	; (1a004354 <xTaskRemoveFromEventList+0x80>)
1a004328:	681b      	ldr	r3, [r3, #0]
1a00432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00432c:	429a      	cmp	r2, r3
1a00432e:	d908      	bls.n	1a004342 <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a004330:	2001      	movs	r0, #1
1a004332:	4b09      	ldr	r3, [pc, #36]	; (1a004358 <xTaskRemoveFromEventList+0x84>)
1a004334:	6018      	str	r0, [r3, #0]
}
1a004336:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a004338:	4629      	mov	r1, r5
1a00433a:	4808      	ldr	r0, [pc, #32]	; (1a00435c <xTaskRemoveFromEventList+0x88>)
1a00433c:	f7ff fb35 	bl	1a0039aa <vListInsertEnd>
1a004340:	e7f0      	b.n	1a004324 <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a004342:	2000      	movs	r0, #0
	return xReturn;
1a004344:	e7f7      	b.n	1a004336 <xTaskRemoveFromEventList+0x62>
1a004346:	bf00      	nop
1a004348:	10003284 	.word	0x10003284
1a00434c:	1000328c 	.word	0x1000328c
1a004350:	100031ec 	.word	0x100031ec
1a004354:	100031e0 	.word	0x100031e0
1a004358:	10003304 	.word	0x10003304
1a00435c:	100032c0 	.word	0x100032c0

1a004360 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a004360:	4b03      	ldr	r3, [pc, #12]	; (1a004370 <vTaskInternalSetTimeOutState+0x10>)
1a004362:	681b      	ldr	r3, [r3, #0]
1a004364:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a004366:	4b03      	ldr	r3, [pc, #12]	; (1a004374 <vTaskInternalSetTimeOutState+0x14>)
1a004368:	681b      	ldr	r3, [r3, #0]
1a00436a:	6043      	str	r3, [r0, #4]
}
1a00436c:	4770      	bx	lr
1a00436e:	bf00      	nop
1a004370:	100032bc 	.word	0x100032bc
1a004374:	10003300 	.word	0x10003300

1a004378 <xTaskCheckForTimeOut>:
{
1a004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a00437a:	b150      	cbz	r0, 1a004392 <xTaskCheckForTimeOut+0x1a>
1a00437c:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a00437e:	b989      	cbnz	r1, 1a0043a4 <xTaskCheckForTimeOut+0x2c>
1a004380:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004384:	f383 8811 	msr	BASEPRI, r3
1a004388:	f3bf 8f6f 	isb	sy
1a00438c:	f3bf 8f4f 	dsb	sy
1a004390:	e7fe      	b.n	1a004390 <xTaskCheckForTimeOut+0x18>
1a004392:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004396:	f383 8811 	msr	BASEPRI, r3
1a00439a:	f3bf 8f6f 	isb	sy
1a00439e:	f3bf 8f4f 	dsb	sy
1a0043a2:	e7fe      	b.n	1a0043a2 <xTaskCheckForTimeOut+0x2a>
1a0043a4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a0043a6:	f000 fb5d 	bl	1a004a64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a0043aa:	4b11      	ldr	r3, [pc, #68]	; (1a0043f0 <xTaskCheckForTimeOut+0x78>)
1a0043ac:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a0043ae:	6868      	ldr	r0, [r5, #4]
1a0043b0:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a0043b2:	6823      	ldr	r3, [r4, #0]
1a0043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0043b8:	d016      	beq.n	1a0043e8 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a0043ba:	682f      	ldr	r7, [r5, #0]
1a0043bc:	4e0d      	ldr	r6, [pc, #52]	; (1a0043f4 <xTaskCheckForTimeOut+0x7c>)
1a0043be:	6836      	ldr	r6, [r6, #0]
1a0043c0:	42b7      	cmp	r7, r6
1a0043c2:	d001      	beq.n	1a0043c8 <xTaskCheckForTimeOut+0x50>
1a0043c4:	4288      	cmp	r0, r1
1a0043c6:	d911      	bls.n	1a0043ec <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a0043c8:	4293      	cmp	r3, r2
1a0043ca:	d803      	bhi.n	1a0043d4 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a0043cc:	2300      	movs	r3, #0
1a0043ce:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a0043d0:	2401      	movs	r4, #1
1a0043d2:	e005      	b.n	1a0043e0 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a0043d4:	1a9b      	subs	r3, r3, r2
1a0043d6:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a0043d8:	4628      	mov	r0, r5
1a0043da:	f7ff ffc1 	bl	1a004360 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a0043de:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a0043e0:	f000 fb62 	bl	1a004aa8 <vPortExitCritical>
}
1a0043e4:	4620      	mov	r0, r4
1a0043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a0043e8:	2400      	movs	r4, #0
1a0043ea:	e7f9      	b.n	1a0043e0 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a0043ec:	2401      	movs	r4, #1
1a0043ee:	e7f7      	b.n	1a0043e0 <xTaskCheckForTimeOut+0x68>
1a0043f0:	10003300 	.word	0x10003300
1a0043f4:	100032bc 	.word	0x100032bc

1a0043f8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a0043f8:	4b01      	ldr	r3, [pc, #4]	; (1a004400 <vTaskMissedYield+0x8>)
1a0043fa:	2201      	movs	r2, #1
1a0043fc:	601a      	str	r2, [r3, #0]
}
1a0043fe:	4770      	bx	lr
1a004400:	10003304 	.word	0x10003304

1a004404 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a004404:	4b05      	ldr	r3, [pc, #20]	; (1a00441c <xTaskGetSchedulerState+0x18>)
1a004406:	681b      	ldr	r3, [r3, #0]
1a004408:	b133      	cbz	r3, 1a004418 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a00440a:	4b05      	ldr	r3, [pc, #20]	; (1a004420 <xTaskGetSchedulerState+0x1c>)
1a00440c:	681b      	ldr	r3, [r3, #0]
1a00440e:	b10b      	cbz	r3, 1a004414 <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a004410:	2000      	movs	r0, #0
	}
1a004412:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a004414:	2002      	movs	r0, #2
1a004416:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a004418:	2001      	movs	r0, #1
1a00441a:	4770      	bx	lr
1a00441c:	100032d4 	.word	0x100032d4
1a004420:	10003284 	.word	0x10003284

1a004424 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a004424:	2800      	cmp	r0, #0
1a004426:	d049      	beq.n	1a0044bc <xTaskPriorityDisinherit+0x98>
	{
1a004428:	b538      	push	{r3, r4, r5, lr}
1a00442a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a00442c:	4a26      	ldr	r2, [pc, #152]	; (1a0044c8 <xTaskPriorityDisinherit+0xa4>)
1a00442e:	6812      	ldr	r2, [r2, #0]
1a004430:	4282      	cmp	r2, r0
1a004432:	d008      	beq.n	1a004446 <xTaskPriorityDisinherit+0x22>
1a004434:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004438:	f383 8811 	msr	BASEPRI, r3
1a00443c:	f3bf 8f6f 	isb	sy
1a004440:	f3bf 8f4f 	dsb	sy
1a004444:	e7fe      	b.n	1a004444 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a004446:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a004448:	b942      	cbnz	r2, 1a00445c <xTaskPriorityDisinherit+0x38>
1a00444a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00444e:	f383 8811 	msr	BASEPRI, r3
1a004452:	f3bf 8f6f 	isb	sy
1a004456:	f3bf 8f4f 	dsb	sy
1a00445a:	e7fe      	b.n	1a00445a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a00445c:	3a01      	subs	r2, #1
1a00445e:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a004460:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a004462:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a004464:	4288      	cmp	r0, r1
1a004466:	d02b      	beq.n	1a0044c0 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a004468:	bb62      	cbnz	r2, 1a0044c4 <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a00446a:	1d25      	adds	r5, r4, #4
1a00446c:	4628      	mov	r0, r5
1a00446e:	f7ff fac2 	bl	1a0039f6 <uxListRemove>
1a004472:	b970      	cbnz	r0, 1a004492 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a004474:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a004476:	2314      	movs	r3, #20
1a004478:	fb03 f302 	mul.w	r3, r3, r2
1a00447c:	4913      	ldr	r1, [pc, #76]	; (1a0044cc <xTaskPriorityDisinherit+0xa8>)
1a00447e:	58cb      	ldr	r3, [r1, r3]
1a004480:	b93b      	cbnz	r3, 1a004492 <xTaskPriorityDisinherit+0x6e>
1a004482:	2301      	movs	r3, #1
1a004484:	fa03 f202 	lsl.w	r2, r3, r2
1a004488:	4911      	ldr	r1, [pc, #68]	; (1a0044d0 <xTaskPriorityDisinherit+0xac>)
1a00448a:	680b      	ldr	r3, [r1, #0]
1a00448c:	ea23 0302 	bic.w	r3, r3, r2
1a004490:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a004492:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a004494:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a004496:	f1c3 0207 	rsb	r2, r3, #7
1a00449a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a00449c:	2401      	movs	r4, #1
1a00449e:	fa04 f203 	lsl.w	r2, r4, r3
1a0044a2:	490b      	ldr	r1, [pc, #44]	; (1a0044d0 <xTaskPriorityDisinherit+0xac>)
1a0044a4:	6808      	ldr	r0, [r1, #0]
1a0044a6:	4302      	orrs	r2, r0
1a0044a8:	600a      	str	r2, [r1, #0]
1a0044aa:	4629      	mov	r1, r5
1a0044ac:	4a07      	ldr	r2, [pc, #28]	; (1a0044cc <xTaskPriorityDisinherit+0xa8>)
1a0044ae:	2014      	movs	r0, #20
1a0044b0:	fb00 2003 	mla	r0, r0, r3, r2
1a0044b4:	f7ff fa79 	bl	1a0039aa <vListInsertEnd>
					xReturn = pdTRUE;
1a0044b8:	4620      	mov	r0, r4
	}
1a0044ba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a0044bc:	2000      	movs	r0, #0
	}
1a0044be:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a0044c0:	2000      	movs	r0, #0
1a0044c2:	e7fa      	b.n	1a0044ba <xTaskPriorityDisinherit+0x96>
1a0044c4:	2000      	movs	r0, #0
		return xReturn;
1a0044c6:	e7f8      	b.n	1a0044ba <xTaskPriorityDisinherit+0x96>
1a0044c8:	100031e0 	.word	0x100031e0
1a0044cc:	100031ec 	.word	0x100031ec
1a0044d0:	1000328c 	.word	0x1000328c

1a0044d4 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a0044d4:	4b06      	ldr	r3, [pc, #24]	; (1a0044f0 <prvGetNextExpireTime+0x1c>)
1a0044d6:	681a      	ldr	r2, [r3, #0]
1a0044d8:	6813      	ldr	r3, [r2, #0]
1a0044da:	fab3 f383 	clz	r3, r3
1a0044de:	095b      	lsrs	r3, r3, #5
1a0044e0:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a0044e2:	b913      	cbnz	r3, 1a0044ea <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0044e4:	68d3      	ldr	r3, [r2, #12]
1a0044e6:	6818      	ldr	r0, [r3, #0]
1a0044e8:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a0044ea:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a0044ec:	4770      	bx	lr
1a0044ee:	bf00      	nop
1a0044f0:	10003308 	.word	0x10003308

1a0044f4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a0044f4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a0044f6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a0044f8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a0044fa:	4291      	cmp	r1, r2
1a0044fc:	d80c      	bhi.n	1a004518 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a0044fe:	1ad2      	subs	r2, r2, r3
1a004500:	6983      	ldr	r3, [r0, #24]
1a004502:	429a      	cmp	r2, r3
1a004504:	d301      	bcc.n	1a00450a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a004506:	2001      	movs	r0, #1
1a004508:	e010      	b.n	1a00452c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a00450a:	1d01      	adds	r1, r0, #4
1a00450c:	4b09      	ldr	r3, [pc, #36]	; (1a004534 <prvInsertTimerInActiveList+0x40>)
1a00450e:	6818      	ldr	r0, [r3, #0]
1a004510:	f7ff fa57 	bl	1a0039c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a004514:	2000      	movs	r0, #0
1a004516:	e009      	b.n	1a00452c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a004518:	429a      	cmp	r2, r3
1a00451a:	d201      	bcs.n	1a004520 <prvInsertTimerInActiveList+0x2c>
1a00451c:	4299      	cmp	r1, r3
1a00451e:	d206      	bcs.n	1a00452e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a004520:	1d01      	adds	r1, r0, #4
1a004522:	4b05      	ldr	r3, [pc, #20]	; (1a004538 <prvInsertTimerInActiveList+0x44>)
1a004524:	6818      	ldr	r0, [r3, #0]
1a004526:	f7ff fa4c 	bl	1a0039c2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00452a:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a00452c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a00452e:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a004530:	e7fc      	b.n	1a00452c <prvInsertTimerInActiveList+0x38>
1a004532:	bf00      	nop
1a004534:	1000330c 	.word	0x1000330c
1a004538:	10003308 	.word	0x10003308

1a00453c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a00453c:	b530      	push	{r4, r5, lr}
1a00453e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a004540:	f000 fa90 	bl	1a004a64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a004544:	4b11      	ldr	r3, [pc, #68]	; (1a00458c <prvCheckForValidListAndQueue+0x50>)
1a004546:	681b      	ldr	r3, [r3, #0]
1a004548:	b11b      	cbz	r3, 1a004552 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a00454a:	f000 faad 	bl	1a004aa8 <vPortExitCritical>
}
1a00454e:	b003      	add	sp, #12
1a004550:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a004552:	4d0f      	ldr	r5, [pc, #60]	; (1a004590 <prvCheckForValidListAndQueue+0x54>)
1a004554:	4628      	mov	r0, r5
1a004556:	f7ff fa1a 	bl	1a00398e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a00455a:	4c0e      	ldr	r4, [pc, #56]	; (1a004594 <prvCheckForValidListAndQueue+0x58>)
1a00455c:	4620      	mov	r0, r4
1a00455e:	f7ff fa16 	bl	1a00398e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a004562:	4b0d      	ldr	r3, [pc, #52]	; (1a004598 <prvCheckForValidListAndQueue+0x5c>)
1a004564:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a004566:	4b0d      	ldr	r3, [pc, #52]	; (1a00459c <prvCheckForValidListAndQueue+0x60>)
1a004568:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a00456a:	2300      	movs	r3, #0
1a00456c:	9300      	str	r3, [sp, #0]
1a00456e:	4b0c      	ldr	r3, [pc, #48]	; (1a0045a0 <prvCheckForValidListAndQueue+0x64>)
1a004570:	4a0c      	ldr	r2, [pc, #48]	; (1a0045a4 <prvCheckForValidListAndQueue+0x68>)
1a004572:	2110      	movs	r1, #16
1a004574:	200a      	movs	r0, #10
1a004576:	f7fe ff8e 	bl	1a003496 <xQueueGenericCreateStatic>
1a00457a:	4b04      	ldr	r3, [pc, #16]	; (1a00458c <prvCheckForValidListAndQueue+0x50>)
1a00457c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a00457e:	2800      	cmp	r0, #0
1a004580:	d0e3      	beq.n	1a00454a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a004582:	4909      	ldr	r1, [pc, #36]	; (1a0045a8 <prvCheckForValidListAndQueue+0x6c>)
1a004584:	f7ff f9c6 	bl	1a003914 <vQueueAddToRegistry>
1a004588:	e7df      	b.n	1a00454a <prvCheckForValidListAndQueue+0xe>
1a00458a:	bf00      	nop
1a00458c:	1000342c 	.word	0x1000342c
1a004590:	100033b0 	.word	0x100033b0
1a004594:	100033c4 	.word	0x100033c4
1a004598:	10003308 	.word	0x10003308
1a00459c:	1000330c 	.word	0x1000330c
1a0045a0:	100033dc 	.word	0x100033dc
1a0045a4:	10003310 	.word	0x10003310
1a0045a8:	1a009aa0 	.word	0x1a009aa0

1a0045ac <prvInitialiseNewTimer>:
{
1a0045ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0045b0:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
1a0045b2:	b941      	cbnz	r1, 1a0045c6 <prvInitialiseNewTimer+0x1a>
1a0045b4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0045b8:	f383 8811 	msr	BASEPRI, r3
1a0045bc:	f3bf 8f6f 	isb	sy
1a0045c0:	f3bf 8f4f 	dsb	sy
1a0045c4:	e7fe      	b.n	1a0045c4 <prvInitialiseNewTimer+0x18>
1a0045c6:	460f      	mov	r7, r1
	if( pxNewTimer != NULL )
1a0045c8:	b174      	cbz	r4, 1a0045e8 <prvInitialiseNewTimer+0x3c>
1a0045ca:	461d      	mov	r5, r3
1a0045cc:	4616      	mov	r6, r2
1a0045ce:	4680      	mov	r8, r0
		prvCheckForValidListAndQueue();
1a0045d0:	f7ff ffb4 	bl	1a00453c <prvCheckForValidListAndQueue>
		pxNewTimer->pcTimerName = pcTimerName;
1a0045d4:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
1a0045d8:	61a7      	str	r7, [r4, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
1a0045da:	61e6      	str	r6, [r4, #28]
		pxNewTimer->pvTimerID = pvTimerID;
1a0045dc:	6225      	str	r5, [r4, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
1a0045de:	9b06      	ldr	r3, [sp, #24]
1a0045e0:	6263      	str	r3, [r4, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
1a0045e2:	1d20      	adds	r0, r4, #4
1a0045e4:	f7ff f9de 	bl	1a0039a4 <vListInitialiseItem>
}
1a0045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a0045ec <xTimerCreateTimerTask>:
{
1a0045ec:	b510      	push	{r4, lr}
1a0045ee:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a0045f0:	f7ff ffa4 	bl	1a00453c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a0045f4:	4b12      	ldr	r3, [pc, #72]	; (1a004640 <xTimerCreateTimerTask+0x54>)
1a0045f6:	681b      	ldr	r3, [r3, #0]
1a0045f8:	b1cb      	cbz	r3, 1a00462e <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a0045fa:	2400      	movs	r4, #0
1a0045fc:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a0045fe:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a004600:	aa07      	add	r2, sp, #28
1a004602:	a906      	add	r1, sp, #24
1a004604:	a805      	add	r0, sp, #20
1a004606:	f7ff fa17 	bl	1a003a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a00460a:	9b05      	ldr	r3, [sp, #20]
1a00460c:	9302      	str	r3, [sp, #8]
1a00460e:	9b06      	ldr	r3, [sp, #24]
1a004610:	9301      	str	r3, [sp, #4]
1a004612:	2304      	movs	r3, #4
1a004614:	9300      	str	r3, [sp, #0]
1a004616:	4623      	mov	r3, r4
1a004618:	9a07      	ldr	r2, [sp, #28]
1a00461a:	490a      	ldr	r1, [pc, #40]	; (1a004644 <xTimerCreateTimerTask+0x58>)
1a00461c:	480a      	ldr	r0, [pc, #40]	; (1a004648 <xTimerCreateTimerTask+0x5c>)
1a00461e:	f7ff fba5 	bl	1a003d6c <xTaskCreateStatic>
1a004622:	4b0a      	ldr	r3, [pc, #40]	; (1a00464c <xTimerCreateTimerTask+0x60>)
1a004624:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a004626:	b110      	cbz	r0, 1a00462e <xTimerCreateTimerTask+0x42>
}
1a004628:	2001      	movs	r0, #1
1a00462a:	b008      	add	sp, #32
1a00462c:	bd10      	pop	{r4, pc}
1a00462e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004632:	f383 8811 	msr	BASEPRI, r3
1a004636:	f3bf 8f6f 	isb	sy
1a00463a:	f3bf 8f4f 	dsb	sy
1a00463e:	e7fe      	b.n	1a00463e <xTimerCreateTimerTask+0x52>
1a004640:	1000342c 	.word	0x1000342c
1a004644:	1a009aa8 	.word	0x1a009aa8
1a004648:	1a00497d 	.word	0x1a00497d
1a00464c:	10003430 	.word	0x10003430

1a004650 <xTimerCreateStatic>:
	{
1a004650:	b530      	push	{r4, r5, lr}
1a004652:	b085      	sub	sp, #20
1a004654:	9c09      	ldr	r4, [sp, #36]	; 0x24
			volatile size_t xSize = sizeof( StaticTimer_t );
1a004656:	2530      	movs	r5, #48	; 0x30
1a004658:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
1a00465a:	9d03      	ldr	r5, [sp, #12]
1a00465c:	2d30      	cmp	r5, #48	; 0x30
1a00465e:	d008      	beq.n	1a004672 <xTimerCreateStatic+0x22>
1a004660:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004664:	f383 8811 	msr	BASEPRI, r3
1a004668:	f3bf 8f6f 	isb	sy
1a00466c:	f3bf 8f4f 	dsb	sy
1a004670:	e7fe      	b.n	1a004670 <xTimerCreateStatic+0x20>
		configASSERT( pxTimerBuffer );
1a004672:	b944      	cbnz	r4, 1a004686 <xTimerCreateStatic+0x36>
1a004674:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004678:	f383 8811 	msr	BASEPRI, r3
1a00467c:	f3bf 8f6f 	isb	sy
1a004680:	f3bf 8f4f 	dsb	sy
1a004684:	e7fe      	b.n	1a004684 <xTimerCreateStatic+0x34>
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
1a004686:	9401      	str	r4, [sp, #4]
1a004688:	9d08      	ldr	r5, [sp, #32]
1a00468a:	9500      	str	r5, [sp, #0]
1a00468c:	f7ff ff8e 	bl	1a0045ac <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
1a004690:	2301      	movs	r3, #1
1a004692:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	}
1a004696:	4620      	mov	r0, r4
1a004698:	b005      	add	sp, #20
1a00469a:	bd30      	pop	{r4, r5, pc}

1a00469c <xTimerGenericCommand>:
	configASSERT( xTimer );
1a00469c:	b1c8      	cbz	r0, 1a0046d2 <xTimerGenericCommand+0x36>
{
1a00469e:	b530      	push	{r4, r5, lr}
1a0046a0:	b085      	sub	sp, #20
1a0046a2:	4615      	mov	r5, r2
1a0046a4:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0046a6:	4a17      	ldr	r2, [pc, #92]	; (1a004704 <xTimerGenericCommand+0x68>)
1a0046a8:	6810      	ldr	r0, [r2, #0]
1a0046aa:	b340      	cbz	r0, 1a0046fe <xTimerGenericCommand+0x62>
1a0046ac:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0046ae:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0046b0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0046b2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0046b4:	2905      	cmp	r1, #5
1a0046b6:	dc1d      	bgt.n	1a0046f4 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0046b8:	f7ff fea4 	bl	1a004404 <xTaskGetSchedulerState>
1a0046bc:	2802      	cmp	r0, #2
1a0046be:	d011      	beq.n	1a0046e4 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0046c0:	2300      	movs	r3, #0
1a0046c2:	461a      	mov	r2, r3
1a0046c4:	4669      	mov	r1, sp
1a0046c6:	480f      	ldr	r0, [pc, #60]	; (1a004704 <xTimerGenericCommand+0x68>)
1a0046c8:	6800      	ldr	r0, [r0, #0]
1a0046ca:	f7fe ff53 	bl	1a003574 <xQueueGenericSend>
}
1a0046ce:	b005      	add	sp, #20
1a0046d0:	bd30      	pop	{r4, r5, pc}
1a0046d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0046d6:	f383 8811 	msr	BASEPRI, r3
1a0046da:	f3bf 8f6f 	isb	sy
1a0046de:	f3bf 8f4f 	dsb	sy
1a0046e2:	e7fe      	b.n	1a0046e2 <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0046e4:	2300      	movs	r3, #0
1a0046e6:	9a08      	ldr	r2, [sp, #32]
1a0046e8:	4669      	mov	r1, sp
1a0046ea:	4806      	ldr	r0, [pc, #24]	; (1a004704 <xTimerGenericCommand+0x68>)
1a0046ec:	6800      	ldr	r0, [r0, #0]
1a0046ee:	f7fe ff41 	bl	1a003574 <xQueueGenericSend>
1a0046f2:	e7ec      	b.n	1a0046ce <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0046f4:	2300      	movs	r3, #0
1a0046f6:	4669      	mov	r1, sp
1a0046f8:	f7fe fffa 	bl	1a0036f0 <xQueueGenericSendFromISR>
1a0046fc:	e7e7      	b.n	1a0046ce <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0046fe:	2000      	movs	r0, #0
	return xReturn;
1a004700:	e7e5      	b.n	1a0046ce <xTimerGenericCommand+0x32>
1a004702:	bf00      	nop
1a004704:	1000342c 	.word	0x1000342c

1a004708 <prvSwitchTimerLists>:
{
1a004708:	b570      	push	{r4, r5, r6, lr}
1a00470a:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a00470c:	4b1a      	ldr	r3, [pc, #104]	; (1a004778 <prvSwitchTimerLists+0x70>)
1a00470e:	681b      	ldr	r3, [r3, #0]
1a004710:	681a      	ldr	r2, [r3, #0]
1a004712:	b352      	cbz	r2, 1a00476a <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004714:	68db      	ldr	r3, [r3, #12]
1a004716:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a004718:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a00471a:	1d25      	adds	r5, r4, #4
1a00471c:	4628      	mov	r0, r5
1a00471e:	f7ff f96a 	bl	1a0039f6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004722:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a004724:	4620      	mov	r0, r4
1a004726:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a004728:	69e3      	ldr	r3, [r4, #28]
1a00472a:	2b01      	cmp	r3, #1
1a00472c:	d1ee      	bne.n	1a00470c <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00472e:	69a3      	ldr	r3, [r4, #24]
1a004730:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a004732:	429e      	cmp	r6, r3
1a004734:	d207      	bcs.n	1a004746 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a004736:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a004738:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a00473a:	4629      	mov	r1, r5
1a00473c:	4b0e      	ldr	r3, [pc, #56]	; (1a004778 <prvSwitchTimerLists+0x70>)
1a00473e:	6818      	ldr	r0, [r3, #0]
1a004740:	f7ff f93f 	bl	1a0039c2 <vListInsert>
1a004744:	e7e2      	b.n	1a00470c <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a004746:	2100      	movs	r1, #0
1a004748:	9100      	str	r1, [sp, #0]
1a00474a:	460b      	mov	r3, r1
1a00474c:	4632      	mov	r2, r6
1a00474e:	4620      	mov	r0, r4
1a004750:	f7ff ffa4 	bl	1a00469c <xTimerGenericCommand>
				configASSERT( xResult );
1a004754:	2800      	cmp	r0, #0
1a004756:	d1d9      	bne.n	1a00470c <prvSwitchTimerLists+0x4>
1a004758:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00475c:	f383 8811 	msr	BASEPRI, r3
1a004760:	f3bf 8f6f 	isb	sy
1a004764:	f3bf 8f4f 	dsb	sy
1a004768:	e7fe      	b.n	1a004768 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a00476a:	4a04      	ldr	r2, [pc, #16]	; (1a00477c <prvSwitchTimerLists+0x74>)
1a00476c:	6810      	ldr	r0, [r2, #0]
1a00476e:	4902      	ldr	r1, [pc, #8]	; (1a004778 <prvSwitchTimerLists+0x70>)
1a004770:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a004772:	6013      	str	r3, [r2, #0]
}
1a004774:	b002      	add	sp, #8
1a004776:	bd70      	pop	{r4, r5, r6, pc}
1a004778:	10003308 	.word	0x10003308
1a00477c:	1000330c 	.word	0x1000330c

1a004780 <prvSampleTimeNow>:
{
1a004780:	b538      	push	{r3, r4, r5, lr}
1a004782:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a004784:	f7ff fbb0 	bl	1a003ee8 <xTaskGetTickCount>
1a004788:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a00478a:	4b07      	ldr	r3, [pc, #28]	; (1a0047a8 <prvSampleTimeNow+0x28>)
1a00478c:	681b      	ldr	r3, [r3, #0]
1a00478e:	4283      	cmp	r3, r0
1a004790:	d805      	bhi.n	1a00479e <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a004792:	2300      	movs	r3, #0
1a004794:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a004796:	4b04      	ldr	r3, [pc, #16]	; (1a0047a8 <prvSampleTimeNow+0x28>)
1a004798:	601c      	str	r4, [r3, #0]
}
1a00479a:	4620      	mov	r0, r4
1a00479c:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00479e:	f7ff ffb3 	bl	1a004708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a0047a2:	2301      	movs	r3, #1
1a0047a4:	602b      	str	r3, [r5, #0]
1a0047a6:	e7f6      	b.n	1a004796 <prvSampleTimeNow+0x16>
1a0047a8:	100033d8 	.word	0x100033d8

1a0047ac <prvProcessExpiredTimer>:
{
1a0047ac:	b570      	push	{r4, r5, r6, lr}
1a0047ae:	b082      	sub	sp, #8
1a0047b0:	4605      	mov	r5, r0
1a0047b2:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0047b4:	4b14      	ldr	r3, [pc, #80]	; (1a004808 <prvProcessExpiredTimer+0x5c>)
1a0047b6:	681b      	ldr	r3, [r3, #0]
1a0047b8:	68db      	ldr	r3, [r3, #12]
1a0047ba:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0047bc:	1d20      	adds	r0, r4, #4
1a0047be:	f7ff f91a 	bl	1a0039f6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0047c2:	69e3      	ldr	r3, [r4, #28]
1a0047c4:	2b01      	cmp	r3, #1
1a0047c6:	d004      	beq.n	1a0047d2 <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0047c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0047ca:	4620      	mov	r0, r4
1a0047cc:	4798      	blx	r3
}
1a0047ce:	b002      	add	sp, #8
1a0047d0:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0047d2:	69a1      	ldr	r1, [r4, #24]
1a0047d4:	462b      	mov	r3, r5
1a0047d6:	4632      	mov	r2, r6
1a0047d8:	4429      	add	r1, r5
1a0047da:	4620      	mov	r0, r4
1a0047dc:	f7ff fe8a 	bl	1a0044f4 <prvInsertTimerInActiveList>
1a0047e0:	2800      	cmp	r0, #0
1a0047e2:	d0f1      	beq.n	1a0047c8 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0047e4:	2100      	movs	r1, #0
1a0047e6:	9100      	str	r1, [sp, #0]
1a0047e8:	460b      	mov	r3, r1
1a0047ea:	462a      	mov	r2, r5
1a0047ec:	4620      	mov	r0, r4
1a0047ee:	f7ff ff55 	bl	1a00469c <xTimerGenericCommand>
			configASSERT( xResult );
1a0047f2:	2800      	cmp	r0, #0
1a0047f4:	d1e8      	bne.n	1a0047c8 <prvProcessExpiredTimer+0x1c>
1a0047f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0047fa:	f383 8811 	msr	BASEPRI, r3
1a0047fe:	f3bf 8f6f 	isb	sy
1a004802:	f3bf 8f4f 	dsb	sy
1a004806:	e7fe      	b.n	1a004806 <prvProcessExpiredTimer+0x5a>
1a004808:	10003308 	.word	0x10003308

1a00480c <prvProcessTimerOrBlockTask>:
{
1a00480c:	b570      	push	{r4, r5, r6, lr}
1a00480e:	b082      	sub	sp, #8
1a004810:	4606      	mov	r6, r0
1a004812:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a004814:	f7ff fb60 	bl	1a003ed8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a004818:	a801      	add	r0, sp, #4
1a00481a:	f7ff ffb1 	bl	1a004780 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00481e:	9b01      	ldr	r3, [sp, #4]
1a004820:	bb1b      	cbnz	r3, 1a00486a <prvProcessTimerOrBlockTask+0x5e>
1a004822:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a004824:	b90c      	cbnz	r4, 1a00482a <prvProcessTimerOrBlockTask+0x1e>
1a004826:	42b0      	cmp	r0, r6
1a004828:	d218      	bcs.n	1a00485c <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a00482a:	b12c      	cbz	r4, 1a004838 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a00482c:	4b11      	ldr	r3, [pc, #68]	; (1a004874 <prvProcessTimerOrBlockTask+0x68>)
1a00482e:	681b      	ldr	r3, [r3, #0]
1a004830:	681c      	ldr	r4, [r3, #0]
1a004832:	fab4 f484 	clz	r4, r4
1a004836:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a004838:	4622      	mov	r2, r4
1a00483a:	1b71      	subs	r1, r6, r5
1a00483c:	4b0e      	ldr	r3, [pc, #56]	; (1a004878 <prvProcessTimerOrBlockTask+0x6c>)
1a00483e:	6818      	ldr	r0, [r3, #0]
1a004840:	f7ff f87c 	bl	1a00393c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a004844:	f7ff fbe2 	bl	1a00400c <xTaskResumeAll>
1a004848:	b988      	cbnz	r0, 1a00486e <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a00484a:	4b0c      	ldr	r3, [pc, #48]	; (1a00487c <prvProcessTimerOrBlockTask+0x70>)
1a00484c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004850:	601a      	str	r2, [r3, #0]
1a004852:	f3bf 8f4f 	dsb	sy
1a004856:	f3bf 8f6f 	isb	sy
1a00485a:	e008      	b.n	1a00486e <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a00485c:	f7ff fbd6 	bl	1a00400c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a004860:	4629      	mov	r1, r5
1a004862:	4630      	mov	r0, r6
1a004864:	f7ff ffa2 	bl	1a0047ac <prvProcessExpiredTimer>
1a004868:	e001      	b.n	1a00486e <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a00486a:	f7ff fbcf 	bl	1a00400c <xTaskResumeAll>
}
1a00486e:	b002      	add	sp, #8
1a004870:	bd70      	pop	{r4, r5, r6, pc}
1a004872:	bf00      	nop
1a004874:	1000330c 	.word	0x1000330c
1a004878:	1000342c 	.word	0x1000342c
1a00487c:	e000ed04 	.word	0xe000ed04

1a004880 <prvProcessReceivedCommands>:
{
1a004880:	b530      	push	{r4, r5, lr}
1a004882:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a004884:	e002      	b.n	1a00488c <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a004886:	9b04      	ldr	r3, [sp, #16]
1a004888:	2b00      	cmp	r3, #0
1a00488a:	da0f      	bge.n	1a0048ac <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a00488c:	2200      	movs	r2, #0
1a00488e:	a904      	add	r1, sp, #16
1a004890:	4b39      	ldr	r3, [pc, #228]	; (1a004978 <prvProcessReceivedCommands+0xf8>)
1a004892:	6818      	ldr	r0, [r3, #0]
1a004894:	f7fe ff92 	bl	1a0037bc <xQueueReceive>
1a004898:	2800      	cmp	r0, #0
1a00489a:	d06a      	beq.n	1a004972 <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a00489c:	9b04      	ldr	r3, [sp, #16]
1a00489e:	2b00      	cmp	r3, #0
1a0048a0:	daf1      	bge.n	1a004886 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a0048a2:	9907      	ldr	r1, [sp, #28]
1a0048a4:	9806      	ldr	r0, [sp, #24]
1a0048a6:	9b05      	ldr	r3, [sp, #20]
1a0048a8:	4798      	blx	r3
1a0048aa:	e7ec      	b.n	1a004886 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0048ac:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0048ae:	6963      	ldr	r3, [r4, #20]
1a0048b0:	b113      	cbz	r3, 1a0048b8 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0048b2:	1d20      	adds	r0, r4, #4
1a0048b4:	f7ff f89f 	bl	1a0039f6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0048b8:	a803      	add	r0, sp, #12
1a0048ba:	f7ff ff61 	bl	1a004780 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0048be:	9b04      	ldr	r3, [sp, #16]
1a0048c0:	2b09      	cmp	r3, #9
1a0048c2:	d8e3      	bhi.n	1a00488c <prvProcessReceivedCommands+0xc>
1a0048c4:	a201      	add	r2, pc, #4	; (adr r2, 1a0048cc <prvProcessReceivedCommands+0x4c>)
1a0048c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0048ca:	bf00      	nop
1a0048cc:	1a0048f5 	.word	0x1a0048f5
1a0048d0:	1a0048f5 	.word	0x1a0048f5
1a0048d4:	1a0048f5 	.word	0x1a0048f5
1a0048d8:	1a00488d 	.word	0x1a00488d
1a0048dc:	1a00493d 	.word	0x1a00493d
1a0048e0:	1a004963 	.word	0x1a004963
1a0048e4:	1a0048f5 	.word	0x1a0048f5
1a0048e8:	1a0048f5 	.word	0x1a0048f5
1a0048ec:	1a00488d 	.word	0x1a00488d
1a0048f0:	1a00493d 	.word	0x1a00493d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0048f4:	9905      	ldr	r1, [sp, #20]
1a0048f6:	69a5      	ldr	r5, [r4, #24]
1a0048f8:	460b      	mov	r3, r1
1a0048fa:	4602      	mov	r2, r0
1a0048fc:	4429      	add	r1, r5
1a0048fe:	4620      	mov	r0, r4
1a004900:	f7ff fdf8 	bl	1a0044f4 <prvInsertTimerInActiveList>
1a004904:	2800      	cmp	r0, #0
1a004906:	d0c1      	beq.n	1a00488c <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a004908:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00490a:	4620      	mov	r0, r4
1a00490c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00490e:	69e3      	ldr	r3, [r4, #28]
1a004910:	2b01      	cmp	r3, #1
1a004912:	d1bb      	bne.n	1a00488c <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a004914:	69a2      	ldr	r2, [r4, #24]
1a004916:	2100      	movs	r1, #0
1a004918:	9100      	str	r1, [sp, #0]
1a00491a:	460b      	mov	r3, r1
1a00491c:	9805      	ldr	r0, [sp, #20]
1a00491e:	4402      	add	r2, r0
1a004920:	4620      	mov	r0, r4
1a004922:	f7ff febb 	bl	1a00469c <xTimerGenericCommand>
							configASSERT( xResult );
1a004926:	2800      	cmp	r0, #0
1a004928:	d1b0      	bne.n	1a00488c <prvProcessReceivedCommands+0xc>
1a00492a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00492e:	f383 8811 	msr	BASEPRI, r3
1a004932:	f3bf 8f6f 	isb	sy
1a004936:	f3bf 8f4f 	dsb	sy
1a00493a:	e7fe      	b.n	1a00493a <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a00493c:	9905      	ldr	r1, [sp, #20]
1a00493e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a004940:	b131      	cbz	r1, 1a004950 <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a004942:	4603      	mov	r3, r0
1a004944:	4602      	mov	r2, r0
1a004946:	4401      	add	r1, r0
1a004948:	4620      	mov	r0, r4
1a00494a:	f7ff fdd3 	bl	1a0044f4 <prvInsertTimerInActiveList>
					break;
1a00494e:	e79d      	b.n	1a00488c <prvProcessReceivedCommands+0xc>
1a004950:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004954:	f383 8811 	msr	BASEPRI, r3
1a004958:	f3bf 8f6f 	isb	sy
1a00495c:	f3bf 8f4f 	dsb	sy
1a004960:	e7fe      	b.n	1a004960 <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a004962:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a004966:	2b00      	cmp	r3, #0
1a004968:	d190      	bne.n	1a00488c <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a00496a:	4620      	mov	r0, r4
1a00496c:	f7fe fc7e 	bl	1a00326c <vPortFree>
1a004970:	e78c      	b.n	1a00488c <prvProcessReceivedCommands+0xc>
}
1a004972:	b009      	add	sp, #36	; 0x24
1a004974:	bd30      	pop	{r4, r5, pc}
1a004976:	bf00      	nop
1a004978:	1000342c 	.word	0x1000342c

1a00497c <prvTimerTask>:
{
1a00497c:	b500      	push	{lr}
1a00497e:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a004980:	a801      	add	r0, sp, #4
1a004982:	f7ff fda7 	bl	1a0044d4 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a004986:	9901      	ldr	r1, [sp, #4]
1a004988:	f7ff ff40 	bl	1a00480c <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a00498c:	f7ff ff78 	bl	1a004880 <prvProcessReceivedCommands>
1a004990:	e7f6      	b.n	1a004980 <prvTimerTask+0x4>
1a004992:	Address 0x000000001a004992 is out of bounds.


1a004994 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a004994:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a004996:	2300      	movs	r3, #0
1a004998:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a00499a:	4b0d      	ldr	r3, [pc, #52]	; (1a0049d0 <prvTaskExitError+0x3c>)
1a00499c:	681b      	ldr	r3, [r3, #0]
1a00499e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0049a2:	d008      	beq.n	1a0049b6 <prvTaskExitError+0x22>
1a0049a4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0049a8:	f383 8811 	msr	BASEPRI, r3
1a0049ac:	f3bf 8f6f 	isb	sy
1a0049b0:	f3bf 8f4f 	dsb	sy
1a0049b4:	e7fe      	b.n	1a0049b4 <prvTaskExitError+0x20>
1a0049b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0049ba:	f383 8811 	msr	BASEPRI, r3
1a0049be:	f3bf 8f6f 	isb	sy
1a0049c2:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0049c6:	9b01      	ldr	r3, [sp, #4]
1a0049c8:	2b00      	cmp	r3, #0
1a0049ca:	d0fc      	beq.n	1a0049c6 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0049cc:	b002      	add	sp, #8
1a0049ce:	4770      	bx	lr
1a0049d0:	10000008 	.word	0x10000008

1a0049d4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0049d4:	4808      	ldr	r0, [pc, #32]	; (1a0049f8 <prvPortStartFirstTask+0x24>)
1a0049d6:	6800      	ldr	r0, [r0, #0]
1a0049d8:	6800      	ldr	r0, [r0, #0]
1a0049da:	f380 8808 	msr	MSP, r0
1a0049de:	f04f 0000 	mov.w	r0, #0
1a0049e2:	f380 8814 	msr	CONTROL, r0
1a0049e6:	b662      	cpsie	i
1a0049e8:	b661      	cpsie	f
1a0049ea:	f3bf 8f4f 	dsb	sy
1a0049ee:	f3bf 8f6f 	isb	sy
1a0049f2:	df00      	svc	0
1a0049f4:	bf00      	nop
1a0049f6:	0000      	.short	0x0000
1a0049f8:	e000ed08 	.word	0xe000ed08

1a0049fc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0049fc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a004a0c <vPortEnableVFP+0x10>
1a004a00:	6801      	ldr	r1, [r0, #0]
1a004a02:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a004a06:	6001      	str	r1, [r0, #0]
1a004a08:	4770      	bx	lr
1a004a0a:	0000      	.short	0x0000
1a004a0c:	e000ed88 	.word	0xe000ed88

1a004a10 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a004a10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a004a14:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a004a18:	f021 0101 	bic.w	r1, r1, #1
1a004a1c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a004a20:	4b05      	ldr	r3, [pc, #20]	; (1a004a38 <pxPortInitialiseStack+0x28>)
1a004a22:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a004a26:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a004a2a:	f06f 0302 	mvn.w	r3, #2
1a004a2e:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a004a32:	3844      	subs	r0, #68	; 0x44
1a004a34:	4770      	bx	lr
1a004a36:	bf00      	nop
1a004a38:	1a004995 	.word	0x1a004995
1a004a3c:	ffffffff 	.word	0xffffffff

1a004a40 <SVC_Handler>:
	__asm volatile (
1a004a40:	4b07      	ldr	r3, [pc, #28]	; (1a004a60 <pxCurrentTCBConst2>)
1a004a42:	6819      	ldr	r1, [r3, #0]
1a004a44:	6808      	ldr	r0, [r1, #0]
1a004a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004a4a:	f380 8809 	msr	PSP, r0
1a004a4e:	f3bf 8f6f 	isb	sy
1a004a52:	f04f 0000 	mov.w	r0, #0
1a004a56:	f380 8811 	msr	BASEPRI, r0
1a004a5a:	4770      	bx	lr
1a004a5c:	f3af 8000 	nop.w

1a004a60 <pxCurrentTCBConst2>:
1a004a60:	100031e0 	.word	0x100031e0

1a004a64 <vPortEnterCritical>:
1a004a64:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a68:	f383 8811 	msr	BASEPRI, r3
1a004a6c:	f3bf 8f6f 	isb	sy
1a004a70:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a004a74:	4a0a      	ldr	r2, [pc, #40]	; (1a004aa0 <vPortEnterCritical+0x3c>)
1a004a76:	6813      	ldr	r3, [r2, #0]
1a004a78:	3301      	adds	r3, #1
1a004a7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a004a7c:	2b01      	cmp	r3, #1
1a004a7e:	d000      	beq.n	1a004a82 <vPortEnterCritical+0x1e>
}
1a004a80:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a004a82:	4b08      	ldr	r3, [pc, #32]	; (1a004aa4 <vPortEnterCritical+0x40>)
1a004a84:	681b      	ldr	r3, [r3, #0]
1a004a86:	f013 0fff 	tst.w	r3, #255	; 0xff
1a004a8a:	d0f9      	beq.n	1a004a80 <vPortEnterCritical+0x1c>
1a004a8c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004a90:	f383 8811 	msr	BASEPRI, r3
1a004a94:	f3bf 8f6f 	isb	sy
1a004a98:	f3bf 8f4f 	dsb	sy
1a004a9c:	e7fe      	b.n	1a004a9c <vPortEnterCritical+0x38>
1a004a9e:	bf00      	nop
1a004aa0:	10000008 	.word	0x10000008
1a004aa4:	e000ed04 	.word	0xe000ed04

1a004aa8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a004aa8:	4b09      	ldr	r3, [pc, #36]	; (1a004ad0 <vPortExitCritical+0x28>)
1a004aaa:	681b      	ldr	r3, [r3, #0]
1a004aac:	b943      	cbnz	r3, 1a004ac0 <vPortExitCritical+0x18>
1a004aae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004ab2:	f383 8811 	msr	BASEPRI, r3
1a004ab6:	f3bf 8f6f 	isb	sy
1a004aba:	f3bf 8f4f 	dsb	sy
1a004abe:	e7fe      	b.n	1a004abe <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a004ac0:	3b01      	subs	r3, #1
1a004ac2:	4a03      	ldr	r2, [pc, #12]	; (1a004ad0 <vPortExitCritical+0x28>)
1a004ac4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a004ac6:	b90b      	cbnz	r3, 1a004acc <vPortExitCritical+0x24>
	__asm volatile
1a004ac8:	f383 8811 	msr	BASEPRI, r3
}
1a004acc:	4770      	bx	lr
1a004ace:	bf00      	nop
1a004ad0:	10000008 	.word	0x10000008
1a004ad4:	ffffffff 	.word	0xffffffff
1a004ad8:	ffffffff 	.word	0xffffffff
1a004adc:	ffffffff 	.word	0xffffffff

1a004ae0 <PendSV_Handler>:
	__asm volatile
1a004ae0:	f3ef 8009 	mrs	r0, PSP
1a004ae4:	f3bf 8f6f 	isb	sy
1a004ae8:	4b15      	ldr	r3, [pc, #84]	; (1a004b40 <pxCurrentTCBConst>)
1a004aea:	681a      	ldr	r2, [r3, #0]
1a004aec:	f01e 0f10 	tst.w	lr, #16
1a004af0:	bf08      	it	eq
1a004af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a004af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004afa:	6010      	str	r0, [r2, #0]
1a004afc:	e92d 0009 	stmdb	sp!, {r0, r3}
1a004b00:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a004b04:	f380 8811 	msr	BASEPRI, r0
1a004b08:	f3bf 8f4f 	dsb	sy
1a004b0c:	f3bf 8f6f 	isb	sy
1a004b10:	f7ff fb48 	bl	1a0041a4 <vTaskSwitchContext>
1a004b14:	f04f 0000 	mov.w	r0, #0
1a004b18:	f380 8811 	msr	BASEPRI, r0
1a004b1c:	bc09      	pop	{r0, r3}
1a004b1e:	6819      	ldr	r1, [r3, #0]
1a004b20:	6808      	ldr	r0, [r1, #0]
1a004b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004b26:	f01e 0f10 	tst.w	lr, #16
1a004b2a:	bf08      	it	eq
1a004b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a004b30:	f380 8809 	msr	PSP, r0
1a004b34:	f3bf 8f6f 	isb	sy
1a004b38:	4770      	bx	lr
1a004b3a:	bf00      	nop
1a004b3c:	f3af 8000 	nop.w

1a004b40 <pxCurrentTCBConst>:
1a004b40:	100031e0 	.word	0x100031e0

1a004b44 <SysTick_Handler>:
{
1a004b44:	b508      	push	{r3, lr}
	__asm volatile
1a004b46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004b4a:	f383 8811 	msr	BASEPRI, r3
1a004b4e:	f3bf 8f6f 	isb	sy
1a004b52:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a004b56:	f7ff f9cd 	bl	1a003ef4 <xTaskIncrementTick>
1a004b5a:	b118      	cbz	r0, 1a004b64 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a004b5c:	4b03      	ldr	r3, [pc, #12]	; (1a004b6c <SysTick_Handler+0x28>)
1a004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a004b62:	601a      	str	r2, [r3, #0]
	__asm volatile
1a004b64:	2300      	movs	r3, #0
1a004b66:	f383 8811 	msr	BASEPRI, r3
}
1a004b6a:	bd08      	pop	{r3, pc}
1a004b6c:	e000ed04 	.word	0xe000ed04

1a004b70 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a004b70:	4a08      	ldr	r2, [pc, #32]	; (1a004b94 <vPortSetupTimerInterrupt+0x24>)
1a004b72:	2300      	movs	r3, #0
1a004b74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a004b76:	4908      	ldr	r1, [pc, #32]	; (1a004b98 <vPortSetupTimerInterrupt+0x28>)
1a004b78:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a004b7a:	4b08      	ldr	r3, [pc, #32]	; (1a004b9c <vPortSetupTimerInterrupt+0x2c>)
1a004b7c:	681b      	ldr	r3, [r3, #0]
1a004b7e:	4908      	ldr	r1, [pc, #32]	; (1a004ba0 <vPortSetupTimerInterrupt+0x30>)
1a004b80:	fba1 1303 	umull	r1, r3, r1, r3
1a004b84:	099b      	lsrs	r3, r3, #6
1a004b86:	3b01      	subs	r3, #1
1a004b88:	4906      	ldr	r1, [pc, #24]	; (1a004ba4 <vPortSetupTimerInterrupt+0x34>)
1a004b8a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a004b8c:	2307      	movs	r3, #7
1a004b8e:	6013      	str	r3, [r2, #0]
}
1a004b90:	4770      	bx	lr
1a004b92:	bf00      	nop
1a004b94:	e000e010 	.word	0xe000e010
1a004b98:	e000e018 	.word	0xe000e018
1a004b9c:	10003644 	.word	0x10003644
1a004ba0:	10624dd3 	.word	0x10624dd3
1a004ba4:	e000e014 	.word	0xe000e014

1a004ba8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a004ba8:	4b3a      	ldr	r3, [pc, #232]	; (1a004c94 <xPortStartScheduler+0xec>)
1a004baa:	681a      	ldr	r2, [r3, #0]
1a004bac:	4b3a      	ldr	r3, [pc, #232]	; (1a004c98 <xPortStartScheduler+0xf0>)
1a004bae:	429a      	cmp	r2, r3
1a004bb0:	d00d      	beq.n	1a004bce <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a004bb2:	4b38      	ldr	r3, [pc, #224]	; (1a004c94 <xPortStartScheduler+0xec>)
1a004bb4:	681a      	ldr	r2, [r3, #0]
1a004bb6:	4b39      	ldr	r3, [pc, #228]	; (1a004c9c <xPortStartScheduler+0xf4>)
1a004bb8:	429a      	cmp	r2, r3
1a004bba:	d111      	bne.n	1a004be0 <xPortStartScheduler+0x38>
	__asm volatile
1a004bbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004bc0:	f383 8811 	msr	BASEPRI, r3
1a004bc4:	f3bf 8f6f 	isb	sy
1a004bc8:	f3bf 8f4f 	dsb	sy
1a004bcc:	e7fe      	b.n	1a004bcc <xPortStartScheduler+0x24>
1a004bce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004bd2:	f383 8811 	msr	BASEPRI, r3
1a004bd6:	f3bf 8f6f 	isb	sy
1a004bda:	f3bf 8f4f 	dsb	sy
1a004bde:	e7fe      	b.n	1a004bde <xPortStartScheduler+0x36>
{
1a004be0:	b510      	push	{r4, lr}
1a004be2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a004be4:	4b2e      	ldr	r3, [pc, #184]	; (1a004ca0 <xPortStartScheduler+0xf8>)
1a004be6:	781a      	ldrb	r2, [r3, #0]
1a004be8:	b2d2      	uxtb	r2, r2
1a004bea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a004bec:	22ff      	movs	r2, #255	; 0xff
1a004bee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a004bf0:	781b      	ldrb	r3, [r3, #0]
1a004bf2:	b2db      	uxtb	r3, r3
1a004bf4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a004bf8:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004bfc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a004c00:	4a28      	ldr	r2, [pc, #160]	; (1a004ca4 <xPortStartScheduler+0xfc>)
1a004c02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a004c04:	4b28      	ldr	r3, [pc, #160]	; (1a004ca8 <xPortStartScheduler+0x100>)
1a004c06:	2207      	movs	r2, #7
1a004c08:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a004c0a:	e009      	b.n	1a004c20 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a004c0c:	4a26      	ldr	r2, [pc, #152]	; (1a004ca8 <xPortStartScheduler+0x100>)
1a004c0e:	6813      	ldr	r3, [r2, #0]
1a004c10:	3b01      	subs	r3, #1
1a004c12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a004c14:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004c18:	005b      	lsls	r3, r3, #1
1a004c1a:	b2db      	uxtb	r3, r3
1a004c1c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a004c20:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a004c24:	f013 0f80 	tst.w	r3, #128	; 0x80
1a004c28:	d1f0      	bne.n	1a004c0c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a004c2a:	4b1f      	ldr	r3, [pc, #124]	; (1a004ca8 <xPortStartScheduler+0x100>)
1a004c2c:	681b      	ldr	r3, [r3, #0]
1a004c2e:	2b04      	cmp	r3, #4
1a004c30:	d008      	beq.n	1a004c44 <xPortStartScheduler+0x9c>
1a004c32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004c36:	f383 8811 	msr	BASEPRI, r3
1a004c3a:	f3bf 8f6f 	isb	sy
1a004c3e:	f3bf 8f4f 	dsb	sy
1a004c42:	e7fe      	b.n	1a004c42 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a004c44:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a004c46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a004c4a:	4a17      	ldr	r2, [pc, #92]	; (1a004ca8 <xPortStartScheduler+0x100>)
1a004c4c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a004c4e:	9b01      	ldr	r3, [sp, #4]
1a004c50:	b2db      	uxtb	r3, r3
1a004c52:	4a13      	ldr	r2, [pc, #76]	; (1a004ca0 <xPortStartScheduler+0xf8>)
1a004c54:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a004c56:	4b15      	ldr	r3, [pc, #84]	; (1a004cac <xPortStartScheduler+0x104>)
1a004c58:	681a      	ldr	r2, [r3, #0]
1a004c5a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a004c5e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a004c60:	681a      	ldr	r2, [r3, #0]
1a004c62:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a004c66:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a004c68:	f7ff ff82 	bl	1a004b70 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a004c6c:	2400      	movs	r4, #0
1a004c6e:	4b10      	ldr	r3, [pc, #64]	; (1a004cb0 <xPortStartScheduler+0x108>)
1a004c70:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a004c72:	f7ff fec3 	bl	1a0049fc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a004c76:	4a0f      	ldr	r2, [pc, #60]	; (1a004cb4 <xPortStartScheduler+0x10c>)
1a004c78:	6813      	ldr	r3, [r2, #0]
1a004c7a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a004c7e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a004c80:	f7ff fea8 	bl	1a0049d4 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a004c84:	f7ff fa8e 	bl	1a0041a4 <vTaskSwitchContext>
	prvTaskExitError();
1a004c88:	f7ff fe84 	bl	1a004994 <prvTaskExitError>
}
1a004c8c:	4620      	mov	r0, r4
1a004c8e:	b002      	add	sp, #8
1a004c90:	bd10      	pop	{r4, pc}
1a004c92:	bf00      	nop
1a004c94:	e000ed00 	.word	0xe000ed00
1a004c98:	410fc271 	.word	0x410fc271
1a004c9c:	410fc270 	.word	0x410fc270
1a004ca0:	e000e400 	.word	0xe000e400
1a004ca4:	10003434 	.word	0x10003434
1a004ca8:	10003438 	.word	0x10003438
1a004cac:	e000ed20 	.word	0xe000ed20
1a004cb0:	10000008 	.word	0x10000008
1a004cb4:	e000ef34 	.word	0xe000ef34

1a004cb8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a004cb8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a004cbc:	2b0f      	cmp	r3, #15
1a004cbe:	d90f      	bls.n	1a004ce0 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a004cc0:	4a10      	ldr	r2, [pc, #64]	; (1a004d04 <vPortValidateInterruptPriority+0x4c>)
1a004cc2:	5c9b      	ldrb	r3, [r3, r2]
1a004cc4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a004cc6:	4a10      	ldr	r2, [pc, #64]	; (1a004d08 <vPortValidateInterruptPriority+0x50>)
1a004cc8:	7812      	ldrb	r2, [r2, #0]
1a004cca:	429a      	cmp	r2, r3
1a004ccc:	d908      	bls.n	1a004ce0 <vPortValidateInterruptPriority+0x28>
1a004cce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004cd2:	f383 8811 	msr	BASEPRI, r3
1a004cd6:	f3bf 8f6f 	isb	sy
1a004cda:	f3bf 8f4f 	dsb	sy
1a004cde:	e7fe      	b.n	1a004cde <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a004ce0:	4b0a      	ldr	r3, [pc, #40]	; (1a004d0c <vPortValidateInterruptPriority+0x54>)
1a004ce2:	681b      	ldr	r3, [r3, #0]
1a004ce4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a004ce8:	4a09      	ldr	r2, [pc, #36]	; (1a004d10 <vPortValidateInterruptPriority+0x58>)
1a004cea:	6812      	ldr	r2, [r2, #0]
1a004cec:	4293      	cmp	r3, r2
1a004cee:	d908      	bls.n	1a004d02 <vPortValidateInterruptPriority+0x4a>
1a004cf0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a004cf4:	f383 8811 	msr	BASEPRI, r3
1a004cf8:	f3bf 8f6f 	isb	sy
1a004cfc:	f3bf 8f4f 	dsb	sy
1a004d00:	e7fe      	b.n	1a004d00 <vPortValidateInterruptPriority+0x48>
	}
1a004d02:	4770      	bx	lr
1a004d04:	e000e3f0 	.word	0xe000e3f0
1a004d08:	10003434 	.word	0x10003434
1a004d0c:	e000ed0c 	.word	0xe000ed0c
1a004d10:	10003438 	.word	0x10003438

1a004d14 <newCardStatus>:
static FSSDC_StatusUpdateCallback_Func  g_statusUpdateCallback = NULL;
static enum FSSDC_CardStatus            g_cardStatus = FSSDC_CardStatus_Removed;


static void newCardStatus (enum FSSDC_CardStatus cardStatus)
{
1a004d14:	b508      	push	{r3, lr}
    g_cardStatus = cardStatus;
1a004d16:	4b03      	ldr	r3, [pc, #12]	; (1a004d24 <newCardStatus+0x10>)
1a004d18:	7018      	strb	r0, [r3, #0]
    if (g_statusUpdateCallback)
1a004d1a:	4b03      	ldr	r3, [pc, #12]	; (1a004d28 <newCardStatus+0x14>)
1a004d1c:	681b      	ldr	r3, [r3, #0]
1a004d1e:	b103      	cbz	r3, 1a004d22 <newCardStatus+0xe>
    {
        g_statusUpdateCallback (g_cardStatus);
1a004d20:	4798      	blx	r3
    }
}
1a004d22:	bd08      	pop	{r3, pc}
1a004d24:	1000000c 	.word	0x1000000c
1a004d28:	10003440 	.word	0x10003440

1a004d2c <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a004d2c:	2001      	movs	r0, #1
1a004d2e:	4770      	bx	lr

1a004d30 <SSPSend>:
{
1a004d30:	b500      	push	{lr}
1a004d32:	b087      	sub	sp, #28
	xferConfig.tx_data = buf;
1a004d34:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a004d36:	2300      	movs	r3, #0
1a004d38:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a004d3a:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a004d3c:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a004d3e:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a004d40:	a901      	add	r1, sp, #4
1a004d42:	4803      	ldr	r0, [pc, #12]	; (1a004d50 <SSPSend+0x20>)
1a004d44:	f001 fd61 	bl	1a00680a <Chip_SSP_RWFrames_Blocking>
}
1a004d48:	b007      	add	sp, #28
1a004d4a:	f85d fb04 	ldr.w	pc, [sp], #4
1a004d4e:	bf00      	nop
1a004d50:	400c5000 	.word	0x400c5000

1a004d54 <xmit_spi>:
{
1a004d54:	b500      	push	{lr}
1a004d56:	b083      	sub	sp, #12
1a004d58:	ab02      	add	r3, sp, #8
1a004d5a:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a004d5e:	2101      	movs	r1, #1
1a004d60:	4618      	mov	r0, r3
1a004d62:	f7ff ffe5 	bl	1a004d30 <SSPSend>
}
1a004d66:	b003      	add	sp, #12
1a004d68:	f85d fb04 	ldr.w	pc, [sp], #4

1a004d6c <SSPReceive>:
{
1a004d6c:	b500      	push	{lr}
1a004d6e:	b087      	sub	sp, #28
	xferConfig.tx_data = NULL;
1a004d70:	2300      	movs	r3, #0
1a004d72:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a004d74:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a004d76:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a004d78:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a004d7a:	9105      	str	r1, [sp, #20]
	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a004d7c:	a901      	add	r1, sp, #4
1a004d7e:	4803      	ldr	r0, [pc, #12]	; (1a004d8c <SSPReceive+0x20>)
1a004d80:	f001 fd43 	bl	1a00680a <Chip_SSP_RWFrames_Blocking>
}
1a004d84:	b007      	add	sp, #28
1a004d86:	f85d fb04 	ldr.w	pc, [sp], #4
1a004d8a:	bf00      	nop
1a004d8c:	400c5000 	.word	0x400c5000

1a004d90 <rcvr_spi>:
{
1a004d90:	b500      	push	{lr}
1a004d92:	b083      	sub	sp, #12
    BYTE data = 0;
1a004d94:	a802      	add	r0, sp, #8
1a004d96:	2300      	movs	r3, #0
1a004d98:	f800 3d01 	strb.w	r3, [r0, #-1]!
    SSPReceive(&data, 1);
1a004d9c:	2101      	movs	r1, #1
1a004d9e:	f7ff ffe5 	bl	1a004d6c <SSPReceive>
}
1a004da2:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a004da6:	b003      	add	sp, #12
1a004da8:	f85d fb04 	ldr.w	pc, [sp], #4

1a004dac <wait_ready>:
{
1a004dac:	b508      	push	{r3, lr}
	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a004dae:	4b07      	ldr	r3, [pc, #28]	; (1a004dcc <wait_ready+0x20>)
1a004db0:	2232      	movs	r2, #50	; 0x32
1a004db2:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a004db4:	f7ff ffec 	bl	1a004d90 <rcvr_spi>
		res = rcvr_spi();
1a004db8:	f7ff ffea 	bl	1a004d90 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a004dbc:	28ff      	cmp	r0, #255	; 0xff
1a004dbe:	d003      	beq.n	1a004dc8 <wait_ready+0x1c>
1a004dc0:	4b02      	ldr	r3, [pc, #8]	; (1a004dcc <wait_ready+0x20>)
1a004dc2:	781b      	ldrb	r3, [r3, #0]
1a004dc4:	2b00      	cmp	r3, #0
1a004dc6:	d1f7      	bne.n	1a004db8 <wait_ready+0xc>
}
1a004dc8:	bd08      	pop	{r3, pc}
1a004dca:	bf00      	nop
1a004dcc:	1000343e 	.word	0x1000343e

1a004dd0 <deselect>:
{
1a004dd0:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a004dd2:	4a04      	ldr	r2, [pc, #16]	; (1a004de4 <deselect+0x14>)
1a004dd4:	f242 230c 	movw	r3, #8716	; 0x220c
1a004dd8:	2101      	movs	r1, #1
1a004dda:	50d1      	str	r1, [r2, r3]
	rcvr_spi();
1a004ddc:	f7ff ffd8 	bl	1a004d90 <rcvr_spi>
}
1a004de0:	bd08      	pop	{r3, pc}
1a004de2:	bf00      	nop
1a004de4:	400f4000 	.word	0x400f4000

1a004de8 <select_>:
{
1a004de8:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a004dea:	4a07      	ldr	r2, [pc, #28]	; (1a004e08 <select_+0x20>)
1a004dec:	f242 238c 	movw	r3, #8844	; 0x228c
1a004df0:	2101      	movs	r1, #1
1a004df2:	50d1      	str	r1, [r2, r3]
	if (wait_ready() != 0xFF) {
1a004df4:	f7ff ffda 	bl	1a004dac <wait_ready>
1a004df8:	28ff      	cmp	r0, #255	; 0xff
1a004dfa:	d003      	beq.n	1a004e04 <select_+0x1c>
		deselect();
1a004dfc:	f7ff ffe8 	bl	1a004dd0 <deselect>
		return FALSE;
1a004e00:	2000      	movs	r0, #0
}
1a004e02:	bd08      	pop	{r3, pc}
	return TRUE;
1a004e04:	2001      	movs	r0, #1
1a004e06:	e7fc      	b.n	1a004e02 <select_+0x1a>
1a004e08:	400f4000 	.word	0x400f4000

1a004e0c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a004e0c:	b538      	push	{r3, r4, r5, lr}
1a004e0e:	4604      	mov	r4, r0
1a004e10:	460d      	mov	r5, r1
	BYTE n, res;


    if (cmd & 0x80)                     /* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a004e12:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004e16:	d129      	bne.n	1a004e6c <send_cmd+0x60>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
1a004e18:	f7ff ffda 	bl	1a004dd0 <deselect>
	if (!select_()) 
1a004e1c:	f7ff ffe4 	bl	1a004de8 <select_>
1a004e20:	b3a0      	cbz	r0, 1a004e8c <send_cmd+0x80>
    {
        return 0xFF;
    }

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a004e22:	4620      	mov	r0, r4
1a004e24:	f7ff ff96 	bl	1a004d54 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a004e28:	0e28      	lsrs	r0, r5, #24
1a004e2a:	f7ff ff93 	bl	1a004d54 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a004e2e:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a004e32:	f7ff ff8f 	bl	1a004d54 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a004e36:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a004e3a:	f7ff ff8b 	bl	1a004d54 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a004e3e:	b2e8      	uxtb	r0, r5
1a004e40:	f7ff ff88 	bl	1a004d54 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
    
	if (cmd == CMD0_) 
1a004e44:	2c40      	cmp	r4, #64	; 0x40
1a004e46:	d01a      	beq.n	1a004e7e <send_cmd+0x72>
	n = 0x01;							/* Dummy CRC + Stop */
1a004e48:	2001      	movs	r0, #1
    {
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
    }
    
	if (cmd == CMD8)
1a004e4a:	2c48      	cmp	r4, #72	; 0x48
1a004e4c:	d019      	beq.n	1a004e82 <send_cmd+0x76>
    {
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
    }
    
	xmit_spi(n);
1a004e4e:	f7ff ff81 	bl	1a004d54 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) 
1a004e52:	2c4c      	cmp	r4, #76	; 0x4c
1a004e54:	d017      	beq.n	1a004e86 <send_cmd+0x7a>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a004e56:	240a      	movs	r4, #10
    }
    
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
    {
		res = rcvr_spi();
1a004e58:	f7ff ff9a 	bl	1a004d90 <rcvr_spi>
    }
	while ((res & 0x80) && --n);
1a004e5c:	f010 0f80 	tst.w	r0, #128	; 0x80
1a004e60:	d015      	beq.n	1a004e8e <send_cmd+0x82>
1a004e62:	1e63      	subs	r3, r4, #1
1a004e64:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a004e68:	d1f6      	bne.n	1a004e58 <send_cmd+0x4c>
1a004e6a:	e010      	b.n	1a004e8e <send_cmd+0x82>
		cmd &= 0x7F;
1a004e6c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a004e70:	2100      	movs	r1, #0
1a004e72:	2077      	movs	r0, #119	; 0x77
1a004e74:	f7ff ffca 	bl	1a004e0c <send_cmd>
		if (res > 1) return res;
1a004e78:	2801      	cmp	r0, #1
1a004e7a:	d808      	bhi.n	1a004e8e <send_cmd+0x82>
1a004e7c:	e7cc      	b.n	1a004e18 <send_cmd+0xc>
        n = 0x95;                       /* Valid CRC for CMD0_(0) */
1a004e7e:	2095      	movs	r0, #149	; 0x95
1a004e80:	e7e3      	b.n	1a004e4a <send_cmd+0x3e>
        n = 0x87;                       /* Valid CRC for CMD8(0x1AA) */
1a004e82:	2087      	movs	r0, #135	; 0x87
1a004e84:	e7e3      	b.n	1a004e4e <send_cmd+0x42>
        rcvr_spi();                     /* Skip a stuff byte when stop reading */
1a004e86:	f7ff ff83 	bl	1a004d90 <rcvr_spi>
1a004e8a:	e7e4      	b.n	1a004e56 <send_cmd+0x4a>
        return 0xFF;
1a004e8c:	20ff      	movs	r0, #255	; 0xff

	return res;			/* Return with the response value */
}
1a004e8e:	bd38      	pop	{r3, r4, r5, pc}

1a004e90 <xmit_datablock>:
{
1a004e90:	b570      	push	{r4, r5, r6, lr}
1a004e92:	4606      	mov	r6, r0
1a004e94:	460c      	mov	r4, r1
	if (wait_ready() != 0xFF) 
1a004e96:	f7ff ff89 	bl	1a004dac <wait_ready>
1a004e9a:	28ff      	cmp	r0, #255	; 0xff
1a004e9c:	d001      	beq.n	1a004ea2 <xmit_datablock+0x12>
        return FALSE;
1a004e9e:	2000      	movs	r0, #0
}
1a004ea0:	bd70      	pop	{r4, r5, r6, pc}
	xmit_spi(token);					/* Xmit data token */
1a004ea2:	4620      	mov	r0, r4
1a004ea4:	f7ff ff56 	bl	1a004d54 <xmit_spi>
	if (token != 0xFD)                  /* Is data token */
1a004ea8:	2cfd      	cmp	r4, #253	; 0xfd
1a004eaa:	d01b      	beq.n	1a004ee4 <xmit_datablock+0x54>
		wc = 0;
1a004eac:	2400      	movs	r4, #0
			xmit_spi(*buff++);
1a004eae:	4635      	mov	r5, r6
1a004eb0:	f815 0b02 	ldrb.w	r0, [r5], #2
1a004eb4:	f7ff ff4e 	bl	1a004d54 <xmit_spi>
			xmit_spi(*buff++);
1a004eb8:	7870      	ldrb	r0, [r6, #1]
1a004eba:	f7ff ff4b 	bl	1a004d54 <xmit_spi>
        while (--wc);
1a004ebe:	1e63      	subs	r3, r4, #1
			xmit_spi(*buff++);
1a004ec0:	462e      	mov	r6, r5
        while (--wc);
1a004ec2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a004ec6:	d1f2      	bne.n	1a004eae <xmit_datablock+0x1e>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a004ec8:	20ff      	movs	r0, #255	; 0xff
1a004eca:	f7ff ff43 	bl	1a004d54 <xmit_spi>
		xmit_spi(0xFF);
1a004ece:	20ff      	movs	r0, #255	; 0xff
1a004ed0:	f7ff ff40 	bl	1a004d54 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a004ed4:	f7ff ff5c 	bl	1a004d90 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a004ed8:	f000 001f 	and.w	r0, r0, #31
1a004edc:	2805      	cmp	r0, #5
1a004ede:	d003      	beq.n	1a004ee8 <xmit_datablock+0x58>
			return FALSE;
1a004ee0:	2000      	movs	r0, #0
1a004ee2:	e7dd      	b.n	1a004ea0 <xmit_datablock+0x10>
	return TRUE;
1a004ee4:	2001      	movs	r0, #1
1a004ee6:	e7db      	b.n	1a004ea0 <xmit_datablock+0x10>
1a004ee8:	2001      	movs	r0, #1
1a004eea:	e7d9      	b.n	1a004ea0 <xmit_datablock+0x10>

1a004eec <rcvr_datablock>:
{
1a004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a004eee:	4604      	mov	r4, r0
1a004ef0:	460e      	mov	r6, r1
	Timer1 = 20;
1a004ef2:	4b15      	ldr	r3, [pc, #84]	; (1a004f48 <rcvr_datablock+0x5c>)
1a004ef4:	2214      	movs	r2, #20
1a004ef6:	701a      	strb	r2, [r3, #0]
		token = rcvr_spi();
1a004ef8:	f7ff ff4a 	bl	1a004d90 <rcvr_spi>
    while ((token == 0xFF) && Timer1);
1a004efc:	28ff      	cmp	r0, #255	; 0xff
1a004efe:	d103      	bne.n	1a004f08 <rcvr_datablock+0x1c>
1a004f00:	4b11      	ldr	r3, [pc, #68]	; (1a004f48 <rcvr_datablock+0x5c>)
1a004f02:	781b      	ldrb	r3, [r3, #0]
1a004f04:	2b00      	cmp	r3, #0
1a004f06:	d1f7      	bne.n	1a004ef8 <rcvr_datablock+0xc>
	if (token != 0xFE) 
1a004f08:	28fe      	cmp	r0, #254	; 0xfe
1a004f0a:	d001      	beq.n	1a004f10 <rcvr_datablock+0x24>
        return FALSE;               /* If not valid data token, retutn with error */
1a004f0c:	2000      	movs	r0, #0
}
1a004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rcvr_spi_m(buff++);
1a004f10:	1c65      	adds	r5, r4, #1
1a004f12:	2101      	movs	r1, #1
1a004f14:	4620      	mov	r0, r4
1a004f16:	f7ff ff29 	bl	1a004d6c <SSPReceive>
		rcvr_spi_m(buff++);
1a004f1a:	1ca7      	adds	r7, r4, #2
1a004f1c:	2101      	movs	r1, #1
1a004f1e:	4628      	mov	r0, r5
1a004f20:	f7ff ff24 	bl	1a004d6c <SSPReceive>
		rcvr_spi_m(buff++);
1a004f24:	1ce5      	adds	r5, r4, #3
1a004f26:	2101      	movs	r1, #1
1a004f28:	4638      	mov	r0, r7
1a004f2a:	f7ff ff1f 	bl	1a004d6c <SSPReceive>
		rcvr_spi_m(buff++);
1a004f2e:	2101      	movs	r1, #1
1a004f30:	4628      	mov	r0, r5
1a004f32:	3404      	adds	r4, #4
1a004f34:	f7ff ff1a 	bl	1a004d6c <SSPReceive>
    while (btr -= 4);
1a004f38:	3e04      	subs	r6, #4
1a004f3a:	d1e9      	bne.n	1a004f10 <rcvr_datablock+0x24>
	rcvr_spi();						/* Discard CRC */
1a004f3c:	f7ff ff28 	bl	1a004d90 <rcvr_spi>
	rcvr_spi();
1a004f40:	f7ff ff26 	bl	1a004d90 <rcvr_spi>
	return TRUE;					/* Return with success */
1a004f44:	2001      	movs	r0, #1
1a004f46:	e7e2      	b.n	1a004f0e <rcvr_datablock+0x22>
1a004f48:	1000343d 	.word	0x1000343d

1a004f4c <FSSDC_FatFs_DiskStatus>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskStatus ()
{
	return g_diskStats;
1a004f4c:	4b01      	ldr	r3, [pc, #4]	; (1a004f54 <FSSDC_FatFs_DiskStatus+0x8>)
1a004f4e:	7818      	ldrb	r0, [r3, #0]
}
1a004f50:	4770      	bx	lr
1a004f52:	bf00      	nop
1a004f54:	1000000d 	.word	0x1000000d

1a004f58 <FSSDC_FatFs_DiskInitialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS FSSDC_FatFs_DiskInitialize ()
{
1a004f58:	b570      	push	{r4, r5, r6, lr}
1a004f5a:	b082      	sub	sp, #8
	BYTE n, cmd, ty, ocr[4];

    if (g_diskStats & STA_NODISK)
1a004f5c:	4b5f      	ldr	r3, [pc, #380]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004f5e:	781b      	ldrb	r3, [r3, #0]
1a004f60:	f013 0f02 	tst.w	r3, #2
1a004f64:	d109      	bne.n	1a004f7a <FSSDC_FatFs_DiskInitialize+0x22>
    {
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
        return g_diskStats;                 /* No card in the socket */
    }
    
    if (!(g_diskStats & STA_NOINIT))        /* Already initialized */
1a004f66:	4b5d      	ldr	r3, [pc, #372]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004f68:	781b      	ldrb	r3, [r3, #0]
1a004f6a:	f013 0f01 	tst.w	r3, #1
1a004f6e:	d10b      	bne.n	1a004f88 <FSSDC_FatFs_DiskInitialize+0x30>
    {
        return g_diskStats;
1a004f70:	4b5a      	ldr	r3, [pc, #360]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004f72:	7818      	ldrb	r0, [r3, #0]
1a004f74:	b2c0      	uxtb	r0, r0
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
        newCardStatus (FSSDC_CardStatus_Error); 
	}

	return g_diskStats;
}
1a004f76:	b002      	add	sp, #8
1a004f78:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Init] No card in socket.\r\n");
1a004f7a:	4859      	ldr	r0, [pc, #356]	; (1a0050e0 <FSSDC_FatFs_DiskInitialize+0x188>)
1a004f7c:	f000 fc48 	bl	1a005810 <Board_UARTPutSTR>
        return g_diskStats;                 /* No card in the socket */
1a004f80:	4b56      	ldr	r3, [pc, #344]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004f82:	7818      	ldrb	r0, [r3, #0]
1a004f84:	b2c0      	uxtb	r0, r0
1a004f86:	e7f6      	b.n	1a004f76 <FSSDC_FatFs_DiskInitialize+0x1e>
    Board_UARTPutSTR ("FSSDC: [Init] Initialization begins.\r\n");
1a004f88:	4856      	ldr	r0, [pc, #344]	; (1a0050e4 <FSSDC_FatFs_DiskInitialize+0x18c>)
1a004f8a:	f000 fc41 	bl	1a005810 <Board_UARTPutSTR>
	FCLK_SLOW();
1a004f8e:	4b56      	ldr	r3, [pc, #344]	; (1a0050e8 <FSSDC_FatFs_DiskInitialize+0x190>)
1a004f90:	6819      	ldr	r1, [r3, #0]
1a004f92:	4856      	ldr	r0, [pc, #344]	; (1a0050ec <FSSDC_FatFs_DiskInitialize+0x194>)
1a004f94:	f001 fc8e 	bl	1a0068b4 <Chip_SSP_SetBitRate>
	for (n = 10; n; n--) 
1a004f98:	240a      	movs	r4, #10
1a004f9a:	e003      	b.n	1a004fa4 <FSSDC_FatFs_DiskInitialize+0x4c>
        rcvr_spi();	/* 80 dummy clocks */
1a004f9c:	f7ff fef8 	bl	1a004d90 <rcvr_spi>
	for (n = 10; n; n--) 
1a004fa0:	3c01      	subs	r4, #1
1a004fa2:	b2e4      	uxtb	r4, r4
1a004fa4:	2c00      	cmp	r4, #0
1a004fa6:	d1f9      	bne.n	1a004f9c <FSSDC_FatFs_DiskInitialize+0x44>
    Board_UARTPutSTR ("FSSDC: [Init] New card status: Native Mode.\r\n");
1a004fa8:	4851      	ldr	r0, [pc, #324]	; (1a0050f0 <FSSDC_FatFs_DiskInitialize+0x198>)
1a004faa:	f000 fc31 	bl	1a005810 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_NativeMode);    
1a004fae:	2003      	movs	r0, #3
1a004fb0:	f7ff feb0 	bl	1a004d14 <newCardStatus>
	if (send_cmd(CMD0_, 0) == 1)                                /* Enter Idle state */
1a004fb4:	2100      	movs	r1, #0
1a004fb6:	2040      	movs	r0, #64	; 0x40
1a004fb8:	f7ff ff28 	bl	1a004e0c <send_cmd>
1a004fbc:	4605      	mov	r5, r0
1a004fbe:	2801      	cmp	r0, #1
1a004fc0:	d019      	beq.n	1a004ff6 <FSSDC_FatFs_DiskInitialize+0x9e>
	CardType = ty;
1a004fc2:	4b4c      	ldr	r3, [pc, #304]	; (1a0050f4 <FSSDC_FatFs_DiskInitialize+0x19c>)
1a004fc4:	701c      	strb	r4, [r3, #0]
	deselect();
1a004fc6:	f7ff ff03 	bl	1a004dd0 <deselect>
    if (ty)                                             /* Initialization succeded */
1a004fca:	2c00      	cmp	r4, #0
1a004fcc:	d07f      	beq.n	1a0050ce <FSSDC_FatFs_DiskInitialize+0x176>
		g_diskStats &= ~STA_NOINIT;                     /* Clear STA_NOINIT */
1a004fce:	4a43      	ldr	r2, [pc, #268]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004fd0:	7813      	ldrb	r3, [r2, #0]
1a004fd2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a004fd6:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
1a004fd8:	4b47      	ldr	r3, [pc, #284]	; (1a0050f8 <FSSDC_FatFs_DiskInitialize+0x1a0>)
1a004fda:	6819      	ldr	r1, [r3, #0]
1a004fdc:	4843      	ldr	r0, [pc, #268]	; (1a0050ec <FSSDC_FatFs_DiskInitialize+0x194>)
1a004fde:	f001 fc69 	bl	1a0068b4 <Chip_SSP_SetBitRate>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Ready (Fast Clock).\r\n");        
1a004fe2:	4846      	ldr	r0, [pc, #280]	; (1a0050fc <FSSDC_FatFs_DiskInitialize+0x1a4>)
1a004fe4:	f000 fc14 	bl	1a005810 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Ready);        
1a004fe8:	2005      	movs	r0, #5
1a004fea:	f7ff fe93 	bl	1a004d14 <newCardStatus>
	return g_diskStats;
1a004fee:	4b3b      	ldr	r3, [pc, #236]	; (1a0050dc <FSSDC_FatFs_DiskInitialize+0x184>)
1a004ff0:	7818      	ldrb	r0, [r3, #0]
1a004ff2:	b2c0      	uxtb	r0, r0
1a004ff4:	e7bf      	b.n	1a004f76 <FSSDC_FatFs_DiskInitialize+0x1e>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Initializing.\r\n");        
1a004ff6:	4842      	ldr	r0, [pc, #264]	; (1a005100 <FSSDC_FatFs_DiskInitialize+0x1a8>)
1a004ff8:	f000 fc0a 	bl	1a005810 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Initializing);
1a004ffc:	2004      	movs	r0, #4
1a004ffe:	f7ff fe89 	bl	1a004d14 <newCardStatus>
		Timer1 = 100;                                           /* Initialization timeout of 1000 msec */
1a005002:	4b40      	ldr	r3, [pc, #256]	; (1a005104 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005004:	2264      	movs	r2, #100	; 0x64
1a005006:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1)                         /* SDHC */
1a005008:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a00500c:	2048      	movs	r0, #72	; 0x48
1a00500e:	f7ff fefd 	bl	1a004e0c <send_cmd>
1a005012:	2801      	cmp	r0, #1
1a005014:	d139      	bne.n	1a00508a <FSSDC_FatFs_DiskInitialize+0x132>
			for (n = 0; n < 4; n++) 
1a005016:	4625      	mov	r5, r4
1a005018:	e007      	b.n	1a00502a <FSSDC_FatFs_DiskInitialize+0xd2>
                ocr[n] = rcvr_spi();                            /* Get trailing return value of R7 resp */
1a00501a:	f7ff feb9 	bl	1a004d90 <rcvr_spi>
1a00501e:	ab02      	add	r3, sp, #8
1a005020:	442b      	add	r3, r5
1a005022:	f803 0c04 	strb.w	r0, [r3, #-4]
			for (n = 0; n < 4; n++) 
1a005026:	3501      	adds	r5, #1
1a005028:	b2ed      	uxtb	r5, r5
1a00502a:	2d03      	cmp	r5, #3
1a00502c:	d9f5      	bls.n	1a00501a <FSSDC_FatFs_DiskInitialize+0xc2>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)               /* The card can work at vdd range of 2.7-3.6V */ 
1a00502e:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a005032:	2b01      	cmp	r3, #1
1a005034:	d1c5      	bne.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a005036:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00503a:	2baa      	cmp	r3, #170	; 0xaa
1a00503c:	d1c1      	bne.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a00503e:	4b31      	ldr	r3, [pc, #196]	; (1a005104 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005040:	781b      	ldrb	r3, [r3, #0]
1a005042:	b133      	cbz	r3, 1a005052 <FSSDC_FatFs_DiskInitialize+0xfa>
1a005044:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a005048:	20e9      	movs	r0, #233	; 0xe9
1a00504a:	f7ff fedf 	bl	1a004e0c <send_cmd>
1a00504e:	2800      	cmp	r0, #0
1a005050:	d1f5      	bne.n	1a00503e <FSSDC_FatFs_DiskInitialize+0xe6>
                if (Timer1 && send_cmd(CMD58, 0) == 0) 
1a005052:	4b2c      	ldr	r3, [pc, #176]	; (1a005104 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a005054:	781b      	ldrb	r3, [r3, #0]
1a005056:	2b00      	cmp	r3, #0
1a005058:	d0b3      	beq.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a00505a:	2100      	movs	r1, #0
1a00505c:	207a      	movs	r0, #122	; 0x7a
1a00505e:	f7ff fed5 	bl	1a004e0c <send_cmd>
1a005062:	4605      	mov	r5, r0
1a005064:	b140      	cbz	r0, 1a005078 <FSSDC_FatFs_DiskInitialize+0x120>
1a005066:	e7ac      	b.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
                        ocr[n] = rcvr_spi();
1a005068:	f7ff fe92 	bl	1a004d90 <rcvr_spi>
1a00506c:	ab02      	add	r3, sp, #8
1a00506e:	442b      	add	r3, r5
1a005070:	f803 0c04 	strb.w	r0, [r3, #-4]
					for (n = 0; n < 4; n++)                     /* Check CCS bit in the OCR */
1a005074:	3501      	adds	r5, #1
1a005076:	b2ed      	uxtb	r5, r5
1a005078:	2d03      	cmp	r5, #3
1a00507a:	d9f5      	bls.n	1a005068 <FSSDC_FatFs_DiskInitialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a00507c:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a005080:	f013 0f40 	tst.w	r3, #64	; 0x40
1a005084:	d021      	beq.n	1a0050ca <FSSDC_FatFs_DiskInitialize+0x172>
1a005086:	240c      	movs	r4, #12
1a005088:	e79b      	b.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
			if (send_cmd(ACMD41, 0) <= 1)
1a00508a:	2100      	movs	r1, #0
1a00508c:	20e9      	movs	r0, #233	; 0xe9
1a00508e:	f7ff febd 	bl	1a004e0c <send_cmd>
1a005092:	2801      	cmp	r0, #1
1a005094:	d916      	bls.n	1a0050c4 <FSSDC_FatFs_DiskInitialize+0x16c>
				ty = CT_MMC; cmd = CMD1;                        /* MMCv3 */
1a005096:	2641      	movs	r6, #65	; 0x41
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a005098:	4b1a      	ldr	r3, [pc, #104]	; (1a005104 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a00509a:	781b      	ldrb	r3, [r3, #0]
1a00509c:	b12b      	cbz	r3, 1a0050aa <FSSDC_FatFs_DiskInitialize+0x152>
1a00509e:	2100      	movs	r1, #0
1a0050a0:	4630      	mov	r0, r6
1a0050a2:	f7ff feb3 	bl	1a004e0c <send_cmd>
1a0050a6:	2800      	cmp	r0, #0
1a0050a8:	d1f6      	bne.n	1a005098 <FSSDC_FatFs_DiskInitialize+0x140>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a0050aa:	4b16      	ldr	r3, [pc, #88]	; (1a005104 <FSSDC_FatFs_DiskInitialize+0x1ac>)
1a0050ac:	781b      	ldrb	r3, [r3, #0]
1a0050ae:	2b00      	cmp	r3, #0
1a0050b0:	d087      	beq.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0050b2:	f44f 7100 	mov.w	r1, #512	; 0x200
1a0050b6:	2050      	movs	r0, #80	; 0x50
1a0050b8:	f7ff fea8 	bl	1a004e0c <send_cmd>
1a0050bc:	2800      	cmp	r0, #0
1a0050be:	d180      	bne.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
1a0050c0:	462c      	mov	r4, r5
1a0050c2:	e77e      	b.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
				ty = CT_SD1; cmd = ACMD41;                      /* SDv1 */
1a0050c4:	2502      	movs	r5, #2
1a0050c6:	26e9      	movs	r6, #233	; 0xe9
1a0050c8:	e7e6      	b.n	1a005098 <FSSDC_FatFs_DiskInitialize+0x140>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a0050ca:	2404      	movs	r4, #4
1a0050cc:	e779      	b.n	1a004fc2 <FSSDC_FatFs_DiskInitialize+0x6a>
        Board_UARTPutSTR ("FSSDC: [Init] New card status: Error (Not Initialized).\r\n");        
1a0050ce:	480e      	ldr	r0, [pc, #56]	; (1a005108 <FSSDC_FatFs_DiskInitialize+0x1b0>)
1a0050d0:	f000 fb9e 	bl	1a005810 <Board_UARTPutSTR>
        newCardStatus (FSSDC_CardStatus_Error); 
1a0050d4:	2000      	movs	r0, #0
1a0050d6:	f7ff fe1d 	bl	1a004d14 <newCardStatus>
1a0050da:	e788      	b.n	1a004fee <FSSDC_FatFs_DiskInitialize+0x96>
1a0050dc:	1000000d 	.word	0x1000000d
1a0050e0:	1a009ab0 	.word	0x1a009ab0
1a0050e4:	1a009ad4 	.word	0x1a009ad4
1a0050e8:	10000014 	.word	0x10000014
1a0050ec:	400c5000 	.word	0x400c5000
1a0050f0:	1a009afc 	.word	0x1a009afc
1a0050f4:	1000343c 	.word	0x1000343c
1a0050f8:	10000010 	.word	0x10000010
1a0050fc:	1a009b5c 	.word	0x1a009b5c
1a005100:	1a009b2c 	.word	0x1a009b2c
1a005104:	1000343d 	.word	0x1000343d
1a005108:	1a009b94 	.word	0x1a009b94

1a00510c <FSSDC_FatFs_DiskRead>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskRead (BYTE *buff, DWORD sector, UINT count)
{   
1a00510c:	b538      	push	{r3, r4, r5, lr}
	if (g_diskStats & STA_NOINIT)
1a00510e:	4b1d      	ldr	r3, [pc, #116]	; (1a005184 <FSSDC_FatFs_DiskRead+0x78>)
1a005110:	781b      	ldrb	r3, [r3, #0]
1a005112:	f013 0f01 	tst.w	r3, #1
1a005116:	d121      	bne.n	1a00515c <FSSDC_FatFs_DiskRead+0x50>
1a005118:	4605      	mov	r5, r0
1a00511a:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
        return RES_NOTRDY;
    }

	if (!(CardType & CT_BLOCK)) 
1a00511c:	4b1a      	ldr	r3, [pc, #104]	; (1a005188 <FSSDC_FatFs_DiskRead+0x7c>)
1a00511e:	781b      	ldrb	r3, [r3, #0]
1a005120:	f013 0f08 	tst.w	r3, #8
1a005124:	d100      	bne.n	1a005128 <FSSDC_FatFs_DiskRead+0x1c>
    {
        sector *= 512;                      /* Convert to byte address if needed */
1a005126:	0249      	lsls	r1, r1, #9
    }

	if (count == 1) 
1a005128:	2c01      	cmp	r4, #1
1a00512a:	d01c      	beq.n	1a005166 <FSSDC_FatFs_DiskRead+0x5a>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else 
    {                                       /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) 
1a00512c:	2052      	movs	r0, #82	; 0x52
1a00512e:	f7ff fe6d 	bl	1a004e0c <send_cmd>
1a005132:	b968      	cbnz	r0, 1a005150 <FSSDC_FatFs_DiskRead+0x44>
        {                                   /* READ_MULTIPLE_BLOCK */
			do 
            {
				if (!rcvr_datablock(buff, 512)) 
1a005134:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005138:	4628      	mov	r0, r5
1a00513a:	f7ff fed7 	bl	1a004eec <rcvr_datablock>
1a00513e:	b118      	cbz	r0, 1a005148 <FSSDC_FatFs_DiskRead+0x3c>
                {
                    break;
                }
				buff += 512;
1a005140:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a005144:	3c01      	subs	r4, #1
1a005146:	d1f5      	bne.n	1a005134 <FSSDC_FatFs_DiskRead+0x28>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a005148:	2100      	movs	r1, #0
1a00514a:	204c      	movs	r0, #76	; 0x4c
1a00514c:	f7ff fe5e 	bl	1a004e0c <send_cmd>
		}
	}
	deselect();
1a005150:	f7ff fe3e 	bl	1a004dd0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a005154:	1c20      	adds	r0, r4, #0
1a005156:	bf18      	it	ne
1a005158:	2001      	movne	r0, #1
}
1a00515a:	bd38      	pop	{r3, r4, r5, pc}
        Board_UARTPutSTR ("FSSDC: [Read] Card not initialized.\r\n");
1a00515c:	480b      	ldr	r0, [pc, #44]	; (1a00518c <FSSDC_FatFs_DiskRead+0x80>)
1a00515e:	f000 fb57 	bl	1a005810 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a005162:	2003      	movs	r0, #3
1a005164:	e7f9      	b.n	1a00515a <FSSDC_FatFs_DiskRead+0x4e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a005166:	2051      	movs	r0, #81	; 0x51
1a005168:	f7ff fe50 	bl	1a004e0c <send_cmd>
1a00516c:	2800      	cmp	r0, #0
1a00516e:	d1ef      	bne.n	1a005150 <FSSDC_FatFs_DiskRead+0x44>
			&& rcvr_datablock(buff, 512))
1a005170:	f44f 7100 	mov.w	r1, #512	; 0x200
1a005174:	4628      	mov	r0, r5
1a005176:	f7ff feb9 	bl	1a004eec <rcvr_datablock>
1a00517a:	2800      	cmp	r0, #0
1a00517c:	d0e8      	beq.n	1a005150 <FSSDC_FatFs_DiskRead+0x44>
			count = 0;
1a00517e:	2400      	movs	r4, #0
1a005180:	e7e6      	b.n	1a005150 <FSSDC_FatFs_DiskRead+0x44>
1a005182:	bf00      	nop
1a005184:	1000000d 	.word	0x1000000d
1a005188:	1000343c 	.word	0x1000343c
1a00518c:	1a009c1c 	.word	0x1a009c1c

1a005190 <FSSDC_FatFs_DiskWrite>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
DRESULT FSSDC_FatFs_DiskWrite (const BYTE *buff, DWORD sector, UINT count)
{
1a005190:	b570      	push	{r4, r5, r6, lr}
	if (g_diskStats & STA_NOINIT)
1a005192:	4b28      	ldr	r3, [pc, #160]	; (1a005234 <FSSDC_FatFs_DiskWrite+0xa4>)
1a005194:	781b      	ldrb	r3, [r3, #0]
1a005196:	f013 0f01 	tst.w	r3, #1
1a00519a:	d12b      	bne.n	1a0051f4 <FSSDC_FatFs_DiskWrite+0x64>
1a00519c:	4605      	mov	r5, r0
1a00519e:	460e      	mov	r6, r1
1a0051a0:	4614      	mov	r4, r2
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
        return RES_NOTRDY;
    }
    
	if (g_diskStats & STA_PROTECT)
1a0051a2:	4b24      	ldr	r3, [pc, #144]	; (1a005234 <FSSDC_FatFs_DiskWrite+0xa4>)
1a0051a4:	781b      	ldrb	r3, [r3, #0]
1a0051a6:	f013 0f04 	tst.w	r3, #4
1a0051aa:	d128      	bne.n	1a0051fe <FSSDC_FatFs_DiskWrite+0x6e>
    {
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
        return RES_WRPRT;
    }

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0051ac:	4b22      	ldr	r3, [pc, #136]	; (1a005238 <FSSDC_FatFs_DiskWrite+0xa8>)
1a0051ae:	781b      	ldrb	r3, [r3, #0]
1a0051b0:	f013 0f08 	tst.w	r3, #8
1a0051b4:	d100      	bne.n	1a0051b8 <FSSDC_FatFs_DiskWrite+0x28>
1a0051b6:	024e      	lsls	r6, r1, #9

	if (count == 1) 
1a0051b8:	2c01      	cmp	r4, #1
1a0051ba:	d025      	beq.n	1a005208 <FSSDC_FatFs_DiskWrite+0x78>
			count = 0;
        }
	}
	else 
    {                                           /* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0051bc:	f013 0f06 	tst.w	r3, #6
1a0051c0:	d130      	bne.n	1a005224 <FSSDC_FatFs_DiskWrite+0x94>
		if (send_cmd(CMD25, sector) == 0) 
1a0051c2:	4631      	mov	r1, r6
1a0051c4:	2059      	movs	r0, #89	; 0x59
1a0051c6:	f7ff fe21 	bl	1a004e0c <send_cmd>
1a0051ca:	b968      	cbnz	r0, 1a0051e8 <FSSDC_FatFs_DiskWrite+0x58>
        {                                       /* WRITE_MULTIPLE_BLOCK */
			do 
            {
				if (!xmit_datablock(buff, 0xFC))
1a0051cc:	21fc      	movs	r1, #252	; 0xfc
1a0051ce:	4628      	mov	r0, r5
1a0051d0:	f7ff fe5e 	bl	1a004e90 <xmit_datablock>
1a0051d4:	b118      	cbz	r0, 1a0051de <FSSDC_FatFs_DiskWrite+0x4e>
                {
                    break;
                }
				buff += 512;
1a0051d6:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} 
            while (--count);
1a0051da:	3c01      	subs	r4, #1
1a0051dc:	d1f6      	bne.n	1a0051cc <FSSDC_FatFs_DiskWrite+0x3c>
			if (!xmit_datablock(0, 0xFD))       /* STOP_TRAN token */
1a0051de:	21fd      	movs	r1, #253	; 0xfd
1a0051e0:	2000      	movs	r0, #0
1a0051e2:	f7ff fe55 	bl	1a004e90 <xmit_datablock>
1a0051e6:	b310      	cbz	r0, 1a00522e <FSSDC_FatFs_DiskWrite+0x9e>
            {
				count = 1;
            }
		}
	}
	deselect();
1a0051e8:	f7ff fdf2 	bl	1a004dd0 <deselect>

	return count ? RES_ERROR : RES_OK;
1a0051ec:	1c20      	adds	r0, r4, #0
1a0051ee:	bf18      	it	ne
1a0051f0:	2001      	movne	r0, #1
}
1a0051f2:	bd70      	pop	{r4, r5, r6, pc}
        Board_UARTPutSTR ("FSSDC: [Write] Card not initialized.\r\n");
1a0051f4:	4811      	ldr	r0, [pc, #68]	; (1a00523c <FSSDC_FatFs_DiskWrite+0xac>)
1a0051f6:	f000 fb0b 	bl	1a005810 <Board_UARTPutSTR>
        return RES_NOTRDY;
1a0051fa:	2003      	movs	r0, #3
1a0051fc:	e7f9      	b.n	1a0051f2 <FSSDC_FatFs_DiskWrite+0x62>
        Board_UARTPutSTR ("FSSDC: [Write] Card is write protected.\r\n");
1a0051fe:	4810      	ldr	r0, [pc, #64]	; (1a005240 <FSSDC_FatFs_DiskWrite+0xb0>)
1a005200:	f000 fb06 	bl	1a005810 <Board_UARTPutSTR>
        return RES_WRPRT;
1a005204:	2002      	movs	r0, #2
1a005206:	e7f4      	b.n	1a0051f2 <FSSDC_FatFs_DiskWrite+0x62>
		if ((send_cmd(CMD24, sector) == 0)      /* WRITE_BLOCK */
1a005208:	4631      	mov	r1, r6
1a00520a:	2058      	movs	r0, #88	; 0x58
1a00520c:	f7ff fdfe 	bl	1a004e0c <send_cmd>
1a005210:	2800      	cmp	r0, #0
1a005212:	d1e9      	bne.n	1a0051e8 <FSSDC_FatFs_DiskWrite+0x58>
                    && xmit_datablock(buff, 0xFE))
1a005214:	21fe      	movs	r1, #254	; 0xfe
1a005216:	4628      	mov	r0, r5
1a005218:	f7ff fe3a 	bl	1a004e90 <xmit_datablock>
1a00521c:	2800      	cmp	r0, #0
1a00521e:	d0e3      	beq.n	1a0051e8 <FSSDC_FatFs_DiskWrite+0x58>
			count = 0;
1a005220:	2400      	movs	r4, #0
1a005222:	e7e1      	b.n	1a0051e8 <FSSDC_FatFs_DiskWrite+0x58>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a005224:	4621      	mov	r1, r4
1a005226:	20d7      	movs	r0, #215	; 0xd7
1a005228:	f7ff fdf0 	bl	1a004e0c <send_cmd>
1a00522c:	e7c9      	b.n	1a0051c2 <FSSDC_FatFs_DiskWrite+0x32>
				count = 1;
1a00522e:	2401      	movs	r4, #1
1a005230:	e7da      	b.n	1a0051e8 <FSSDC_FatFs_DiskWrite+0x58>
1a005232:	bf00      	nop
1a005234:	1000000d 	.word	0x1000000d
1a005238:	1000343c 	.word	0x1000343c
1a00523c:	1a009c44 	.word	0x1a009c44
1a005240:	1a009c6c 	.word	0x1a009c6c

1a005244 <FSSDC_FatFs_DiskIoCtl>:

/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/
DRESULT FSSDC_FatFs_DiskIoCtl (BYTE cmd, void *buff)
{
1a005244:	b570      	push	{r4, r5, r6, lr}
1a005246:	b084      	sub	sp, #16
1a005248:	460d      	mov	r5, r1
	BYTE n, csd[16], *ptr = buff;
	WORD csize;

	res = RES_ERROR;

	if (cmd == CTRL_POWER)
1a00524a:	2805      	cmp	r0, #5
1a00524c:	d018      	beq.n	1a005280 <FSSDC_FatFs_DiskIoCtl+0x3c>
			res = RES_PARERR;
		}
	}
	else 
    {
		if (g_diskStats & STA_NOINIT)
1a00524e:	4bb3      	ldr	r3, [pc, #716]	; (1a00551c <FSSDC_FatFs_DiskIoCtl+0x2d8>)
1a005250:	781b      	ldrb	r3, [r3, #0]
1a005252:	f013 0f01 	tst.w	r3, #1
1a005256:	d11f      	bne.n	1a005298 <FSSDC_FatFs_DiskIoCtl+0x54>
        {
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
            return RES_NOTRDY;
        }

		switch (cmd) {
1a005258:	280e      	cmp	r0, #14
1a00525a:	f200 814a 	bhi.w	1a0054f2 <FSSDC_FatFs_DiskIoCtl+0x2ae>
1a00525e:	e8df f010 	tbh	[pc, r0, lsl #1]
1a005262:	0020      	.short	0x0020
1a005264:	006f002d 	.word	0x006f002d
1a005268:	01480076 	.word	0x01480076
1a00526c:	01480148 	.word	0x01480148
1a005270:	01480148 	.word	0x01480148
1a005274:	00d30148 	.word	0x00d30148
1a005278:	00ea00da 	.word	0x00ea00da
1a00527c:	010c00f8 	.word	0x010c00f8
		switch (*ptr) {
1a005280:	780b      	ldrb	r3, [r1, #0]
1a005282:	2b01      	cmp	r3, #1
1a005284:	f240 8148 	bls.w	1a005518 <FSSDC_FatFs_DiskIoCtl+0x2d4>
1a005288:	2b02      	cmp	r3, #2
1a00528a:	f040 813e 	bne.w	1a00550a <FSSDC_FatFs_DiskIoCtl+0x2c6>
			*(ptr+1) = (BYTE)chk_power();
1a00528e:	f7ff fd4d 	bl	1a004d2c <chk_power>
1a005292:	7068      	strb	r0, [r5, #1]
			res = RES_OK;
1a005294:	2400      	movs	r4, #0
1a005296:	e13c      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
            Board_UARTPutSTR ("FSSDC: [IOCtl] Card not initialized.\r\n");
1a005298:	48a1      	ldr	r0, [pc, #644]	; (1a005520 <FSSDC_FatFs_DiskIoCtl+0x2dc>)
1a00529a:	f000 fab9 	bl	1a005810 <Board_UARTPutSTR>
            return RES_NOTRDY;
1a00529e:	2403      	movs	r4, #3
1a0052a0:	e137      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		case CTRL_SYNC :                    /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) 
1a0052a2:	f7ff fda1 	bl	1a004de8 <select_>
1a0052a6:	b918      	cbnz	r0, 1a0052b0 <FSSDC_FatFs_DiskIoCtl+0x6c>

		default:
			res = RES_PARERR;
		}

		deselect();
1a0052a8:	f7ff fd92 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0052ac:	2401      	movs	r4, #1
1a0052ae:	e12d      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
				deselect();
1a0052b0:	f7ff fd8e 	bl	1a004dd0 <deselect>
		deselect();
1a0052b4:	f7ff fd8c 	bl	1a004dd0 <deselect>
				res = RES_OK;
1a0052b8:	2400      	movs	r4, #0
1a0052ba:	e12a      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if ((send_cmd(CMD9, 0) == 0) 
1a0052bc:	2100      	movs	r1, #0
1a0052be:	2049      	movs	r0, #73	; 0x49
1a0052c0:	f7ff fda4 	bl	1a004e0c <send_cmd>
1a0052c4:	2800      	cmp	r0, #0
1a0052c6:	f040 8110 	bne.w	1a0054ea <FSSDC_FatFs_DiskIoCtl+0x2a6>
                    && rcvr_datablock(csd, 16))
1a0052ca:	2110      	movs	r1, #16
1a0052cc:	4668      	mov	r0, sp
1a0052ce:	f7ff fe0d 	bl	1a004eec <rcvr_datablock>
1a0052d2:	2800      	cmp	r0, #0
1a0052d4:	f000 8115 	beq.w	1a005502 <FSSDC_FatFs_DiskIoCtl+0x2be>
				if ((csd[0] >> 6) == 1) 
1a0052d8:	f89d 3000 	ldrb.w	r3, [sp]
1a0052dc:	099b      	lsrs	r3, r3, #6
1a0052de:	2b01      	cmp	r3, #1
1a0052e0:	d022      	beq.n	1a005328 <FSSDC_FatFs_DiskIoCtl+0xe4>
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a0052e2:	f89d 2005 	ldrb.w	r2, [sp, #5]
1a0052e6:	f002 020f 	and.w	r2, r2, #15
1a0052ea:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0052ee:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
1a0052f2:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a0052f6:	005b      	lsls	r3, r3, #1
1a0052f8:	f003 0306 	and.w	r3, r3, #6
1a0052fc:	441a      	add	r2, r3
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a0052fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
1a005302:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a005306:	099b      	lsrs	r3, r3, #6
1a005308:	eb03 0381 	add.w	r3, r3, r1, lsl #2
1a00530c:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a005310:	0289      	lsls	r1, r1, #10
1a005312:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
1a005316:	440b      	add	r3, r1
1a005318:	3301      	adds	r3, #1
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a00531a:	3a07      	subs	r2, #7
1a00531c:	4093      	lsls	r3, r2
1a00531e:	602b      	str	r3, [r5, #0]
		deselect();
1a005320:	f7ff fd56 	bl	1a004dd0 <deselect>
				res = RES_OK;
1a005324:	2400      	movs	r4, #0
1a005326:	e0f4      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a005328:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a00532c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a005330:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a005334:	b29b      	uxth	r3, r3
1a005336:	3301      	adds	r3, #1
1a005338:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a00533a:	029b      	lsls	r3, r3, #10
1a00533c:	602b      	str	r3, [r5, #0]
1a00533e:	e7ef      	b.n	1a005320 <FSSDC_FatFs_DiskIoCtl+0xdc>
			*(WORD*)buff = 512;
1a005340:	f44f 7300 	mov.w	r3, #512	; 0x200
1a005344:	800b      	strh	r3, [r1, #0]
		deselect();
1a005346:	f7ff fd43 	bl	1a004dd0 <deselect>
			res = RES_OK;
1a00534a:	2400      	movs	r4, #0
1a00534c:	e0e1      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (CardType & CT_SD2) {                            /* SDC ver 2.00 */
1a00534e:	4b75      	ldr	r3, [pc, #468]	; (1a005524 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a005350:	781b      	ldrb	r3, [r3, #0]
1a005352:	f013 0f04 	tst.w	r3, #4
1a005356:	d020      	beq.n	1a00539a <FSSDC_FatFs_DiskIoCtl+0x156>
				if (send_cmd(ACMD13, 0) == 0)                   /* Read SD status */
1a005358:	2100      	movs	r1, #0
1a00535a:	20cd      	movs	r0, #205	; 0xcd
1a00535c:	f7ff fd56 	bl	1a004e0c <send_cmd>
1a005360:	2800      	cmp	r0, #0
1a005362:	f040 80ba 	bne.w	1a0054da <FSSDC_FatFs_DiskIoCtl+0x296>
					rcvr_spi();
1a005366:	f7ff fd13 	bl	1a004d90 <rcvr_spi>
					if (rcvr_datablock(csd, 16))                /* Read partial block */
1a00536a:	2110      	movs	r1, #16
1a00536c:	4668      	mov	r0, sp
1a00536e:	f7ff fdbd 	bl	1a004eec <rcvr_datablock>
1a005372:	2800      	cmp	r0, #0
1a005374:	f000 80b5 	beq.w	1a0054e2 <FSSDC_FatFs_DiskIoCtl+0x29e>
						for (n = 64 - 16; n; n--) 
1a005378:	2430      	movs	r4, #48	; 0x30
1a00537a:	e003      	b.n	1a005384 <FSSDC_FatFs_DiskIoCtl+0x140>
                            rcvr_spi();                         /* Purge trailing data */
1a00537c:	f7ff fd08 	bl	1a004d90 <rcvr_spi>
						for (n = 64 - 16; n; n--) 
1a005380:	3c01      	subs	r4, #1
1a005382:	b2e4      	uxtb	r4, r4
1a005384:	2c00      	cmp	r4, #0
1a005386:	d1f9      	bne.n	1a00537c <FSSDC_FatFs_DiskIoCtl+0x138>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a005388:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a00538c:	091a      	lsrs	r2, r3, #4
1a00538e:	2310      	movs	r3, #16
1a005390:	4093      	lsls	r3, r2
1a005392:	602b      	str	r3, [r5, #0]
		deselect();
1a005394:	f7ff fd1c 	bl	1a004dd0 <deselect>
1a005398:	e0bb      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
				if ((send_cmd(CMD9, 0) == 0) 
1a00539a:	2100      	movs	r1, #0
1a00539c:	2049      	movs	r0, #73	; 0x49
1a00539e:	f7ff fd35 	bl	1a004e0c <send_cmd>
1a0053a2:	2800      	cmp	r0, #0
1a0053a4:	f040 80a9 	bne.w	1a0054fa <FSSDC_FatFs_DiskIoCtl+0x2b6>
                        && rcvr_datablock(csd, 16)) 
1a0053a8:	2110      	movs	r1, #16
1a0053aa:	4668      	mov	r0, sp
1a0053ac:	f7ff fd9e 	bl	1a004eec <rcvr_datablock>
1a0053b0:	2800      	cmp	r0, #0
1a0053b2:	f000 808e 	beq.w	1a0054d2 <FSSDC_FatFs_DiskIoCtl+0x28e>
					if (CardType & CT_SD1)
1a0053b6:	4b5b      	ldr	r3, [pc, #364]	; (1a005524 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a0053b8:	781b      	ldrb	r3, [r3, #0]
1a0053ba:	f013 0f02 	tst.w	r3, #2
1a0053be:	d013      	beq.n	1a0053e8 <FSSDC_FatFs_DiskIoCtl+0x1a4>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a0053c0:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0053c4:	005b      	lsls	r3, r3, #1
1a0053c6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
1a0053ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0053ce:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
1a0053d2:	3301      	adds	r3, #1
1a0053d4:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0053d8:	0992      	lsrs	r2, r2, #6
1a0053da:	3a01      	subs	r2, #1
1a0053dc:	4093      	lsls	r3, r2
1a0053de:	602b      	str	r3, [r5, #0]
		deselect();
1a0053e0:	f7ff fcf6 	bl	1a004dd0 <deselect>
					res = RES_OK;
1a0053e4:	2400      	movs	r4, #0
1a0053e6:	e094      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a0053e8:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a0053ec:	f3c3 0284 	ubfx	r2, r3, #2, #5
1a0053f0:	f89d 100b 	ldrb.w	r1, [sp, #11]
1a0053f4:	00cb      	lsls	r3, r1, #3
1a0053f6:	f003 0318 	and.w	r3, r3, #24
1a0053fa:	eb03 1351 	add.w	r3, r3, r1, lsr #5
1a0053fe:	3301      	adds	r3, #1
1a005400:	fb02 3303 	mla	r3, r2, r3, r3
1a005404:	602b      	str	r3, [r5, #0]
1a005406:	e7eb      	b.n	1a0053e0 <FSSDC_FatFs_DiskIoCtl+0x19c>
			*ptr = CardType;
1a005408:	4b46      	ldr	r3, [pc, #280]	; (1a005524 <FSSDC_FatFs_DiskIoCtl+0x2e0>)
1a00540a:	781b      	ldrb	r3, [r3, #0]
1a00540c:	700b      	strb	r3, [r1, #0]
		deselect();
1a00540e:	f7ff fcdf 	bl	1a004dd0 <deselect>
			res = RES_OK;
1a005412:	2400      	movs	r4, #0
1a005414:	e07d      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a005416:	2100      	movs	r1, #0
1a005418:	2049      	movs	r0, #73	; 0x49
1a00541a:	f7ff fcf7 	bl	1a004e0c <send_cmd>
1a00541e:	2800      	cmp	r0, #0
1a005420:	d153      	bne.n	1a0054ca <FSSDC_FatFs_DiskIoCtl+0x286>
                    && rcvr_datablock(ptr, 16))
1a005422:	2110      	movs	r1, #16
1a005424:	4628      	mov	r0, r5
1a005426:	f7ff fd61 	bl	1a004eec <rcvr_datablock>
1a00542a:	2800      	cmp	r0, #0
1a00542c:	d149      	bne.n	1a0054c2 <FSSDC_FatFs_DiskIoCtl+0x27e>
		deselect();
1a00542e:	f7ff fccf 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a005432:	2401      	movs	r4, #1
1a005434:	e06a      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a005436:	2100      	movs	r1, #0
1a005438:	204a      	movs	r0, #74	; 0x4a
1a00543a:	f7ff fce7 	bl	1a004e0c <send_cmd>
1a00543e:	bbe0      	cbnz	r0, 1a0054ba <FSSDC_FatFs_DiskIoCtl+0x276>
                    && rcvr_datablock(ptr, 16))
1a005440:	2110      	movs	r1, #16
1a005442:	4628      	mov	r0, r5
1a005444:	f7ff fd52 	bl	1a004eec <rcvr_datablock>
1a005448:	bb98      	cbnz	r0, 1a0054b2 <FSSDC_FatFs_DiskIoCtl+0x26e>
		deselect();
1a00544a:	f7ff fcc1 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a00544e:	2401      	movs	r4, #1
1a005450:	e05c      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			if (send_cmd(CMD58, 0) == 0) 
1a005452:	2100      	movs	r1, #0
1a005454:	207a      	movs	r0, #122	; 0x7a
1a005456:	f7ff fcd9 	bl	1a004e0c <send_cmd>
1a00545a:	bb30      	cbnz	r0, 1a0054aa <FSSDC_FatFs_DiskIoCtl+0x266>
				for (n = 4; n; n--) 
1a00545c:	2404      	movs	r4, #4
1a00545e:	e006      	b.n	1a00546e <FSSDC_FatFs_DiskIoCtl+0x22a>
                    *ptr++ = rcvr_spi();
1a005460:	1c6e      	adds	r6, r5, #1
1a005462:	f7ff fc95 	bl	1a004d90 <rcvr_spi>
1a005466:	7028      	strb	r0, [r5, #0]
				for (n = 4; n; n--) 
1a005468:	3c01      	subs	r4, #1
1a00546a:	b2e4      	uxtb	r4, r4
                    *ptr++ = rcvr_spi();
1a00546c:	4635      	mov	r5, r6
				for (n = 4; n; n--) 
1a00546e:	2c00      	cmp	r4, #0
1a005470:	d1f6      	bne.n	1a005460 <FSSDC_FatFs_DiskIoCtl+0x21c>
		deselect();
1a005472:	f7ff fcad 	bl	1a004dd0 <deselect>
				res = RES_OK;
1a005476:	2400      	movs	r4, #0
1a005478:	e04b      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
			if (send_cmd(ACMD13, 0) == 0) 
1a00547a:	2100      	movs	r1, #0
1a00547c:	20cd      	movs	r0, #205	; 0xcd
1a00547e:	f7ff fcc5 	bl	1a004e0c <send_cmd>
1a005482:	b970      	cbnz	r0, 1a0054a2 <FSSDC_FatFs_DiskIoCtl+0x25e>
				rcvr_spi();
1a005484:	f7ff fc84 	bl	1a004d90 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a005488:	2140      	movs	r1, #64	; 0x40
1a00548a:	4628      	mov	r0, r5
1a00548c:	f7ff fd2e 	bl	1a004eec <rcvr_datablock>
1a005490:	b918      	cbnz	r0, 1a00549a <FSSDC_FatFs_DiskIoCtl+0x256>
		deselect();
1a005492:	f7ff fc9d 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a005496:	2401      	movs	r4, #1
1a005498:	e038      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a00549a:	f7ff fc99 	bl	1a004dd0 <deselect>
					res = RES_OK;
1a00549e:	2400      	movs	r4, #0
1a0054a0:	e037      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0054a2:	f7ff fc95 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054a6:	2401      	movs	r4, #1
1a0054a8:	e030      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054aa:	f7ff fc91 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054ae:	2401      	movs	r4, #1
1a0054b0:	e02c      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054b2:	f7ff fc8d 	bl	1a004dd0 <deselect>
				res = RES_OK;
1a0054b6:	2400      	movs	r4, #0
1a0054b8:	e02b      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0054ba:	f7ff fc89 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054be:	2401      	movs	r4, #1
1a0054c0:	e024      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054c2:	f7ff fc85 	bl	1a004dd0 <deselect>
				res = RES_OK;
1a0054c6:	2400      	movs	r4, #0
1a0054c8:	e023      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
		deselect();
1a0054ca:	f7ff fc81 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054ce:	2401      	movs	r4, #1
1a0054d0:	e01c      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054d2:	f7ff fc7d 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054d6:	2401      	movs	r4, #1
1a0054d8:	e018      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054da:	f7ff fc79 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054de:	2401      	movs	r4, #1
1a0054e0:	e014      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054e2:	f7ff fc75 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054e6:	2401      	movs	r4, #1
1a0054e8:	e010      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054ea:	f7ff fc71 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054ee:	2401      	movs	r4, #1
1a0054f0:	e00c      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054f2:	f7ff fc6d 	bl	1a004dd0 <deselect>
			res = RES_PARERR;
1a0054f6:	2404      	movs	r4, #4
1a0054f8:	e008      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a0054fa:	f7ff fc69 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a0054fe:	2401      	movs	r4, #1
1a005500:	e004      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
		deselect();
1a005502:	f7ff fc65 	bl	1a004dd0 <deselect>
	res = RES_ERROR;
1a005506:	2401      	movs	r4, #1
1a005508:	e000      	b.n	1a00550c <FSSDC_FatFs_DiskIoCtl+0x2c8>
			res = RES_PARERR;
1a00550a:	2404      	movs	r4, #4
	}
    
    if (res != RES_OK)
    {
        Board_UARTPutSTR ("FSSDC: [IOCtl] Returning Error.\r\n");        
1a00550c:	4806      	ldr	r0, [pc, #24]	; (1a005528 <FSSDC_FatFs_DiskIoCtl+0x2e4>)
1a00550e:	f000 f97f 	bl	1a005810 <Board_UARTPutSTR>
    }

	return res;
}
1a005512:	4620      	mov	r0, r4
1a005514:	b004      	add	sp, #16
1a005516:	bd70      	pop	{r4, r5, r6, pc}
			res = RES_OK;
1a005518:	2400      	movs	r4, #0
1a00551a:	e7fa      	b.n	1a005512 <FSSDC_FatFs_DiskIoCtl+0x2ce>
1a00551c:	1000000d 	.word	0x1000000d
1a005520:	1a009bd0 	.word	0x1a009bd0
1a005524:	1000343c 	.word	0x1000343c
1a005528:	1a009bf8 	.word	0x1a009bf8

1a00552c <FSSDC_InitSPI>:
    WARNING: for card connectors without presence detection
    >>>> Only call this function when the card is inserted!
--------------------------------------------------------------------------------
*/
void FSSDC_InitSPI ()
{
1a00552c:	b510      	push	{r4, lr}
        seems to work at mode 0 at the SPI mode. Thus the SPI mode 0 (CPHA=0, CPOL=0)
        is the proper setting to control MMC/SDC
        
        http://elm-chan.org/docs/mmc/mmc_e.html#spimode
    */
    Chip_SSP_Init       (LPC_SSP1);
1a00552e:	4c13      	ldr	r4, [pc, #76]	; (1a00557c <FSSDC_InitSPI+0x50>)
1a005530:	4620      	mov	r0, r4
1a005532:	f001 f9df 	bl	1a0068f4 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a005536:	6863      	ldr	r3, [r4, #4]
1a005538:	f023 0304 	bic.w	r3, r3, #4
1a00553c:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00553e:	6823      	ldr	r3, [r4, #0]
1a005540:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005544:	f043 0307 	orr.w	r3, r3, #7
1a005548:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode   (LPC_SSP1, SSP_MODE_MASTER);
    Chip_SSP_SetFormat  (LPC_SSP1, SSP_BITS_8, SSP_FRAMEFORMAT_SPI,
                         SSP_CLOCK_CPHA0_CPOL0);
    FCLK_SLOW           ();
1a00554a:	4b0d      	ldr	r3, [pc, #52]	; (1a005580 <FSSDC_InitSPI+0x54>)
1a00554c:	6819      	ldr	r1, [r3, #0]
1a00554e:	4620      	mov	r0, r4
1a005550:	f001 f9b0 	bl	1a0068b4 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005554:	6863      	ldr	r3, [r4, #4]
1a005556:	f043 0302 	orr.w	r3, r3, #2
1a00555a:	6063      	str	r3, [r4, #4]
    Chip_SSP_Enable     (LPC_SSP1);
    
    // PLEASE NOTE: muxing and direction of CS signal on FSSDC_CS_{PIN/PORT}
    //              must be configured beforehand!
    deselect ();    
1a00555c:	f7ff fc38 	bl	1a004dd0 <deselect>
    
#ifndef FSSDC_SUPPORTS_HOT_INSERTION
    g_diskStats &= ~STA_NODISK;
1a005560:	4a08      	ldr	r2, [pc, #32]	; (1a005584 <FSSDC_InitSPI+0x58>)
1a005562:	7813      	ldrb	r3, [r2, #0]
1a005564:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
1a005568:	7013      	strb	r3, [r2, #0]
    Board_UARTPutSTR ("FSSDC: [InitSPI] New card status: Inserted.\r\n");
1a00556a:	4807      	ldr	r0, [pc, #28]	; (1a005588 <FSSDC_InitSPI+0x5c>)
1a00556c:	f000 f950 	bl	1a005810 <Board_UARTPutSTR>
    newCardStatus (FSSDC_CardStatus_Inserted);
1a005570:	2002      	movs	r0, #2
1a005572:	f7ff fbcf 	bl	1a004d14 <newCardStatus>
    FSSDC_FatFs_DiskInitialize ();
1a005576:	f7ff fcef 	bl	1a004f58 <FSSDC_FatFs_DiskInitialize>
#endif
}
1a00557a:	bd10      	pop	{r4, pc}
1a00557c:	400c5000 	.word	0x400c5000
1a005580:	10000014 	.word	0x10000014
1a005584:	1000000d 	.word	0x1000000d
1a005588:	1a009c98 	.word	0x1a009c98

1a00558c <FSSDC_Update>:
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */
void FSSDC_Update ()
{   
    if (Timer1)             /* 100Hz decrement timer */
1a00558c:	4b08      	ldr	r3, [pc, #32]	; (1a0055b0 <FSSDC_Update+0x24>)
1a00558e:	781b      	ldrb	r3, [r3, #0]
1a005590:	b123      	cbz	r3, 1a00559c <FSSDC_Update+0x10>
    {
        -- Timer1;
1a005592:	4a07      	ldr	r2, [pc, #28]	; (1a0055b0 <FSSDC_Update+0x24>)
1a005594:	7813      	ldrb	r3, [r2, #0]
1a005596:	3b01      	subs	r3, #1
1a005598:	b2db      	uxtb	r3, r3
1a00559a:	7013      	strb	r3, [r2, #0]
    }
    
    if (Timer2)
1a00559c:	4b05      	ldr	r3, [pc, #20]	; (1a0055b4 <FSSDC_Update+0x28>)
1a00559e:	781b      	ldrb	r3, [r3, #0]
1a0055a0:	b123      	cbz	r3, 1a0055ac <FSSDC_Update+0x20>
    {
        -- Timer2;
1a0055a2:	4a04      	ldr	r2, [pc, #16]	; (1a0055b4 <FSSDC_Update+0x28>)
1a0055a4:	7813      	ldrb	r3, [r2, #0]
1a0055a6:	3b01      	subs	r3, #1
1a0055a8:	b2db      	uxtb	r3, r3
1a0055aa:	7013      	strb	r3, [r2, #0]
			s &= ~STA_NODISK;

		g_diskStats = s;
	}
    #endif
}
1a0055ac:	4770      	bx	lr
1a0055ae:	bf00      	nop
1a0055b0:	1000343d 	.word	0x1000343d
1a0055b4:	1000343e 	.word	0x1000343e

1a0055b8 <get_fattime>:


// Definitions required by FatFs according to ffconf.h
#if !FF_FS_READONLY && !FF_FS_NORTC
DWORD get_fattime (void)
{
1a0055b8:	b500      	push	{lr}
1a0055ba:	b089      	sub	sp, #36	; 0x24
	/* Get local time */
    RTC_TIME_T rtcTime;
	Chip_RTC_GetFullTime (LPC_RTC, &rtcTime);
1a0055bc:	4669      	mov	r1, sp
1a0055be:	480c      	ldr	r0, [pc, #48]	; (1a0055f0 <get_fattime+0x38>)
1a0055c0:	f000 fe8d 	bl	1a0062de <Chip_RTC_GetFullTime>

	/* Pack date and time into a DWORD variable */
	return (  (DWORD) (rtcTime.time[RTC_TIMETYPE_YEAR] - 1980)  << 25)
1a0055c4:	9b07      	ldr	r3, [sp, #28]
1a0055c6:	f2a3 70bc 	subw	r0, r3, #1980	; 0x7bc
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MONTH]         << 21)
1a0055ca:	9b06      	ldr	r3, [sp, #24]
1a0055cc:	055b      	lsls	r3, r3, #21
1a0055ce:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_DAYOFMONTH]    << 16)
1a0055d2:	9803      	ldr	r0, [sp, #12]
1a0055d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_HOUR]          << 11)
1a0055d8:	9802      	ldr	r0, [sp, #8]
1a0055da:	ea43 23c0 	orr.w	r3, r3, r0, lsl #11
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_MINUTE]        << 5)
1a0055de:	9801      	ldr	r0, [sp, #4]
1a0055e0:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
		   | ((DWORD)  rtcTime.time[RTC_TIMETYPE_SECOND]        >> 1);
}
1a0055e4:	9800      	ldr	r0, [sp, #0]
1a0055e6:	ea43 0050 	orr.w	r0, r3, r0, lsr #1
1a0055ea:	b009      	add	sp, #36	; 0x24
1a0055ec:	f85d fb04 	ldr.w	pc, [sp], #4
1a0055f0:	40046000 	.word	0x40046000

1a0055f4 <disk_timerproc>:
};
#endif

// Must be called once every 10 ms ideally from PendSV, not SysTickHandler!
void disk_timerproc (void)
{
1a0055f4:	b508      	push	{r3, lr}
    FSSDC_Update ();
1a0055f6:	f7ff ffc9 	bl	1a00558c <FSSDC_Update>
    #ifdef LPCUSBLIB_HOST_MASS_STORAGE
    FSUSB_Update ();
    #endif
}
1a0055fa:	bd08      	pop	{r3, pc}

1a0055fc <disk_status>:

DSTATUS disk_status (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{    
    switch (pdrv)
1a0055fc:	b108      	cbz	r0, 1a005602 <disk_status+0x6>
            #else
            break;
            #endif
    }

    return STA_NOINIT;
1a0055fe:	2001      	movs	r0, #1
}
1a005600:	4770      	bx	lr
{    
1a005602:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskStatus ();
1a005604:	f7ff fca2 	bl	1a004f4c <FSSDC_FatFs_DiskStatus>
}
1a005608:	bd08      	pop	{r3, pc}

1a00560a <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
1a00560a:	b108      	cbz	r0, 1a005610 <disk_initialize+0x6>
            #else
            break;
            #endif
    }
    
    return STA_NOINIT;
1a00560c:	2001      	movs	r0, #1
}
1a00560e:	4770      	bx	lr
{
1a005610:	b508      	push	{r3, lr}
            return FSSDC_FatFs_DiskInitialize ();
1a005612:	f7ff fca1 	bl	1a004f58 <FSSDC_FatFs_DiskInitialize>
}
1a005616:	bd08      	pop	{r3, pc}

1a005618 <disk_read>:
	BYTE *buff,         /* Data buffer to store read data */
	DWORD sector,       /* Start sector in LBA */
	UINT count          /* Number of sectors to read */
)
{
	if (!buff || !count) 
1a005618:	b141      	cbz	r1, 1a00562c <disk_read+0x14>
{
1a00561a:	b510      	push	{r4, lr}
	if (!buff || !count) 
1a00561c:	b143      	cbz	r3, 1a005630 <disk_read+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00561e:	b948      	cbnz	r0, 1a005634 <disk_read+0x1c>
1a005620:	4608      	mov	r0, r1
1a005622:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskRead (buff, sector, count);
1a005624:	461a      	mov	r2, r3
1a005626:	f7ff fd71 	bl	1a00510c <FSSDC_FatFs_DiskRead>
            break;
            #endif
    }
    
    return RES_PARERR;
}
1a00562a:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a00562c:	2004      	movs	r0, #4
}
1a00562e:	4770      	bx	lr
		return RES_PARERR;
1a005630:	2004      	movs	r0, #4
1a005632:	e7fa      	b.n	1a00562a <disk_read+0x12>
    return RES_PARERR;
1a005634:	2004      	movs	r0, #4
1a005636:	e7f8      	b.n	1a00562a <disk_read+0x12>

1a005638 <disk_write>:
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
	if (!buff || !count)
1a005638:	b141      	cbz	r1, 1a00564c <disk_write+0x14>
{
1a00563a:	b510      	push	{r4, lr}
	if (!buff || !count)
1a00563c:	b143      	cbz	r3, 1a005650 <disk_write+0x18>
    {
		return RES_PARERR;
	}
    
    switch (pdrv)
1a00563e:	b948      	cbnz	r0, 1a005654 <disk_write+0x1c>
1a005640:	4608      	mov	r0, r1
1a005642:	4611      	mov	r1, r2
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskWrite (buff, sector, count);
1a005644:	461a      	mov	r2, r3
1a005646:	f7ff fda3 	bl	1a005190 <FSSDC_FatFs_DiskWrite>
            break;
            #endif
    }
    
	return RES_PARERR;
}
1a00564a:	bd10      	pop	{r4, pc}
		return RES_PARERR;
1a00564c:	2004      	movs	r0, #4
}
1a00564e:	4770      	bx	lr
		return RES_PARERR;
1a005650:	2004      	movs	r0, #4
1a005652:	e7fa      	b.n	1a00564a <disk_write+0x12>
	return RES_PARERR;
1a005654:	2004      	movs	r0, #4
1a005656:	e7f8      	b.n	1a00564a <disk_write+0x12>

1a005658 <disk_ioctl>:
	BYTE pdrv,          /* Physical drive nmuber (0..) */
	BYTE cmd,           /* Control code */
	void *buff          /* Buffer to send/receive control data */
)
{   
    switch (pdrv)
1a005658:	b928      	cbnz	r0, 1a005666 <disk_ioctl+0xe>
{   
1a00565a:	b508      	push	{r3, lr}
1a00565c:	4608      	mov	r0, r1
    {
        case FATFS_DISK_DRIVE_FSSDC:
            return FSSDC_FatFs_DiskIoCtl (cmd, buff);
1a00565e:	4611      	mov	r1, r2
1a005660:	f7ff fdf0 	bl	1a005244 <FSSDC_FatFs_DiskIoCtl>
            break;
            #endif
    }

	return RES_PARERR;
}
1a005664:	bd08      	pop	{r3, pc}
	return RES_PARERR;
1a005666:	2004      	movs	r0, #4
}
1a005668:	4770      	bx	lr
1a00566a:	Address 0x000000001a00566a is out of bounds.


1a00566c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00566c:	2200      	movs	r2, #0
1a00566e:	2a05      	cmp	r2, #5
1a005670:	d819      	bhi.n	1a0056a6 <Board_LED_Init+0x3a>
{
1a005672:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a005674:	490c      	ldr	r1, [pc, #48]	; (1a0056a8 <Board_LED_Init+0x3c>)
1a005676:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00567a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00567e:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a005680:	4b0a      	ldr	r3, [pc, #40]	; (1a0056ac <Board_LED_Init+0x40>)
1a005682:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a005686:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00568a:	2001      	movs	r0, #1
1a00568c:	40a0      	lsls	r0, r4
1a00568e:	4301      	orrs	r1, r0
1a005690:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a005694:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a005698:	2100      	movs	r1, #0
1a00569a:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00569c:	3201      	adds	r2, #1
1a00569e:	2a05      	cmp	r2, #5
1a0056a0:	d9e8      	bls.n	1a005674 <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0056a2:	bc70      	pop	{r4, r5, r6}
1a0056a4:	4770      	bx	lr
1a0056a6:	4770      	bx	lr
1a0056a8:	1a009cd4 	.word	0x1a009cd4
1a0056ac:	400f4000 	.word	0x400f4000

1a0056b0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0056b0:	2300      	movs	r3, #0
1a0056b2:	2b03      	cmp	r3, #3
1a0056b4:	d816      	bhi.n	1a0056e4 <Board_TEC_Init+0x34>
{
1a0056b6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0056b8:	490b      	ldr	r1, [pc, #44]	; (1a0056e8 <Board_TEC_Init+0x38>)
1a0056ba:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0056be:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0056c2:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0056c4:	4c09      	ldr	r4, [pc, #36]	; (1a0056ec <Board_TEC_Init+0x3c>)
1a0056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0056ca:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0056ce:	2001      	movs	r0, #1
1a0056d0:	40a8      	lsls	r0, r5
1a0056d2:	ea21 0100 	bic.w	r1, r1, r0
1a0056d6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0056da:	3301      	adds	r3, #1
1a0056dc:	2b03      	cmp	r3, #3
1a0056de:	d9eb      	bls.n	1a0056b8 <Board_TEC_Init+0x8>
    }
}
1a0056e0:	bc30      	pop	{r4, r5}
1a0056e2:	4770      	bx	lr
1a0056e4:	4770      	bx	lr
1a0056e6:	bf00      	nop
1a0056e8:	1a009ccc 	.word	0x1a009ccc
1a0056ec:	400f4000 	.word	0x400f4000

1a0056f0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0056f0:	2300      	movs	r3, #0
1a0056f2:	2b08      	cmp	r3, #8
1a0056f4:	d816      	bhi.n	1a005724 <Board_GPIO_Init+0x34>
{
1a0056f6:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0056f8:	490b      	ldr	r1, [pc, #44]	; (1a005728 <Board_GPIO_Init+0x38>)
1a0056fa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0056fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a005702:	784d      	ldrb	r5, [r1, #1]
1a005704:	4c09      	ldr	r4, [pc, #36]	; (1a00572c <Board_GPIO_Init+0x3c>)
1a005706:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00570a:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a00570e:	2001      	movs	r0, #1
1a005710:	40a8      	lsls	r0, r5
1a005712:	ea21 0100 	bic.w	r1, r1, r0
1a005716:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00571a:	3301      	adds	r3, #1
1a00571c:	2b08      	cmp	r3, #8
1a00571e:	d9eb      	bls.n	1a0056f8 <Board_GPIO_Init+0x8>
    }
}
1a005720:	bc30      	pop	{r4, r5}
1a005722:	4770      	bx	lr
1a005724:	4770      	bx	lr
1a005726:	bf00      	nop
1a005728:	1a009ce0 	.word	0x1a009ce0
1a00572c:	400f4000 	.word	0x400f4000

1a005730 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a005730:	b510      	push	{r4, lr}
1a005732:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a005734:	4c08      	ldr	r4, [pc, #32]	; (1a005758 <Board_ADC_Init+0x28>)
1a005736:	4669      	mov	r1, sp
1a005738:	4620      	mov	r0, r4
1a00573a:	f000 f9e7 	bl	1a005b0c <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00573e:	4a07      	ldr	r2, [pc, #28]	; (1a00575c <Board_ADC_Init+0x2c>)
1a005740:	4669      	mov	r1, sp
1a005742:	4620      	mov	r0, r4
1a005744:	f000 fa02 	bl	1a005b4c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a005748:	2200      	movs	r2, #0
1a00574a:	4669      	mov	r1, sp
1a00574c:	4620      	mov	r0, r4
1a00574e:	f000 fa16 	bl	1a005b7e <Chip_ADC_SetResolution>
}
1a005752:	b002      	add	sp, #8
1a005754:	bd10      	pop	{r4, pc}
1a005756:	bf00      	nop
1a005758:	400e3000 	.word	0x400e3000
1a00575c:	00061a80 	.word	0x00061a80

1a005760 <Board_SPI_Init>:
{
1a005760:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a005762:	4c0b      	ldr	r4, [pc, #44]	; (1a005790 <Board_SPI_Init+0x30>)
1a005764:	4620      	mov	r0, r4
1a005766:	f001 f8c5 	bl	1a0068f4 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00576a:	6863      	ldr	r3, [r4, #4]
1a00576c:	f023 0304 	bic.w	r3, r3, #4
1a005770:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a005772:	6823      	ldr	r3, [r4, #0]
1a005774:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a005778:	f043 0307 	orr.w	r3, r3, #7
1a00577c:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00577e:	4905      	ldr	r1, [pc, #20]	; (1a005794 <Board_SPI_Init+0x34>)
1a005780:	4620      	mov	r0, r4
1a005782:	f001 f897 	bl	1a0068b4 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a005786:	6863      	ldr	r3, [r4, #4]
1a005788:	f043 0302 	orr.w	r3, r3, #2
1a00578c:	6063      	str	r3, [r4, #4]
}
1a00578e:	bd10      	pop	{r4, pc}
1a005790:	400c5000 	.word	0x400c5000
1a005794:	000186a0 	.word	0x000186a0

1a005798 <Board_I2C_Init>:
{
1a005798:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a00579a:	2000      	movs	r0, #0
1a00579c:	f000 ff36 	bl	1a00660c <Chip_I2C_Init>
1a0057a0:	4b04      	ldr	r3, [pc, #16]	; (1a0057b4 <Board_I2C_Init+0x1c>)
1a0057a2:	f640 0208 	movw	r2, #2056	; 0x808
1a0057a6:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0057aa:	4903      	ldr	r1, [pc, #12]	; (1a0057b8 <Board_I2C_Init+0x20>)
1a0057ac:	2000      	movs	r0, #0
1a0057ae:	f000 ff3f 	bl	1a006630 <Chip_I2C_SetClockRate>
}
1a0057b2:	bd08      	pop	{r3, pc}
1a0057b4:	40086000 	.word	0x40086000
1a0057b8:	000f4240 	.word	0x000f4240

1a0057bc <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a0057bc:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a0057be:	4c07      	ldr	r4, [pc, #28]	; (1a0057dc <Board_Debug_Init+0x20>)
1a0057c0:	4620      	mov	r0, r4
1a0057c2:	f000 f8c1 	bl	1a005948 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0057c6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0057ca:	4620      	mov	r0, r4
1a0057cc:	f000 f906 	bl	1a0059dc <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0057d0:	2303      	movs	r3, #3
1a0057d2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0057d4:	2301      	movs	r3, #1
1a0057d6:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a0057d8:	bd10      	pop	{r4, pc}
1a0057da:	bf00      	nop
1a0057dc:	400c1000 	.word	0x400c1000

1a0057e0 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0057e0:	4b03      	ldr	r3, [pc, #12]	; (1a0057f0 <Board_UARTPutChar+0x10>)
1a0057e2:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a0057e4:	f013 0f20 	tst.w	r3, #32
1a0057e8:	d0fa      	beq.n	1a0057e0 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a0057ea:	4b01      	ldr	r3, [pc, #4]	; (1a0057f0 <Board_UARTPutChar+0x10>)
1a0057ec:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a0057ee:	4770      	bx	lr
1a0057f0:	400c1000 	.word	0x400c1000

1a0057f4 <Board_UARTGetChar>:
	return pUART->LSR;
1a0057f4:	4b05      	ldr	r3, [pc, #20]	; (1a00580c <Board_UARTGetChar+0x18>)
1a0057f6:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a0057f8:	f013 0f01 	tst.w	r3, #1
1a0057fc:	d003      	beq.n	1a005806 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0057fe:	4b03      	ldr	r3, [pc, #12]	; (1a00580c <Board_UARTGetChar+0x18>)
1a005800:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a005802:	b2c0      	uxtb	r0, r0
1a005804:	4770      	bx	lr
    }
    return EOF;
1a005806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a00580a:	4770      	bx	lr
1a00580c:	400c1000 	.word	0x400c1000

1a005810 <Board_UARTPutSTR>:


void Board_UARTPutSTR(const char *str)
{
1a005810:	b510      	push	{r4, lr}
1a005812:	4604      	mov	r4, r0
    while (*str != '\0') {
1a005814:	e002      	b.n	1a00581c <Board_UARTPutSTR+0xc>
        Board_UARTPutChar(*str++);
1a005816:	3401      	adds	r4, #1
1a005818:	f7ff ffe2 	bl	1a0057e0 <Board_UARTPutChar>
    while (*str != '\0') {
1a00581c:	7820      	ldrb	r0, [r4, #0]
1a00581e:	2800      	cmp	r0, #0
1a005820:	d1f9      	bne.n	1a005816 <Board_UARTPutSTR+0x6>
    }
}
1a005822:	bd10      	pop	{r4, pc}

1a005824 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a005824:	b508      	push	{r3, lr}
   DEBUGINIT();
1a005826:	f7ff ffc9 	bl	1a0057bc <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00582a:	4808      	ldr	r0, [pc, #32]	; (1a00584c <Board_Init+0x28>)
1a00582c:	f000 fda2 	bl	1a006374 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a005830:	f7ff ff5e 	bl	1a0056f0 <Board_GPIO_Init>
   Board_ADC_Init();
1a005834:	f7ff ff7c 	bl	1a005730 <Board_ADC_Init>
   Board_SPI_Init();
1a005838:	f7ff ff92 	bl	1a005760 <Board_SPI_Init>
   Board_I2C_Init();
1a00583c:	f7ff ffac 	bl	1a005798 <Board_I2C_Init>

   Board_LED_Init();
1a005840:	f7ff ff14 	bl	1a00566c <Board_LED_Init>
   Board_TEC_Init();
1a005844:	f7ff ff34 	bl	1a0056b0 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a005848:	bd08      	pop	{r3, pc}
1a00584a:	bf00      	nop
1a00584c:	400f4000 	.word	0x400f4000

1a005850 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a005850:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a005852:	b2c0      	uxtb	r0, r0
1a005854:	f7ff ffc4 	bl	1a0057e0 <Board_UARTPutChar>
}
1a005858:	bd08      	pop	{r3, pc}

1a00585a <__stdio_getchar>:

int __stdio_getchar() {
1a00585a:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a00585c:	f7ff ffca 	bl	1a0057f4 <Board_UARTGetChar>
}
1a005860:	bd08      	pop	{r3, pc}

1a005862 <__stdio_init>:

void __stdio_init() {
1a005862:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a005864:	f7ff ffaa 	bl	1a0057bc <Board_Debug_Init>
1a005868:	bd08      	pop	{r3, pc}
1a00586a:	Address 0x000000001a00586a is out of bounds.


1a00586c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00586c:	2300      	movs	r3, #0
1a00586e:	2b1c      	cmp	r3, #28
1a005870:	d812      	bhi.n	1a005898 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a005872:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a005874:	4a09      	ldr	r2, [pc, #36]	; (1a00589c <Board_SetupMuxing+0x30>)
1a005876:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00587a:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00587e:	784a      	ldrb	r2, [r1, #1]
1a005880:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a005882:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a005886:	4906      	ldr	r1, [pc, #24]	; (1a0058a0 <Board_SetupMuxing+0x34>)
1a005888:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00588c:	3301      	adds	r3, #1
1a00588e:	2b1c      	cmp	r3, #28
1a005890:	d9f0      	bls.n	1a005874 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a005892:	f85d 4b04 	ldr.w	r4, [sp], #4
1a005896:	4770      	bx	lr
1a005898:	4770      	bx	lr
1a00589a:	bf00      	nop
1a00589c:	1a009cfc 	.word	0x1a009cfc
1a0058a0:	40086000 	.word	0x40086000

1a0058a4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0058a4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0058a6:	4a17      	ldr	r2, [pc, #92]	; (1a005904 <Board_SetupClocking+0x60>)
1a0058a8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0058ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0058b0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0058b4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0058b8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0058bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0058c0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0058c4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0058c8:	2201      	movs	r2, #1
1a0058ca:	490f      	ldr	r1, [pc, #60]	; (1a005908 <Board_SetupClocking+0x64>)
1a0058cc:	2006      	movs	r0, #6
1a0058ce:	f000 fd53 	bl	1a006378 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0058d2:	2400      	movs	r4, #0
1a0058d4:	b14c      	cbz	r4, 1a0058ea <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0058d6:	4b0b      	ldr	r3, [pc, #44]	; (1a005904 <Board_SetupClocking+0x60>)
1a0058d8:	685a      	ldr	r2, [r3, #4]
1a0058da:	f022 020c 	bic.w	r2, r2, #12
1a0058de:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0058e0:	685a      	ldr	r2, [r3, #4]
1a0058e2:	f042 0203 	orr.w	r2, r2, #3
1a0058e6:	605a      	str	r2, [r3, #4]
}
1a0058e8:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0058ea:	4808      	ldr	r0, [pc, #32]	; (1a00590c <Board_SetupClocking+0x68>)
1a0058ec:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0058f0:	2301      	movs	r3, #1
1a0058f2:	788a      	ldrb	r2, [r1, #2]
1a0058f4:	7849      	ldrb	r1, [r1, #1]
1a0058f6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0058fa:	f000 fb6b 	bl	1a005fd4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0058fe:	3401      	adds	r4, #1
1a005900:	e7e8      	b.n	1a0058d4 <Board_SetupClocking+0x30>
1a005902:	bf00      	nop
1a005904:	40043000 	.word	0x40043000
1a005908:	0c28cb00 	.word	0x0c28cb00
1a00590c:	1a009cf8 	.word	0x1a009cf8

1a005910 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a005910:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a005912:	f7ff ffab 	bl	1a00586c <Board_SetupMuxing>
    Board_SetupClocking();
1a005916:	f7ff ffc5 	bl	1a0058a4 <Board_SetupClocking>
}
1a00591a:	bd08      	pop	{r3, pc}

1a00591c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00591c:	4b09      	ldr	r3, [pc, #36]	; (1a005944 <Chip_UART_GetIndex+0x28>)
1a00591e:	4298      	cmp	r0, r3
1a005920:	d009      	beq.n	1a005936 <Chip_UART_GetIndex+0x1a>
1a005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a005926:	4298      	cmp	r0, r3
1a005928:	d007      	beq.n	1a00593a <Chip_UART_GetIndex+0x1e>
1a00592a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00592e:	4298      	cmp	r0, r3
1a005930:	d005      	beq.n	1a00593e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a005932:	2000      	movs	r0, #0
1a005934:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a005936:	2002      	movs	r0, #2
1a005938:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00593a:	2003      	movs	r0, #3
1a00593c:	4770      	bx	lr
			return 1;
1a00593e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a005940:	4770      	bx	lr
1a005942:	bf00      	nop
1a005944:	400c1000 	.word	0x400c1000

1a005948 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a005948:	b530      	push	{r4, r5, lr}
1a00594a:	b083      	sub	sp, #12
1a00594c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00594e:	f7ff ffe5 	bl	1a00591c <Chip_UART_GetIndex>
1a005952:	2301      	movs	r3, #1
1a005954:	461a      	mov	r2, r3
1a005956:	4619      	mov	r1, r3
1a005958:	4d0e      	ldr	r5, [pc, #56]	; (1a005994 <Chip_UART_Init+0x4c>)
1a00595a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00595e:	f000 fb7f 	bl	1a006060 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a005962:	2307      	movs	r3, #7
1a005964:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a005966:	2300      	movs	r3, #0
1a005968:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00596a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00596c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00596e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a005970:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a005972:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a005974:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a005976:	4b08      	ldr	r3, [pc, #32]	; (1a005998 <Chip_UART_Init+0x50>)
1a005978:	429c      	cmp	r4, r3
1a00597a:	d006      	beq.n	1a00598a <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00597c:	2303      	movs	r3, #3
1a00597e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a005980:	2310      	movs	r3, #16
1a005982:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a005984:	9b01      	ldr	r3, [sp, #4]
}
1a005986:	b003      	add	sp, #12
1a005988:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00598a:	2300      	movs	r3, #0
1a00598c:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a00598e:	69a3      	ldr	r3, [r4, #24]
1a005990:	9301      	str	r3, [sp, #4]
1a005992:	e7f3      	b.n	1a00597c <Chip_UART_Init+0x34>
1a005994:	1a009d78 	.word	0x1a009d78
1a005998:	40082000 	.word	0x40082000

1a00599c <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a00599c:	b538      	push	{r3, r4, r5, lr}
1a00599e:	4605      	mov	r5, r0
1a0059a0:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0059a2:	f7ff ffbb 	bl	1a00591c <Chip_UART_GetIndex>
1a0059a6:	4b0c      	ldr	r3, [pc, #48]	; (1a0059d8 <Chip_UART_SetBaud+0x3c>)
1a0059a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0059ac:	f000 fb9c 	bl	1a0060e8 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0059b0:	0123      	lsls	r3, r4, #4
1a0059b2:	fbb0 f3f3 	udiv	r3, r0, r3
1a0059b6:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0059b8:	68ea      	ldr	r2, [r5, #12]
1a0059ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0059be:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a0059c0:	6029      	str	r1, [r5, #0]
1a0059c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0059c6:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0059c8:	68ea      	ldr	r2, [r5, #12]
1a0059ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0059ce:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0059d0:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0059d4:	0900      	lsrs	r0, r0, #4
1a0059d6:	bd38      	pop	{r3, r4, r5, pc}
1a0059d8:	1a009d70 	.word	0x1a009d70

1a0059dc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0059dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0059e0:	b083      	sub	sp, #12
1a0059e2:	4683      	mov	fp, r0
1a0059e4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0059e6:	f7ff ff99 	bl	1a00591c <Chip_UART_GetIndex>
1a0059ea:	4b35      	ldr	r3, [pc, #212]	; (1a005ac0 <Chip_UART_SetBaudFDR+0xe4>)
1a0059ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0059f0:	f000 fb7a 	bl	1a0060e8 <Chip_Clock_GetRate>
1a0059f4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0059f6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0059fa:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0059fc:	2300      	movs	r3, #0
1a0059fe:	9301      	str	r3, [sp, #4]
1a005a00:	46a2      	mov	sl, r4
1a005a02:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a005a04:	e02a      	b.n	1a005a5c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a005a06:	4242      	negs	r2, r0
				div ++;
1a005a08:	1c4b      	adds	r3, r1, #1
1a005a0a:	e017      	b.n	1a005a3c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a005a0c:	b30a      	cbz	r2, 1a005a52 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a005a0e:	4617      	mov	r7, r2
			sd = d;
1a005a10:	9501      	str	r5, [sp, #4]
			sm = m;
1a005a12:	46a2      	mov	sl, r4
			sdiv = div;
1a005a14:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a005a16:	3501      	adds	r5, #1
1a005a18:	42ac      	cmp	r4, r5
1a005a1a:	d91e      	bls.n	1a005a5a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a005a1c:	0933      	lsrs	r3, r6, #4
1a005a1e:	0730      	lsls	r0, r6, #28
1a005a20:	fba4 0100 	umull	r0, r1, r4, r0
1a005a24:	fb04 1103 	mla	r1, r4, r3, r1
1a005a28:	1962      	adds	r2, r4, r5
1a005a2a:	fb08 f202 	mul.w	r2, r8, r2
1a005a2e:	2300      	movs	r3, #0
1a005a30:	f002 faf0 	bl	1a008014 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a005a34:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a005a36:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a005a38:	2800      	cmp	r0, #0
1a005a3a:	dbe4      	blt.n	1a005a06 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a005a3c:	4297      	cmp	r7, r2
1a005a3e:	d3ea      	bcc.n	1a005a16 <Chip_UART_SetBaudFDR+0x3a>
1a005a40:	2b00      	cmp	r3, #0
1a005a42:	d0e8      	beq.n	1a005a16 <Chip_UART_SetBaudFDR+0x3a>
1a005a44:	0c19      	lsrs	r1, r3, #16
1a005a46:	d1e6      	bne.n	1a005a16 <Chip_UART_SetBaudFDR+0x3a>
1a005a48:	2b02      	cmp	r3, #2
1a005a4a:	d8df      	bhi.n	1a005a0c <Chip_UART_SetBaudFDR+0x30>
1a005a4c:	2d00      	cmp	r5, #0
1a005a4e:	d0dd      	beq.n	1a005a0c <Chip_UART_SetBaudFDR+0x30>
1a005a50:	e7e1      	b.n	1a005a16 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a005a52:	4617      	mov	r7, r2
			sd = d;
1a005a54:	9501      	str	r5, [sp, #4]
			sm = m;
1a005a56:	46a2      	mov	sl, r4
			sdiv = div;
1a005a58:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a005a5a:	3401      	adds	r4, #1
1a005a5c:	b11f      	cbz	r7, 1a005a66 <Chip_UART_SetBaudFDR+0x8a>
1a005a5e:	2c0f      	cmp	r4, #15
1a005a60:	d801      	bhi.n	1a005a66 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a005a62:	2500      	movs	r5, #0
1a005a64:	e7d8      	b.n	1a005a18 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a005a66:	f1b9 0f00 	cmp.w	r9, #0
1a005a6a:	d024      	beq.n	1a005ab6 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a005a6c:	f8db 300c 	ldr.w	r3, [fp, #12]
1a005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a005a74:	f8cb 300c 	str.w	r3, [fp, #12]
1a005a78:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a005a7c:	f8cb 3000 	str.w	r3, [fp]
1a005a80:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a005a84:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a005a88:	f8db 300c 	ldr.w	r3, [fp, #12]
1a005a8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a005a90:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a005a94:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a005a98:	b2db      	uxtb	r3, r3
1a005a9a:	9901      	ldr	r1, [sp, #4]
1a005a9c:	f001 020f 	and.w	r2, r1, #15
1a005aa0:	4313      	orrs	r3, r2
1a005aa2:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a005aa6:	0933      	lsrs	r3, r6, #4
1a005aa8:	fb0a f303 	mul.w	r3, sl, r3
1a005aac:	448a      	add	sl, r1
1a005aae:	fb09 f90a 	mul.w	r9, r9, sl
1a005ab2:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a005ab6:	4648      	mov	r0, r9
1a005ab8:	b003      	add	sp, #12
1a005aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005abe:	bf00      	nop
1a005ac0:	1a009d70 	.word	0x1a009d70

1a005ac4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a005ac4:	4b03      	ldr	r3, [pc, #12]	; (1a005ad4 <Chip_ADC_GetClockIndex+0x10>)
1a005ac6:	4298      	cmp	r0, r3
1a005ac8:	d001      	beq.n	1a005ace <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a005aca:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a005acc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a005ace:	2004      	movs	r0, #4
1a005ad0:	4770      	bx	lr
1a005ad2:	bf00      	nop
1a005ad4:	400e4000 	.word	0x400e4000

1a005ad8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a005ad8:	b570      	push	{r4, r5, r6, lr}
1a005ada:	460d      	mov	r5, r1
1a005adc:	4614      	mov	r4, r2
1a005ade:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a005ae0:	f7ff fff0 	bl	1a005ac4 <Chip_ADC_GetClockIndex>
1a005ae4:	f000 fb00 	bl	1a0060e8 <Chip_Clock_GetRate>
	if (burstMode) {
1a005ae8:	b965      	cbnz	r5, 1a005b04 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a005aea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a005aee:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a005af2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a005af6:	0064      	lsls	r4, r4, #1
1a005af8:	fbb0 f0f4 	udiv	r0, r0, r4
1a005afc:	b2c0      	uxtb	r0, r0
1a005afe:	3801      	subs	r0, #1
	return div;
}
1a005b00:	b2c0      	uxtb	r0, r0
1a005b02:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a005b04:	fb04 f406 	mul.w	r4, r4, r6
1a005b08:	e7f3      	b.n	1a005af2 <getClkDiv+0x1a>
1a005b0a:	Address 0x000000001a005b0a is out of bounds.


1a005b0c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a005b0c:	b538      	push	{r3, r4, r5, lr}
1a005b0e:	4605      	mov	r5, r0
1a005b10:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a005b12:	f7ff ffd7 	bl	1a005ac4 <Chip_ADC_GetClockIndex>
1a005b16:	2301      	movs	r3, #1
1a005b18:	461a      	mov	r2, r3
1a005b1a:	4619      	mov	r1, r3
1a005b1c:	f000 faa0 	bl	1a006060 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a005b20:	2100      	movs	r1, #0
1a005b22:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a005b24:	4a08      	ldr	r2, [pc, #32]	; (1a005b48 <Chip_ADC_Init+0x3c>)
1a005b26:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a005b28:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a005b2a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a005b2c:	230b      	movs	r3, #11
1a005b2e:	4628      	mov	r0, r5
1a005b30:	f7ff ffd2 	bl	1a005ad8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005b34:	0200      	lsls	r0, r0, #8
1a005b36:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005b3a:	7920      	ldrb	r0, [r4, #4]
1a005b3c:	0440      	lsls	r0, r0, #17
1a005b3e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a005b42:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a005b44:	6028      	str	r0, [r5, #0]
}
1a005b46:	bd38      	pop	{r3, r4, r5, pc}
1a005b48:	00061a80 	.word	0x00061a80

1a005b4c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a005b4c:	b570      	push	{r4, r5, r6, lr}
1a005b4e:	4605      	mov	r5, r0
1a005b50:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a005b52:	6804      	ldr	r4, [r0, #0]
1a005b54:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a005b58:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a005b5c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a005b5e:	790b      	ldrb	r3, [r1, #4]
1a005b60:	f1c3 030b 	rsb	r3, r3, #11
1a005b64:	b2db      	uxtb	r3, r3
1a005b66:	7949      	ldrb	r1, [r1, #5]
1a005b68:	f7ff ffb6 	bl	1a005ad8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a005b6c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a005b70:	7930      	ldrb	r0, [r6, #4]
1a005b72:	0440      	lsls	r0, r0, #17
1a005b74:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a005b78:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a005b7a:	6028      	str	r0, [r5, #0]
}
1a005b7c:	bd70      	pop	{r4, r5, r6, pc}

1a005b7e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a005b7e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a005b80:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a005b82:	680a      	ldr	r2, [r1, #0]
1a005b84:	f7ff ffe2 	bl	1a005b4c <Chip_ADC_SetSampleRate>
}
1a005b88:	bd08      	pop	{r3, pc}
1a005b8a:	Address 0x000000001a005b8a is out of bounds.


1a005b8c <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005b8c:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a005b8e:	680b      	ldr	r3, [r1, #0]
1a005b90:	f013 0f80 	tst.w	r3, #128	; 0x80
1a005b94:	d002      	beq.n	1a005b9c <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005b9a:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a005b9c:	4607      	mov	r7, r0
1a005b9e:	2501      	movs	r5, #1
1a005ba0:	e03b      	b.n	1a005c1a <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a005ba2:	694b      	ldr	r3, [r1, #20]
1a005ba4:	fb03 f302 	mul.w	r3, r3, r2
1a005ba8:	fbb3 f3f5 	udiv	r3, r3, r5
1a005bac:	e014      	b.n	1a005bd8 <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a005bae:	461c      	mov	r4, r3
1a005bb0:	e020      	b.n	1a005bf4 <pll_calc_divs+0x68>
		return -val;
1a005bb2:	f1cc 0c00 	rsb	ip, ip, #0
1a005bb6:	e020      	b.n	1a005bfa <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a005bb8:	3201      	adds	r2, #1
1a005bba:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a005bbe:	dc26      	bgt.n	1a005c0e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a005bc0:	680c      	ldr	r4, [r1, #0]
1a005bc2:	f014 0f40 	tst.w	r4, #64	; 0x40
1a005bc6:	d0ec      	beq.n	1a005ba2 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a005bc8:	1c73      	adds	r3, r6, #1
1a005bca:	fa02 fc03 	lsl.w	ip, r2, r3
1a005bce:	694b      	ldr	r3, [r1, #20]
1a005bd0:	fb03 f30c 	mul.w	r3, r3, ip
1a005bd4:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a005bd8:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a005c28 <pll_calc_divs+0x9c>
1a005bdc:	4563      	cmp	r3, ip
1a005bde:	d9eb      	bls.n	1a005bb8 <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a005be0:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a005c2c <pll_calc_divs+0xa0>
1a005be4:	4563      	cmp	r3, ip
1a005be6:	d812      	bhi.n	1a005c0e <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a005be8:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005bec:	d1df      	bne.n	1a005bae <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a005bee:	1c74      	adds	r4, r6, #1
1a005bf0:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a005bf4:	ebb0 0c04 	subs.w	ip, r0, r4
1a005bf8:	d4db      	bmi.n	1a005bb2 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a005bfa:	4567      	cmp	r7, ip
1a005bfc:	d9dc      	bls.n	1a005bb8 <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a005bfe:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a005c00:	1c77      	adds	r7, r6, #1
1a005c02:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a005c04:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a005c06:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a005c08:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a005c0a:	4667      	mov	r7, ip
1a005c0c:	e7d4      	b.n	1a005bb8 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a005c0e:	3601      	adds	r6, #1
1a005c10:	2e03      	cmp	r6, #3
1a005c12:	dc01      	bgt.n	1a005c18 <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a005c14:	2201      	movs	r2, #1
1a005c16:	e7d0      	b.n	1a005bba <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a005c18:	3501      	adds	r5, #1
1a005c1a:	2d04      	cmp	r5, #4
1a005c1c:	dc01      	bgt.n	1a005c22 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a005c1e:	2600      	movs	r6, #0
1a005c20:	e7f6      	b.n	1a005c10 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a005c22:	bcf0      	pop	{r4, r5, r6, r7}
1a005c24:	4770      	bx	lr
1a005c26:	bf00      	nop
1a005c28:	094c5eff 	.word	0x094c5eff
1a005c2c:	1312d000 	.word	0x1312d000

1a005c30 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a005c30:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005c32:	b099      	sub	sp, #100	; 0x64
1a005c34:	4605      	mov	r5, r0
1a005c36:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a005c38:	225c      	movs	r2, #92	; 0x5c
1a005c3a:	2100      	movs	r1, #0
1a005c3c:	a801      	add	r0, sp, #4
1a005c3e:	f002 fba0 	bl	1a008382 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a005c42:	2380      	movs	r3, #128	; 0x80
1a005c44:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a005c46:	6963      	ldr	r3, [r4, #20]
1a005c48:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a005c4a:	7923      	ldrb	r3, [r4, #4]
1a005c4c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a005c50:	4669      	mov	r1, sp
1a005c52:	4628      	mov	r0, r5
1a005c54:	f7ff ff9a 	bl	1a005b8c <pll_calc_divs>
	if (pll[0].fout == freq) {
1a005c58:	9b06      	ldr	r3, [sp, #24]
1a005c5a:	42ab      	cmp	r3, r5
1a005c5c:	d027      	beq.n	1a005cae <pll_get_frac+0x7e>
	if (val < 0)
1a005c5e:	1aeb      	subs	r3, r5, r3
1a005c60:	d42e      	bmi.n	1a005cc0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a005c62:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a005c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a005c66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a005c6a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a005c6c:	6963      	ldr	r3, [r4, #20]
1a005c6e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a005c70:	7923      	ldrb	r3, [r4, #4]
1a005c72:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a005c76:	a910      	add	r1, sp, #64	; 0x40
1a005c78:	4628      	mov	r0, r5
1a005c7a:	f7ff ff87 	bl	1a005b8c <pll_calc_divs>
	if (pll[2].fout == freq) {
1a005c7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a005c80:	42ab      	cmp	r3, r5
1a005c82:	d01f      	beq.n	1a005cc4 <pll_get_frac+0x94>
	if (val < 0)
1a005c84:	1aeb      	subs	r3, r5, r3
1a005c86:	d425      	bmi.n	1a005cd4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a005c88:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a005c8a:	4b2b      	ldr	r3, [pc, #172]	; (1a005d38 <pll_get_frac+0x108>)
1a005c8c:	429d      	cmp	r5, r3
1a005c8e:	d923      	bls.n	1a005cd8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a005c90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a005c92:	1aed      	subs	r5, r5, r3
1a005c94:	d433      	bmi.n	1a005cfe <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a005c96:	42ae      	cmp	r6, r5
1a005c98:	dc3b      	bgt.n	1a005d12 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a005c9a:	42be      	cmp	r6, r7
1a005c9c:	dc31      	bgt.n	1a005d02 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a005c9e:	466d      	mov	r5, sp
1a005ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005ca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005cac:	e006      	b.n	1a005cbc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a005cae:	466d      	mov	r5, sp
1a005cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005cb4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005cb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a005cbc:	b019      	add	sp, #100	; 0x64
1a005cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a005cc0:	425b      	negs	r3, r3
1a005cc2:	e7ce      	b.n	1a005c62 <pll_get_frac+0x32>
		*ppll = pll[2];
1a005cc4:	ad10      	add	r5, sp, #64	; 0x40
1a005cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005cca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005cce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a005cd2:	e7f3      	b.n	1a005cbc <pll_get_frac+0x8c>
		return -val;
1a005cd4:	425b      	negs	r3, r3
1a005cd6:	e7d7      	b.n	1a005c88 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a005cd8:	2340      	movs	r3, #64	; 0x40
1a005cda:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a005cdc:	6963      	ldr	r3, [r4, #20]
1a005cde:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a005ce0:	a908      	add	r1, sp, #32
1a005ce2:	4628      	mov	r0, r5
1a005ce4:	f7ff ff52 	bl	1a005b8c <pll_calc_divs>
		if (pll[1].fout == freq) {
1a005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a005cea:	42ab      	cmp	r3, r5
1a005cec:	d1d0      	bne.n	1a005c90 <pll_get_frac+0x60>
			*ppll = pll[1];
1a005cee:	ad08      	add	r5, sp, #32
1a005cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005cf4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005cf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a005cfc:	e7de      	b.n	1a005cbc <pll_get_frac+0x8c>
		return -val;
1a005cfe:	426d      	negs	r5, r5
1a005d00:	e7c9      	b.n	1a005c96 <pll_get_frac+0x66>
			*ppll = pll[2];
1a005d02:	ad10      	add	r5, sp, #64	; 0x40
1a005d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005d08:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005d10:	e7d4      	b.n	1a005cbc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a005d12:	42af      	cmp	r7, r5
1a005d14:	db07      	blt.n	1a005d26 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a005d16:	ad08      	add	r5, sp, #32
1a005d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005d1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005d24:	e7ca      	b.n	1a005cbc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a005d26:	ad10      	add	r5, sp, #64	; 0x40
1a005d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a005d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a005d2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a005d30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a005d34:	e7c2      	b.n	1a005cbc <pll_get_frac+0x8c>
1a005d36:	bf00      	nop
1a005d38:	068e7780 	.word	0x068e7780

1a005d3c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a005d3c:	b430      	push	{r4, r5}
1a005d3e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a005d40:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a005d42:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005d44:	e000      	b.n	1a005d48 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a005d46:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a005d48:	281c      	cmp	r0, #28
1a005d4a:	d118      	bne.n	1a005d7e <Chip_Clock_FindBaseClock+0x42>
1a005d4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005d50:	0051      	lsls	r1, r2, #1
1a005d52:	4a0c      	ldr	r2, [pc, #48]	; (1a005d84 <Chip_Clock_FindBaseClock+0x48>)
1a005d54:	440a      	add	r2, r1
1a005d56:	7914      	ldrb	r4, [r2, #4]
1a005d58:	4284      	cmp	r4, r0
1a005d5a:	d010      	beq.n	1a005d7e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a005d5c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a005d60:	004a      	lsls	r2, r1, #1
1a005d62:	4908      	ldr	r1, [pc, #32]	; (1a005d84 <Chip_Clock_FindBaseClock+0x48>)
1a005d64:	5a8a      	ldrh	r2, [r1, r2]
1a005d66:	42aa      	cmp	r2, r5
1a005d68:	d8ed      	bhi.n	1a005d46 <Chip_Clock_FindBaseClock+0xa>
1a005d6a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a005d6e:	0051      	lsls	r1, r2, #1
1a005d70:	4a04      	ldr	r2, [pc, #16]	; (1a005d84 <Chip_Clock_FindBaseClock+0x48>)
1a005d72:	440a      	add	r2, r1
1a005d74:	8852      	ldrh	r2, [r2, #2]
1a005d76:	42aa      	cmp	r2, r5
1a005d78:	d3e5      	bcc.n	1a005d46 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a005d7a:	4620      	mov	r0, r4
1a005d7c:	e7e4      	b.n	1a005d48 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a005d7e:	bc30      	pop	{r4, r5}
1a005d80:	4770      	bx	lr
1a005d82:	bf00      	nop
1a005d84:	1a009d8c 	.word	0x1a009d8c

1a005d88 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a005d88:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a005d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a005d8e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a005d90:	4a0d      	ldr	r2, [pc, #52]	; (1a005dc8 <Chip_Clock_EnableCrystal+0x40>)
1a005d92:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a005d94:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a005d98:	6992      	ldr	r2, [r2, #24]
1a005d9a:	428a      	cmp	r2, r1
1a005d9c:	d001      	beq.n	1a005da2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005d9e:	4a0a      	ldr	r2, [pc, #40]	; (1a005dc8 <Chip_Clock_EnableCrystal+0x40>)
1a005da0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a005da2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a005da6:	4a09      	ldr	r2, [pc, #36]	; (1a005dcc <Chip_Clock_EnableCrystal+0x44>)
1a005da8:	6811      	ldr	r1, [r2, #0]
1a005daa:	4a09      	ldr	r2, [pc, #36]	; (1a005dd0 <Chip_Clock_EnableCrystal+0x48>)
1a005dac:	4291      	cmp	r1, r2
1a005dae:	d901      	bls.n	1a005db4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a005db0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a005db4:	4a04      	ldr	r2, [pc, #16]	; (1a005dc8 <Chip_Clock_EnableCrystal+0x40>)
1a005db6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a005db8:	9b01      	ldr	r3, [sp, #4]
1a005dba:	1e5a      	subs	r2, r3, #1
1a005dbc:	9201      	str	r2, [sp, #4]
1a005dbe:	2b00      	cmp	r3, #0
1a005dc0:	d1fa      	bne.n	1a005db8 <Chip_Clock_EnableCrystal+0x30>
}
1a005dc2:	b002      	add	sp, #8
1a005dc4:	4770      	bx	lr
1a005dc6:	bf00      	nop
1a005dc8:	40050000 	.word	0x40050000
1a005dcc:	1a009cf4 	.word	0x1a009cf4
1a005dd0:	01312cff 	.word	0x01312cff

1a005dd4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a005dd4:	3012      	adds	r0, #18
1a005dd6:	4b05      	ldr	r3, [pc, #20]	; (1a005dec <Chip_Clock_GetDividerSource+0x18>)
1a005dd8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a005ddc:	f010 0f01 	tst.w	r0, #1
1a005de0:	d102      	bne.n	1a005de8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a005de2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a005de6:	4770      	bx	lr
		return CLKINPUT_PD;
1a005de8:	2011      	movs	r0, #17
}
1a005dea:	4770      	bx	lr
1a005dec:	40050000 	.word	0x40050000

1a005df0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a005df0:	f100 0212 	add.w	r2, r0, #18
1a005df4:	4b03      	ldr	r3, [pc, #12]	; (1a005e04 <Chip_Clock_GetDividerDivisor+0x14>)
1a005df6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a005dfa:	4b03      	ldr	r3, [pc, #12]	; (1a005e08 <Chip_Clock_GetDividerDivisor+0x18>)
1a005dfc:	5c18      	ldrb	r0, [r3, r0]
}
1a005dfe:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a005e02:	4770      	bx	lr
1a005e04:	40050000 	.word	0x40050000
1a005e08:	1a009d84 	.word	0x1a009d84

1a005e0c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a005e0c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a005e0e:	2810      	cmp	r0, #16
1a005e10:	d80a      	bhi.n	1a005e28 <Chip_Clock_GetClockInputHz+0x1c>
1a005e12:	e8df f000 	tbb	[pc, r0]
1a005e16:	0b42      	.short	0x0b42
1a005e18:	091f160d 	.word	0x091f160d
1a005e1c:	2b282522 	.word	0x2b282522
1a005e20:	322e0909 	.word	0x322e0909
1a005e24:	3a36      	.short	0x3a36
1a005e26:	3e          	.byte	0x3e
1a005e27:	00          	.byte	0x00
	uint32_t rate = 0;
1a005e28:	2000      	movs	r0, #0
1a005e2a:	e038      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a005e2c:	481e      	ldr	r0, [pc, #120]	; (1a005ea8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a005e2e:	e036      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a005e30:	4b1e      	ldr	r3, [pc, #120]	; (1a005eac <Chip_Clock_GetClockInputHz+0xa0>)
1a005e32:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005e36:	f003 0307 	and.w	r3, r3, #7
1a005e3a:	2b04      	cmp	r3, #4
1a005e3c:	d130      	bne.n	1a005ea0 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a005e3e:	2000      	movs	r0, #0
1a005e40:	e02d      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a005e42:	4b1a      	ldr	r3, [pc, #104]	; (1a005eac <Chip_Clock_GetClockInputHz+0xa0>)
1a005e44:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a005e48:	f003 0307 	and.w	r3, r3, #7
1a005e4c:	2b04      	cmp	r3, #4
1a005e4e:	d029      	beq.n	1a005ea4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a005e50:	4817      	ldr	r0, [pc, #92]	; (1a005eb0 <Chip_Clock_GetClockInputHz+0xa4>)
1a005e52:	e024      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a005e54:	4b17      	ldr	r3, [pc, #92]	; (1a005eb4 <Chip_Clock_GetClockInputHz+0xa8>)
1a005e56:	6818      	ldr	r0, [r3, #0]
		break;
1a005e58:	e021      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a005e5a:	4b17      	ldr	r3, [pc, #92]	; (1a005eb8 <Chip_Clock_GetClockInputHz+0xac>)
1a005e5c:	6818      	ldr	r0, [r3, #0]
		break;
1a005e5e:	e01e      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a005e60:	4b16      	ldr	r3, [pc, #88]	; (1a005ebc <Chip_Clock_GetClockInputHz+0xb0>)
1a005e62:	6818      	ldr	r0, [r3, #0]
		break;
1a005e64:	e01b      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a005e66:	4b15      	ldr	r3, [pc, #84]	; (1a005ebc <Chip_Clock_GetClockInputHz+0xb0>)
1a005e68:	6858      	ldr	r0, [r3, #4]
		break;
1a005e6a:	e018      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a005e6c:	f000 f86a 	bl	1a005f44 <Chip_Clock_GetMainPLLHz>
		break;
1a005e70:	e015      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a005e72:	2100      	movs	r1, #0
1a005e74:	f000 f89c 	bl	1a005fb0 <Chip_Clock_GetDivRate>
		break;
1a005e78:	e011      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a005e7a:	2101      	movs	r1, #1
1a005e7c:	f000 f898 	bl	1a005fb0 <Chip_Clock_GetDivRate>
		break;
1a005e80:	e00d      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a005e82:	2102      	movs	r1, #2
1a005e84:	f000 f894 	bl	1a005fb0 <Chip_Clock_GetDivRate>
		break;
1a005e88:	e009      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a005e8a:	2103      	movs	r1, #3
1a005e8c:	f000 f890 	bl	1a005fb0 <Chip_Clock_GetDivRate>
		break;
1a005e90:	e005      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a005e92:	2104      	movs	r1, #4
1a005e94:	f000 f88c 	bl	1a005fb0 <Chip_Clock_GetDivRate>
		break;
1a005e98:	e001      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a005e9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a005e9e:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a005ea0:	4803      	ldr	r0, [pc, #12]	; (1a005eb0 <Chip_Clock_GetClockInputHz+0xa4>)
1a005ea2:	e7fc      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a005ea4:	4806      	ldr	r0, [pc, #24]	; (1a005ec0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a005ea6:	e7fa      	b.n	1a005e9e <Chip_Clock_GetClockInputHz+0x92>
1a005ea8:	00b71b00 	.word	0x00b71b00
1a005eac:	40043000 	.word	0x40043000
1a005eb0:	017d7840 	.word	0x017d7840
1a005eb4:	1a009cc8 	.word	0x1a009cc8
1a005eb8:	1a009cf4 	.word	0x1a009cf4
1a005ebc:	10003444 	.word	0x10003444
1a005ec0:	02faf080 	.word	0x02faf080

1a005ec4 <Chip_Clock_CalcMainPLLValue>:
{
1a005ec4:	b538      	push	{r3, r4, r5, lr}
1a005ec6:	4605      	mov	r5, r0
1a005ec8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a005eca:	7908      	ldrb	r0, [r1, #4]
1a005ecc:	f7ff ff9e 	bl	1a005e0c <Chip_Clock_GetClockInputHz>
1a005ed0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a005ed2:	4b19      	ldr	r3, [pc, #100]	; (1a005f38 <Chip_Clock_CalcMainPLLValue+0x74>)
1a005ed4:	442b      	add	r3, r5
1a005ed6:	4a19      	ldr	r2, [pc, #100]	; (1a005f3c <Chip_Clock_CalcMainPLLValue+0x78>)
1a005ed8:	4293      	cmp	r3, r2
1a005eda:	d821      	bhi.n	1a005f20 <Chip_Clock_CalcMainPLLValue+0x5c>
1a005edc:	b318      	cbz	r0, 1a005f26 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a005ede:	2380      	movs	r3, #128	; 0x80
1a005ee0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a005ee2:	2300      	movs	r3, #0
1a005ee4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a005ee6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a005ee8:	fbb5 f3f0 	udiv	r3, r5, r0
1a005eec:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a005eee:	4a14      	ldr	r2, [pc, #80]	; (1a005f40 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a005ef0:	4295      	cmp	r5, r2
1a005ef2:	d903      	bls.n	1a005efc <Chip_Clock_CalcMainPLLValue+0x38>
1a005ef4:	fb03 f000 	mul.w	r0, r3, r0
1a005ef8:	42a8      	cmp	r0, r5
1a005efa:	d007      	beq.n	1a005f0c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a005efc:	4621      	mov	r1, r4
1a005efe:	4628      	mov	r0, r5
1a005f00:	f7ff fe96 	bl	1a005c30 <pll_get_frac>
		if (!ppll->nsel) {
1a005f04:	68a3      	ldr	r3, [r4, #8]
1a005f06:	b18b      	cbz	r3, 1a005f2c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a005f08:	3b01      	subs	r3, #1
1a005f0a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a005f0c:	6923      	ldr	r3, [r4, #16]
1a005f0e:	b183      	cbz	r3, 1a005f32 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a005f10:	68e2      	ldr	r2, [r4, #12]
1a005f12:	b10a      	cbz	r2, 1a005f18 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a005f14:	3a01      	subs	r2, #1
1a005f16:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a005f18:	3b01      	subs	r3, #1
1a005f1a:	6123      	str	r3, [r4, #16]
	return 0;
1a005f1c:	2000      	movs	r0, #0
}
1a005f1e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a005f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005f24:	e7fb      	b.n	1a005f1e <Chip_Clock_CalcMainPLLValue+0x5a>
1a005f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005f2a:	e7f8      	b.n	1a005f1e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a005f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005f30:	e7f5      	b.n	1a005f1e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a005f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005f36:	e7f2      	b.n	1a005f1e <Chip_Clock_CalcMainPLLValue+0x5a>
1a005f38:	ff6b3a10 	.word	0xff6b3a10
1a005f3c:	0b940510 	.word	0x0b940510
1a005f40:	094c5eff 	.word	0x094c5eff

1a005f44 <Chip_Clock_GetMainPLLHz>:
{
1a005f44:	b530      	push	{r4, r5, lr}
1a005f46:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a005f48:	4d17      	ldr	r5, [pc, #92]	; (1a005fa8 <Chip_Clock_GetMainPLLHz+0x64>)
1a005f4a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a005f4c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a005f50:	f7ff ff5c 	bl	1a005e0c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a005f54:	4b15      	ldr	r3, [pc, #84]	; (1a005fac <Chip_Clock_GetMainPLLHz+0x68>)
1a005f56:	681b      	ldr	r3, [r3, #0]
1a005f58:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a005f5a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a005f5c:	f013 0f01 	tst.w	r3, #1
1a005f60:	d01f      	beq.n	1a005fa2 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a005f62:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a005f66:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a005f6a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a005f6e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a005f72:	3301      	adds	r3, #1
	n = nsel + 1;
1a005f74:	3201      	adds	r2, #1
	p = ptab[psel];
1a005f76:	f10d 0c08 	add.w	ip, sp, #8
1a005f7a:	4461      	add	r1, ip
1a005f7c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a005f80:	f014 0f80 	tst.w	r4, #128	; 0x80
1a005f84:	d108      	bne.n	1a005f98 <Chip_Clock_GetMainPLLHz+0x54>
1a005f86:	b93d      	cbnz	r5, 1a005f98 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a005f88:	0049      	lsls	r1, r1, #1
1a005f8a:	fbb3 f3f1 	udiv	r3, r3, r1
1a005f8e:	fbb0 f0f2 	udiv	r0, r0, r2
1a005f92:	fb00 f003 	mul.w	r0, r0, r3
1a005f96:	e005      	b.n	1a005fa4 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a005f98:	fbb0 f0f2 	udiv	r0, r0, r2
1a005f9c:	fb03 f000 	mul.w	r0, r3, r0
1a005fa0:	e000      	b.n	1a005fa4 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a005fa2:	2000      	movs	r0, #0
}
1a005fa4:	b003      	add	sp, #12
1a005fa6:	bd30      	pop	{r4, r5, pc}
1a005fa8:	40050000 	.word	0x40050000
1a005fac:	1a009d80 	.word	0x1a009d80

1a005fb0 <Chip_Clock_GetDivRate>:
{
1a005fb0:	b538      	push	{r3, r4, r5, lr}
1a005fb2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a005fb4:	4608      	mov	r0, r1
1a005fb6:	f7ff ff0d 	bl	1a005dd4 <Chip_Clock_GetDividerSource>
1a005fba:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a005fbc:	4620      	mov	r0, r4
1a005fbe:	f7ff ff17 	bl	1a005df0 <Chip_Clock_GetDividerDivisor>
1a005fc2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a005fc4:	4628      	mov	r0, r5
1a005fc6:	f7ff ff21 	bl	1a005e0c <Chip_Clock_GetClockInputHz>
1a005fca:	3401      	adds	r4, #1
}
1a005fcc:	fbb0 f0f4 	udiv	r0, r0, r4
1a005fd0:	bd38      	pop	{r3, r4, r5, pc}
1a005fd2:	Address 0x000000001a005fd2 is out of bounds.


1a005fd4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a005fd4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a005fd6:	f100 0416 	add.w	r4, r0, #22
1a005fda:	00a4      	lsls	r4, r4, #2
1a005fdc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a005fe0:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a005fe4:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a005fe6:	281b      	cmp	r0, #27
1a005fe8:	d813      	bhi.n	1a006012 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a005fea:	2911      	cmp	r1, #17
1a005fec:	d01a      	beq.n	1a006024 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a005fee:	4d0e      	ldr	r5, [pc, #56]	; (1a006028 <Chip_Clock_SetBaseClock+0x54>)
1a005ff0:	4025      	ands	r5, r4

			if (autoblocken) {
1a005ff2:	b10a      	cbz	r2, 1a005ff8 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a005ff4:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a005ff8:	b10b      	cbz	r3, 1a005ffe <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a005ffa:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a005ffe:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a006002:	3016      	adds	r0, #22
1a006004:	0080      	lsls	r0, r0, #2
1a006006:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00600a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00600e:	6045      	str	r5, [r0, #4]
1a006010:	e008      	b.n	1a006024 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a006012:	f044 0401 	orr.w	r4, r4, #1
1a006016:	3016      	adds	r0, #22
1a006018:	0080      	lsls	r0, r0, #2
1a00601a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00601e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a006022:	6044      	str	r4, [r0, #4]
	}
}
1a006024:	bc30      	pop	{r4, r5}
1a006026:	4770      	bx	lr
1a006028:	e0fff7fe 	.word	0xe0fff7fe

1a00602c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00602c:	281b      	cmp	r0, #27
1a00602e:	d80c      	bhi.n	1a00604a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a006030:	3016      	adds	r0, #22
1a006032:	0080      	lsls	r0, r0, #2
1a006034:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a006038:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00603c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00603e:	f010 0f01 	tst.w	r0, #1
1a006042:	d104      	bne.n	1a00604e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a006044:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a006048:	4770      	bx	lr
		return CLKINPUT_PD;
1a00604a:	2011      	movs	r0, #17
1a00604c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00604e:	2011      	movs	r0, #17
}
1a006050:	4770      	bx	lr

1a006052 <Chip_Clock_GetBaseClocktHz>:
{
1a006052:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a006054:	f7ff ffea 	bl	1a00602c <Chip_Clock_GetBaseClock>
1a006058:	f7ff fed8 	bl	1a005e0c <Chip_Clock_GetClockInputHz>
}
1a00605c:	bd08      	pop	{r3, pc}
1a00605e:	Address 0x000000001a00605e is out of bounds.


1a006060 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a006060:	b969      	cbnz	r1, 1a00607e <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a006062:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a006064:	b10a      	cbz	r2, 1a00606a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a006066:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00606a:	2b02      	cmp	r3, #2
1a00606c:	d009      	beq.n	1a006082 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00606e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a006072:	d209      	bcs.n	1a006088 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a006074:	3020      	adds	r0, #32
1a006076:	4b07      	ldr	r3, [pc, #28]	; (1a006094 <Chip_Clock_EnableOpts+0x34>)
1a006078:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a00607c:	4770      	bx	lr
		reg |= (1 << 1);
1a00607e:	2103      	movs	r1, #3
1a006080:	e7f0      	b.n	1a006064 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a006082:	f041 0120 	orr.w	r1, r1, #32
1a006086:	e7f2      	b.n	1a00606e <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a006088:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00608c:	4b02      	ldr	r3, [pc, #8]	; (1a006098 <Chip_Clock_EnableOpts+0x38>)
1a00608e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a006092:	4770      	bx	lr
1a006094:	40051000 	.word	0x40051000
1a006098:	40052000 	.word	0x40052000

1a00609c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00609c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0060a0:	d208      	bcs.n	1a0060b4 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0060a2:	4a09      	ldr	r2, [pc, #36]	; (1a0060c8 <Chip_Clock_Enable+0x2c>)
1a0060a4:	3020      	adds	r0, #32
1a0060a6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0060aa:	f043 0301 	orr.w	r3, r3, #1
1a0060ae:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0060b2:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0060b4:	4a05      	ldr	r2, [pc, #20]	; (1a0060cc <Chip_Clock_Enable+0x30>)
1a0060b6:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0060ba:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0060be:	f043 0301 	orr.w	r3, r3, #1
1a0060c2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0060c6:	4770      	bx	lr
1a0060c8:	40051000 	.word	0x40051000
1a0060cc:	40052000 	.word	0x40052000

1a0060d0 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0060d0:	4b04      	ldr	r3, [pc, #16]	; (1a0060e4 <Chip_Clock_RTCEnable+0x14>)
1a0060d2:	685a      	ldr	r2, [r3, #4]
1a0060d4:	f022 020c 	bic.w	r2, r2, #12
1a0060d8:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0060da:	685a      	ldr	r2, [r3, #4]
1a0060dc:	f042 0203 	orr.w	r2, r2, #3
1a0060e0:	605a      	str	r2, [r3, #4]
}
1a0060e2:	4770      	bx	lr
1a0060e4:	40043000 	.word	0x40043000

1a0060e8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0060e8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0060ea:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0060ee:	d309      	bcc.n	1a006104 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0060f0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0060f4:	4a0d      	ldr	r2, [pc, #52]	; (1a00612c <Chip_Clock_GetRate+0x44>)
1a0060f6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0060fa:	f014 0f01 	tst.w	r4, #1
1a0060fe:	d107      	bne.n	1a006110 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a006100:	2000      	movs	r0, #0
	}

	return rate;
}
1a006102:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a006104:	f100 0320 	add.w	r3, r0, #32
1a006108:	4a09      	ldr	r2, [pc, #36]	; (1a006130 <Chip_Clock_GetRate+0x48>)
1a00610a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00610e:	e7f4      	b.n	1a0060fa <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a006110:	f7ff fe14 	bl	1a005d3c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a006114:	f7ff ff9d 	bl	1a006052 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a006118:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a00611c:	d103      	bne.n	1a006126 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00611e:	2301      	movs	r3, #1
		rate = rate / div;
1a006120:	fbb0 f0f3 	udiv	r0, r0, r3
1a006124:	e7ed      	b.n	1a006102 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a006126:	2302      	movs	r3, #2
1a006128:	e7fa      	b.n	1a006120 <Chip_Clock_GetRate+0x38>
1a00612a:	bf00      	nop
1a00612c:	40052000 	.word	0x40052000
1a006130:	40051000 	.word	0x40051000

1a006134 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a006134:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a006136:	2069      	movs	r0, #105	; 0x69
1a006138:	f7ff ffd6 	bl	1a0060e8 <Chip_Clock_GetRate>
1a00613c:	4b01      	ldr	r3, [pc, #4]	; (1a006144 <SystemCoreClockUpdate+0x10>)
1a00613e:	6018      	str	r0, [r3, #0]
}
1a006140:	bd08      	pop	{r3, pc}
1a006142:	bf00      	nop
1a006144:	10003644 	.word	0x10003644

1a006148 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a006148:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a00614a:	6843      	ldr	r3, [r0, #4]
1a00614c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a006150:	2b30      	cmp	r3, #48	; 0x30
1a006152:	d04a      	beq.n	1a0061ea <Chip_I2CM_XferHandler+0xa2>
1a006154:	d90f      	bls.n	1a006176 <Chip_I2CM_XferHandler+0x2e>
1a006156:	2b48      	cmp	r3, #72	; 0x48
1a006158:	d06a      	beq.n	1a006230 <Chip_I2CM_XferHandler+0xe8>
1a00615a:	d83a      	bhi.n	1a0061d2 <Chip_I2CM_XferHandler+0x8a>
1a00615c:	2b38      	cmp	r3, #56	; 0x38
1a00615e:	d06b      	beq.n	1a006238 <Chip_I2CM_XferHandler+0xf0>
1a006160:	2b40      	cmp	r3, #64	; 0x40
1a006162:	d13e      	bne.n	1a0061e2 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a006164:	88ca      	ldrh	r2, [r1, #6]
1a006166:	2a01      	cmp	r2, #1
1a006168:	d95a      	bls.n	1a006220 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a00616a:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a00616c:	b9b2      	cbnz	r2, 1a00619c <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a00616e:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a006170:	f023 0310 	bic.w	r3, r3, #16
1a006174:	e012      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a006176:	2b10      	cmp	r3, #16
1a006178:	d007      	beq.n	1a00618a <Chip_I2CM_XferHandler+0x42>
1a00617a:	d81c      	bhi.n	1a0061b6 <Chip_I2CM_XferHandler+0x6e>
1a00617c:	b91b      	cbnz	r3, 1a006186 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a00617e:	2303      	movs	r3, #3
1a006180:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a006182:	232c      	movs	r3, #44	; 0x2c
        break;
1a006184:	e00a      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a006186:	2b08      	cmp	r3, #8
1a006188:	d12b      	bne.n	1a0061e2 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00618a:	780a      	ldrb	r2, [r1, #0]
1a00618c:	888b      	ldrh	r3, [r1, #4]
1a00618e:	fab3 f383 	clz	r3, r3
1a006192:	095b      	lsrs	r3, r3, #5
1a006194:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a006198:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00619a:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a00619c:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0061a0:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0061a2:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0061a6:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0061a8:	8848      	ldrh	r0, [r1, #2]
1a0061aa:	38ff      	subs	r0, #255	; 0xff
1a0061ac:	bf18      	it	ne
1a0061ae:	2001      	movne	r0, #1
}
1a0061b0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0061b4:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0061b6:	2b20      	cmp	r3, #32
1a0061b8:	d017      	beq.n	1a0061ea <Chip_I2CM_XferHandler+0xa2>
1a0061ba:	2b28      	cmp	r3, #40	; 0x28
1a0061bc:	d001      	beq.n	1a0061c2 <Chip_I2CM_XferHandler+0x7a>
1a0061be:	2b18      	cmp	r3, #24
1a0061c0:	d10f      	bne.n	1a0061e2 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a0061c2:	888b      	ldrh	r3, [r1, #4]
1a0061c4:	b9cb      	cbnz	r3, 1a0061fa <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a0061c6:	88cb      	ldrh	r3, [r1, #6]
1a0061c8:	2b00      	cmp	r3, #0
1a0061ca:	d139      	bne.n	1a006240 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a0061cc:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a0061ce:	232c      	movs	r3, #44	; 0x2c
1a0061d0:	e7e4      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0061d2:	2b58      	cmp	r3, #88	; 0x58
1a0061d4:	d01b      	beq.n	1a00620e <Chip_I2CM_XferHandler+0xc6>
1a0061d6:	2bf8      	cmp	r3, #248	; 0xf8
1a0061d8:	d101      	bne.n	1a0061de <Chip_I2CM_XferHandler+0x96>
      return 0;
1a0061da:	2000      	movs	r0, #0
1a0061dc:	e7e8      	b.n	1a0061b0 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0061de:	2b50      	cmp	r3, #80	; 0x50
1a0061e0:	d015      	beq.n	1a00620e <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a0061e2:	2301      	movs	r3, #1
1a0061e4:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0061e6:	232c      	movs	r3, #44	; 0x2c
        break;
1a0061e8:	e7d8      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a0061ea:	784b      	ldrb	r3, [r1, #1]
1a0061ec:	f013 0f01 	tst.w	r3, #1
1a0061f0:	d1e7      	bne.n	1a0061c2 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a0061f2:	2302      	movs	r3, #2
1a0061f4:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0061f6:	232c      	movs	r3, #44	; 0x2c
			break;
1a0061f8:	e7d0      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a0061fa:	688b      	ldr	r3, [r1, #8]
1a0061fc:	1c5a      	adds	r2, r3, #1
1a0061fe:	608a      	str	r2, [r1, #8]
1a006200:	781b      	ldrb	r3, [r3, #0]
1a006202:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a006204:	888b      	ldrh	r3, [r1, #4]
1a006206:	3b01      	subs	r3, #1
1a006208:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00620a:	233c      	movs	r3, #60	; 0x3c
1a00620c:	e7c6      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a00620e:	6882      	ldr	r2, [r0, #8]
1a006210:	68cb      	ldr	r3, [r1, #12]
1a006212:	1c5c      	adds	r4, r3, #1
1a006214:	60cc      	str	r4, [r1, #12]
1a006216:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a006218:	88cb      	ldrh	r3, [r1, #6]
1a00621a:	3b01      	subs	r3, #1
1a00621c:	80cb      	strh	r3, [r1, #6]
1a00621e:	e7a1      	b.n	1a006164 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a006220:	784b      	ldrb	r3, [r1, #1]
1a006222:	f013 0f02 	tst.w	r3, #2
1a006226:	d101      	bne.n	1a00622c <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a006228:	233c      	movs	r3, #60	; 0x3c
1a00622a:	e79f      	b.n	1a00616c <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a00622c:	2338      	movs	r3, #56	; 0x38
1a00622e:	e79d      	b.n	1a00616c <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a006230:	2304      	movs	r3, #4
1a006232:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a006234:	232c      	movs	r3, #44	; 0x2c
		break;
1a006236:	e7b1      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a006238:	2305      	movs	r3, #5
1a00623a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00623c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00623e:	e7ad      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a006240:	231c      	movs	r3, #28
1a006242:	e7ab      	b.n	1a00619c <Chip_I2CM_XferHandler+0x54>

1a006244 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a006244:	23ff      	movs	r3, #255	; 0xff
1a006246:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a006248:	232c      	movs	r3, #44	; 0x2c
1a00624a:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a00624c:	2360      	movs	r3, #96	; 0x60
1a00624e:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a006250:	4770      	bx	lr

1a006252 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a006252:	b538      	push	{r3, r4, r5, lr}
1a006254:	4604      	mov	r4, r0
1a006256:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a006258:	f7ff fff4 	bl	1a006244 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a00625c:	2000      	movs	r0, #0

	while (ret == 0) {
1a00625e:	e007      	b.n	1a006270 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a006260:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a006262:	f013 0f08 	tst.w	r3, #8
1a006266:	d0fb      	beq.n	1a006260 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a006268:	4629      	mov	r1, r5
1a00626a:	4620      	mov	r0, r4
1a00626c:	f7ff ff6c 	bl	1a006148 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a006270:	2800      	cmp	r0, #0
1a006272:	d0f5      	beq.n	1a006260 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a006274:	bd38      	pop	{r3, r4, r5, pc}

1a006276 <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a006276:	6883      	ldr	r3, [r0, #8]
1a006278:	f043 0302 	orr.w	r3, r3, #2
1a00627c:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a00627e:	6883      	ldr	r3, [r0, #8]
1a006280:	f013 0f02 	tst.w	r3, #2
1a006284:	d0fb      	beq.n	1a00627e <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a006286:	6883      	ldr	r3, [r0, #8]
1a006288:	f003 0311 	and.w	r3, r3, #17
1a00628c:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a00628e:	6883      	ldr	r3, [r0, #8]
1a006290:	f013 0f02 	tst.w	r3, #2
1a006294:	d1fb      	bne.n	1a00628e <Chip_RTC_ResetClockTickCounter+0x18>
}
1a006296:	4770      	bx	lr

1a006298 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a006298:	2901      	cmp	r1, #1
1a00629a:	d004      	beq.n	1a0062a6 <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a00629c:	6883      	ldr	r3, [r0, #8]
1a00629e:	f003 0312 	and.w	r3, r3, #18
1a0062a2:	6083      	str	r3, [r0, #8]
	}
}
1a0062a4:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a0062a6:	6883      	ldr	r3, [r0, #8]
1a0062a8:	f043 0301 	orr.w	r3, r3, #1
1a0062ac:	6083      	str	r3, [r0, #8]
1a0062ae:	4770      	bx	lr

1a0062b0 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0062b0:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a0062b2:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a0062b4:	f015 0f01 	tst.w	r5, #1
1a0062b8:	d002      	beq.n	1a0062c0 <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a0062ba:	f005 0312 	and.w	r3, r5, #18
1a0062be:	6083      	str	r3, [r0, #8]
{
1a0062c0:	2300      	movs	r3, #0
1a0062c2:	e007      	b.n	1a0062d4 <Chip_RTC_SetFullTime+0x24>
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a0062c4:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a0062c8:	f103 0208 	add.w	r2, r3, #8
1a0062cc:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a0062d0:	3301      	adds	r3, #1
1a0062d2:	b2db      	uxtb	r3, r3
1a0062d4:	2b07      	cmp	r3, #7
1a0062d6:	d9f5      	bls.n	1a0062c4 <Chip_RTC_SetFullTime+0x14>
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a0062d8:	6085      	str	r5, [r0, #8]
}
1a0062da:	bc30      	pop	{r4, r5}
1a0062dc:	4770      	bx	lr

1a0062de <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a0062de:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a0062e0:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0062e2:	e009      	b.n	1a0062f8 <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a0062e4:	f103 0208 	add.w	r2, r3, #8
1a0062e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a0062ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a0062f0:	3301      	adds	r3, #1
1a0062f2:	b2db      	uxtb	r3, r3
1a0062f4:	2b07      	cmp	r3, #7
1a0062f6:	d9f5      	bls.n	1a0062e4 <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a0062f8:	6a03      	ldr	r3, [r0, #32]
1a0062fa:	42a3      	cmp	r3, r4
1a0062fc:	d003      	beq.n	1a006306 <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a0062fe:	6a04      	ldr	r4, [r0, #32]
1a006300:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a006302:	2301      	movs	r3, #1
1a006304:	e7f6      	b.n	1a0062f4 <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a006306:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00630a:	4770      	bx	lr

1a00630c <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a00630c:	2901      	cmp	r1, #1
1a00630e:	d004      	beq.n	1a00631a <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a006310:	6883      	ldr	r3, [r0, #8]
1a006312:	f043 0310 	orr.w	r3, r3, #16
1a006316:	6083      	str	r3, [r0, #8]
	}
}
1a006318:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a00631a:	6883      	ldr	r3, [r0, #8]
1a00631c:	f003 0303 	and.w	r3, r3, #3
1a006320:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a006322:	6883      	ldr	r3, [r0, #8]
1a006324:	f013 0f10 	tst.w	r3, #16
1a006328:	d1f7      	bne.n	1a00631a <Chip_RTC_CalibCounterCmd+0xe>
1a00632a:	4770      	bx	lr

1a00632c <Chip_RTC_Init>:
{
1a00632c:	b510      	push	{r4, lr}
1a00632e:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a006330:	f7ff fece 	bl	1a0060d0 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a006334:	4b0e      	ldr	r3, [pc, #56]	; (1a006370 <Chip_RTC_Init+0x44>)
1a006336:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a00633a:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a00633c:	4b0c      	ldr	r3, [pc, #48]	; (1a006370 <Chip_RTC_Init+0x44>)
1a00633e:	681b      	ldr	r3, [r3, #0]
1a006340:	2b00      	cmp	r3, #0
1a006342:	d1fb      	bne.n	1a00633c <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a006344:	2100      	movs	r1, #0
1a006346:	4620      	mov	r0, r4
1a006348:	f7ff ffa6 	bl	1a006298 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a00634c:	2100      	movs	r1, #0
1a00634e:	4620      	mov	r0, r4
1a006350:	f7ff ffdc 	bl	1a00630c <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a006354:	4620      	mov	r0, r4
1a006356:	f7ff ff8e 	bl	1a006276 <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a00635a:	2303      	movs	r3, #3
1a00635c:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a00635e:	6823      	ldr	r3, [r4, #0]
1a006360:	2b00      	cmp	r3, #0
1a006362:	d1fc      	bne.n	1a00635e <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a006364:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a006366:	22ff      	movs	r2, #255	; 0xff
1a006368:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a00636a:	6423      	str	r3, [r4, #64]	; 0x40
}
1a00636c:	bd10      	pop	{r4, pc}
1a00636e:	bf00      	nop
1a006370:	40040000 	.word	0x40040000

1a006374 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a006374:	4770      	bx	lr
1a006376:	Address 0x000000001a006376 is out of bounds.


1a006378 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a006378:	b570      	push	{r4, r5, r6, lr}
1a00637a:	b08a      	sub	sp, #40	; 0x28
1a00637c:	4605      	mov	r5, r0
1a00637e:	460e      	mov	r6, r1
1a006380:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a006382:	f242 7310 	movw	r3, #10000	; 0x2710
1a006386:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a006388:	2806      	cmp	r0, #6
1a00638a:	d018      	beq.n	1a0063be <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00638c:	2300      	movs	r3, #0
1a00638e:	2201      	movs	r2, #1
1a006390:	4629      	mov	r1, r5
1a006392:	2004      	movs	r0, #4
1a006394:	f7ff fe1e 	bl	1a005fd4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a006398:	4a49      	ldr	r2, [pc, #292]	; (1a0064c0 <Chip_SetupCoreClock+0x148>)
1a00639a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00639c:	f043 0301 	orr.w	r3, r3, #1
1a0063a0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0063a2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0063a6:	a901      	add	r1, sp, #4
1a0063a8:	4630      	mov	r0, r6
1a0063aa:	f7ff fd8b 	bl	1a005ec4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0063ae:	4b45      	ldr	r3, [pc, #276]	; (1a0064c4 <Chip_SetupCoreClock+0x14c>)
1a0063b0:	429e      	cmp	r6, r3
1a0063b2:	d916      	bls.n	1a0063e2 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0063b4:	9b01      	ldr	r3, [sp, #4]
1a0063b6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0063ba:	d003      	beq.n	1a0063c4 <Chip_SetupCoreClock+0x4c>
1a0063bc:	e7fe      	b.n	1a0063bc <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0063be:	f7ff fce3 	bl	1a005d88 <Chip_Clock_EnableCrystal>
1a0063c2:	e7e3      	b.n	1a00638c <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0063c4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0063c8:	d005      	beq.n	1a0063d6 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0063ce:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0063d0:	2500      	movs	r5, #0
			direct = 1;
1a0063d2:	2601      	movs	r6, #1
1a0063d4:	e007      	b.n	1a0063e6 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0063d6:	9b04      	ldr	r3, [sp, #16]
1a0063d8:	3301      	adds	r3, #1
1a0063da:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0063dc:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0063de:	2600      	movs	r6, #0
1a0063e0:	e001      	b.n	1a0063e6 <Chip_SetupCoreClock+0x6e>
1a0063e2:	2500      	movs	r5, #0
1a0063e4:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0063e6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0063ea:	9b01      	ldr	r3, [sp, #4]
1a0063ec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0063f0:	9a05      	ldr	r2, [sp, #20]
1a0063f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0063f6:	9a03      	ldr	r2, [sp, #12]
1a0063f8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0063fc:	9a04      	ldr	r2, [sp, #16]
1a0063fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006402:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006406:	4a2e      	ldr	r2, [pc, #184]	; (1a0064c0 <Chip_SetupCoreClock+0x148>)
1a006408:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00640a:	4b2d      	ldr	r3, [pc, #180]	; (1a0064c0 <Chip_SetupCoreClock+0x148>)
1a00640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00640e:	f013 0f01 	tst.w	r3, #1
1a006412:	d0fa      	beq.n	1a00640a <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a006414:	2300      	movs	r3, #0
1a006416:	2201      	movs	r2, #1
1a006418:	2109      	movs	r1, #9
1a00641a:	2004      	movs	r0, #4
1a00641c:	f7ff fdda 	bl	1a005fd4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a006420:	b1fe      	cbz	r6, 1a006462 <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a006422:	f242 7310 	movw	r3, #10000	; 0x2710
1a006426:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a006428:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00642a:	1e5a      	subs	r2, r3, #1
1a00642c:	9209      	str	r2, [sp, #36]	; 0x24
1a00642e:	2b00      	cmp	r3, #0
1a006430:	d1fa      	bne.n	1a006428 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a006432:	9b01      	ldr	r3, [sp, #4]
1a006434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a006438:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00643a:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00643e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a006442:	9a05      	ldr	r2, [sp, #20]
1a006444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a006448:	9a03      	ldr	r2, [sp, #12]
1a00644a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00644e:	9a04      	ldr	r2, [sp, #16]
1a006450:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a006458:	4a19      	ldr	r2, [pc, #100]	; (1a0064c0 <Chip_SetupCoreClock+0x148>)
1a00645a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00645c:	b36c      	cbz	r4, 1a0064ba <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00645e:	2400      	movs	r4, #0
1a006460:	e029      	b.n	1a0064b6 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a006462:	2d00      	cmp	r5, #0
1a006464:	d0fa      	beq.n	1a00645c <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a006466:	f242 7310 	movw	r3, #10000	; 0x2710
1a00646a:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00646e:	1e5a      	subs	r2, r3, #1
1a006470:	9209      	str	r2, [sp, #36]	; 0x24
1a006472:	2b00      	cmp	r3, #0
1a006474:	d1fa      	bne.n	1a00646c <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a006476:	9b04      	ldr	r3, [sp, #16]
1a006478:	1e5a      	subs	r2, r3, #1
1a00647a:	9204      	str	r2, [sp, #16]
1a00647c:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a006480:	9b01      	ldr	r3, [sp, #4]
1a006482:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a006486:	9905      	ldr	r1, [sp, #20]
1a006488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00648c:	9903      	ldr	r1, [sp, #12]
1a00648e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a006492:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a006496:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00649a:	4a09      	ldr	r2, [pc, #36]	; (1a0064c0 <Chip_SetupCoreClock+0x148>)
1a00649c:	6453      	str	r3, [r2, #68]	; 0x44
1a00649e:	e7dd      	b.n	1a00645c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0064a0:	4809      	ldr	r0, [pc, #36]	; (1a0064c8 <Chip_SetupCoreClock+0x150>)
1a0064a2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0064a6:	78cb      	ldrb	r3, [r1, #3]
1a0064a8:	788a      	ldrb	r2, [r1, #2]
1a0064aa:	7849      	ldrb	r1, [r1, #1]
1a0064ac:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0064b0:	f7ff fd90 	bl	1a005fd4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0064b4:	3401      	adds	r4, #1
1a0064b6:	2c11      	cmp	r4, #17
1a0064b8:	d9f2      	bls.n	1a0064a0 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a0064ba:	b00a      	add	sp, #40	; 0x28
1a0064bc:	bd70      	pop	{r4, r5, r6, pc}
1a0064be:	bf00      	nop
1a0064c0:	40050000 	.word	0x40050000
1a0064c4:	068e7780 	.word	0x068e7780
1a0064c8:	1a009df8 	.word	0x1a009df8

1a0064cc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0064cc:	2901      	cmp	r1, #1
1a0064ce:	d000      	beq.n	1a0064d2 <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0064d0:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0064d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0064d6:	0082      	lsls	r2, r0, #2
1a0064d8:	4b03      	ldr	r3, [pc, #12]	; (1a0064e8 <Chip_I2C_EventHandler+0x1c>)
1a0064da:	4413      	add	r3, r2
1a0064dc:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0064de:	7d13      	ldrb	r3, [r2, #20]
1a0064e0:	b2db      	uxtb	r3, r3
1a0064e2:	2b04      	cmp	r3, #4
1a0064e4:	d0fb      	beq.n	1a0064de <Chip_I2C_EventHandler+0x12>
1a0064e6:	e7f3      	b.n	1a0064d0 <Chip_I2C_EventHandler+0x4>
1a0064e8:	1000001c 	.word	0x1000001c

1a0064ec <handleMasterXferState>:
{
1a0064ec:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0064ee:	6843      	ldr	r3, [r0, #4]
1a0064f0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a0064f4:	2b58      	cmp	r3, #88	; 0x58
1a0064f6:	d87e      	bhi.n	1a0065f6 <handleMasterXferState+0x10a>
1a0064f8:	e8df f003 	tbb	[pc, r3]
1a0064fc:	7d7d7d79 	.word	0x7d7d7d79
1a006500:	7d7d7d7d 	.word	0x7d7d7d7d
1a006504:	7d7d7d2f 	.word	0x7d7d7d2f
1a006508:	7d7d7d7d 	.word	0x7d7d7d7d
1a00650c:	7d7d7d2f 	.word	0x7d7d7d2f
1a006510:	7d7d7d7d 	.word	0x7d7d7d7d
1a006514:	7d7d7d39 	.word	0x7d7d7d39
1a006518:	7d7d7d7d 	.word	0x7d7d7d7d
1a00651c:	7d7d7d6d 	.word	0x7d7d7d6d
1a006520:	7d7d7d7d 	.word	0x7d7d7d7d
1a006524:	7d7d7d39 	.word	0x7d7d7d39
1a006528:	7d7d7d7d 	.word	0x7d7d7d7d
1a00652c:	7d7d7d71 	.word	0x7d7d7d71
1a006530:	7d7d7d7d 	.word	0x7d7d7d7d
1a006534:	7d7d7d75 	.word	0x7d7d7d75
1a006538:	7d7d7d7d 	.word	0x7d7d7d7d
1a00653c:	7d7d7d6b 	.word	0x7d7d7d6b
1a006540:	7d7d7d7d 	.word	0x7d7d7d7d
1a006544:	7d7d7d6d 	.word	0x7d7d7d6d
1a006548:	7d7d7d7d 	.word	0x7d7d7d7d
1a00654c:	7d7d7d2d 	.word	0x7d7d7d2d
1a006550:	7d7d7d7d 	.word	0x7d7d7d7d
1a006554:	4f          	.byte	0x4f
1a006555:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a006556:	233c      	movs	r3, #60	; 0x3c
1a006558:	e020      	b.n	1a00659c <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a00655a:	780a      	ldrb	r2, [r1, #0]
1a00655c:	688b      	ldr	r3, [r1, #8]
1a00655e:	fab3 f383 	clz	r3, r3
1a006562:	095b      	lsrs	r3, r3, #5
1a006564:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a006568:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a00656a:	233c      	movs	r3, #60	; 0x3c
		break;
1a00656c:	e023      	b.n	1a0065b6 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a00656e:	688b      	ldr	r3, [r1, #8]
1a006570:	b94b      	cbnz	r3, 1a006586 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a006572:	690b      	ldr	r3, [r1, #16]
1a006574:	b123      	cbz	r3, 1a006580 <handleMasterXferState+0x94>
1a006576:	f06f 0320 	mvn.w	r3, #32
1a00657a:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a00657e:	e01a      	b.n	1a0065b6 <handleMasterXferState+0xca>
1a006580:	f06f 0310 	mvn.w	r3, #16
1a006584:	e7f9      	b.n	1a00657a <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a006586:	684b      	ldr	r3, [r1, #4]
1a006588:	1c5a      	adds	r2, r3, #1
1a00658a:	604a      	str	r2, [r1, #4]
1a00658c:	781b      	ldrb	r3, [r3, #0]
1a00658e:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a006590:	688b      	ldr	r3, [r1, #8]
1a006592:	3b01      	subs	r3, #1
1a006594:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a006596:	233c      	movs	r3, #60	; 0x3c
1a006598:	e00d      	b.n	1a0065b6 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a00659a:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a00659c:	6884      	ldr	r4, [r0, #8]
1a00659e:	68ca      	ldr	r2, [r1, #12]
1a0065a0:	1c55      	adds	r5, r2, #1
1a0065a2:	60cd      	str	r5, [r1, #12]
1a0065a4:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a0065a6:	690a      	ldr	r2, [r1, #16]
1a0065a8:	3a01      	subs	r2, #1
1a0065aa:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a0065ac:	690a      	ldr	r2, [r1, #16]
1a0065ae:	2a01      	cmp	r2, #1
1a0065b0:	dd01      	ble.n	1a0065b6 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a0065b2:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0065b6:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0065ba:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a0065bc:	f023 0210 	bic.w	r2, r3, #16
1a0065c0:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a0065c2:	f013 0f10 	tst.w	r3, #16
1a0065c6:	d018      	beq.n	1a0065fa <handleMasterXferState+0x10e>
1a0065c8:	7d0b      	ldrb	r3, [r1, #20]
1a0065ca:	2b02      	cmp	r3, #2
1a0065cc:	d015      	beq.n	1a0065fa <handleMasterXferState+0x10e>
	return 1;
1a0065ce:	2001      	movs	r0, #1
1a0065d0:	e017      	b.n	1a006602 <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a0065d2:	233c      	movs	r3, #60	; 0x3c
1a0065d4:	e7ea      	b.n	1a0065ac <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a0065d6:	2305      	movs	r3, #5
1a0065d8:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0065da:	232c      	movs	r3, #44	; 0x2c
		break;
1a0065dc:	e7eb      	b.n	1a0065b6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a0065de:	2301      	movs	r3, #1
1a0065e0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0065e2:	232c      	movs	r3, #44	; 0x2c
		break;
1a0065e4:	e7e7      	b.n	1a0065b6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a0065e6:	2302      	movs	r3, #2
1a0065e8:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a0065ea:	233c      	movs	r3, #60	; 0x3c
		break;
1a0065ec:	e7e3      	b.n	1a0065b6 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a0065ee:	2303      	movs	r3, #3
1a0065f0:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a0065f2:	232c      	movs	r3, #44	; 0x2c
1a0065f4:	e7df      	b.n	1a0065b6 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a0065f6:	233c      	movs	r3, #60	; 0x3c
1a0065f8:	e7dd      	b.n	1a0065b6 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a0065fa:	7d0b      	ldrb	r3, [r1, #20]
1a0065fc:	2b04      	cmp	r3, #4
1a0065fe:	d002      	beq.n	1a006606 <handleMasterXferState+0x11a>
		return 0;
1a006600:	2000      	movs	r0, #0
}
1a006602:	bc30      	pop	{r4, r5}
1a006604:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a006606:	2000      	movs	r0, #0
1a006608:	7508      	strb	r0, [r1, #20]
1a00660a:	e7fa      	b.n	1a006602 <handleMasterXferState+0x116>

1a00660c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a00660c:	b570      	push	{r4, r5, r6, lr}
1a00660e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a006610:	4e06      	ldr	r6, [pc, #24]	; (1a00662c <Chip_I2C_Init+0x20>)
1a006612:	00c4      	lsls	r4, r0, #3
1a006614:	1a22      	subs	r2, r4, r0
1a006616:	0093      	lsls	r3, r2, #2
1a006618:	4433      	add	r3, r6
1a00661a:	8898      	ldrh	r0, [r3, #4]
1a00661c:	f7ff fd3e 	bl	1a00609c <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a006620:	1b64      	subs	r4, r4, r5
1a006622:	00a3      	lsls	r3, r4, #2
1a006624:	58f3      	ldr	r3, [r6, r3]
1a006626:	226c      	movs	r2, #108	; 0x6c
1a006628:	619a      	str	r2, [r3, #24]
}
1a00662a:	bd70      	pop	{r4, r5, r6, pc}
1a00662c:	1000001c 	.word	0x1000001c

1a006630 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a006630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006634:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a006636:	4e0b      	ldr	r6, [pc, #44]	; (1a006664 <Chip_I2C_SetClockRate+0x34>)
1a006638:	00c5      	lsls	r5, r0, #3
1a00663a:	1a2b      	subs	r3, r5, r0
1a00663c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a006640:	eb06 0308 	add.w	r3, r6, r8
1a006644:	8898      	ldrh	r0, [r3, #4]
1a006646:	f7ff fd4f 	bl	1a0060e8 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a00664a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a00664e:	f856 3008 	ldr.w	r3, [r6, r8]
1a006652:	0842      	lsrs	r2, r0, #1
1a006654:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a006656:	f856 3008 	ldr.w	r3, [r6, r8]
1a00665a:	691a      	ldr	r2, [r3, #16]
1a00665c:	1a80      	subs	r0, r0, r2
1a00665e:	6158      	str	r0, [r3, #20]
}
1a006660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006664:	1000001c 	.word	0x1000001c

1a006668 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a006668:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a00666c:	009a      	lsls	r2, r3, #2
1a00666e:	4b09      	ldr	r3, [pc, #36]	; (1a006694 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a006670:	4413      	add	r3, r2
1a006672:	691b      	ldr	r3, [r3, #16]
1a006674:	b153      	cbz	r3, 1a00668c <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a006676:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a00667a:	0082      	lsls	r2, r0, #2
1a00667c:	4b05      	ldr	r3, [pc, #20]	; (1a006694 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00667e:	4413      	add	r3, r2
1a006680:	6898      	ldr	r0, [r3, #8]
}
1a006682:	4288      	cmp	r0, r1
1a006684:	bf14      	ite	ne
1a006686:	2000      	movne	r0, #0
1a006688:	2001      	moveq	r0, #1
1a00668a:	4770      	bx	lr
		iic->mEvent = event;
1a00668c:	4b01      	ldr	r3, [pc, #4]	; (1a006694 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a00668e:	4413      	add	r3, r2
1a006690:	6099      	str	r1, [r3, #8]
1a006692:	e7f0      	b.n	1a006676 <Chip_I2C_SetMasterEventHandler+0xe>
1a006694:	1000001c 	.word	0x1000001c

1a006698 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a006698:	b510      	push	{r4, lr}
1a00669a:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a00669c:	4809      	ldr	r0, [pc, #36]	; (1a0066c4 <Chip_I2C_MasterStateHandler+0x2c>)
1a00669e:	00e3      	lsls	r3, r4, #3
1a0066a0:	1b1b      	subs	r3, r3, r4
1a0066a2:	009a      	lsls	r2, r3, #2
1a0066a4:	1883      	adds	r3, r0, r2
1a0066a6:	6919      	ldr	r1, [r3, #16]
1a0066a8:	5880      	ldr	r0, [r0, r2]
1a0066aa:	f7ff ff1f 	bl	1a0064ec <handleMasterXferState>
1a0066ae:	b940      	cbnz	r0, 1a0066c2 <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a0066b0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a0066b4:	009a      	lsls	r2, r3, #2
1a0066b6:	4b03      	ldr	r3, [pc, #12]	; (1a0066c4 <Chip_I2C_MasterStateHandler+0x2c>)
1a0066b8:	4413      	add	r3, r2
1a0066ba:	689b      	ldr	r3, [r3, #8]
1a0066bc:	2102      	movs	r1, #2
1a0066be:	4620      	mov	r0, r4
1a0066c0:	4798      	blx	r3
	}
}
1a0066c2:	bd10      	pop	{r4, pc}
1a0066c4:	1000001c 	.word	0x1000001c

1a0066c8 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a0066c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0066cc:	0083      	lsls	r3, r0, #2
1a0066ce:	4a03      	ldr	r2, [pc, #12]	; (1a0066dc <Chip_I2C_IsStateChanged+0x14>)
1a0066d0:	58d3      	ldr	r3, [r2, r3]
1a0066d2:	6818      	ldr	r0, [r3, #0]
}
1a0066d4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a0066d8:	4770      	bx	lr
1a0066da:	bf00      	nop
1a0066dc:	1000001c 	.word	0x1000001c

1a0066e0 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a0066e0:	2901      	cmp	r1, #1
1a0066e2:	d000      	beq.n	1a0066e6 <Chip_I2C_EventHandlerPolling+0x6>
1a0066e4:	4770      	bx	lr
{
1a0066e6:	b538      	push	{r3, r4, r5, lr}
1a0066e8:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a0066ea:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a0066ee:	009a      	lsls	r2, r3, #2
1a0066f0:	4b08      	ldr	r3, [pc, #32]	; (1a006714 <Chip_I2C_EventHandlerPolling+0x34>)
1a0066f2:	4413      	add	r3, r2
1a0066f4:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a0066f6:	7d2b      	ldrb	r3, [r5, #20]
1a0066f8:	b2db      	uxtb	r3, r3
1a0066fa:	2b04      	cmp	r3, #4
1a0066fc:	d108      	bne.n	1a006710 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a0066fe:	4620      	mov	r0, r4
1a006700:	f7ff ffe2 	bl	1a0066c8 <Chip_I2C_IsStateChanged>
1a006704:	2800      	cmp	r0, #0
1a006706:	d0f6      	beq.n	1a0066f6 <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a006708:	4620      	mov	r0, r4
1a00670a:	f7ff ffc5 	bl	1a006698 <Chip_I2C_MasterStateHandler>
1a00670e:	e7f2      	b.n	1a0066f6 <Chip_I2C_EventHandlerPolling+0x16>
}
1a006710:	bd38      	pop	{r3, r4, r5, pc}
1a006712:	bf00      	nop
1a006714:	1000001c 	.word	0x1000001c

1a006718 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a006718:	680b      	ldr	r3, [r1, #0]
1a00671a:	b133      	cbz	r3, 1a00672a <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a00671c:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a00671e:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a006720:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a006722:	684b      	ldr	r3, [r1, #4]
1a006724:	3302      	adds	r3, #2
1a006726:	604b      	str	r3, [r1, #4]
}
1a006728:	4770      	bx	lr
1a00672a:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a00672e:	6083      	str	r3, [r0, #8]
1a006730:	e7f7      	b.n	1a006722 <SSP_Write2BFifo+0xa>

1a006732 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a006732:	680b      	ldr	r3, [r1, #0]
1a006734:	b133      	cbz	r3, 1a006744 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a006736:	684a      	ldr	r2, [r1, #4]
1a006738:	5c9b      	ldrb	r3, [r3, r2]
1a00673a:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a00673c:	684b      	ldr	r3, [r1, #4]
1a00673e:	3301      	adds	r3, #1
1a006740:	604b      	str	r3, [r1, #4]
}
1a006742:	4770      	bx	lr
1a006744:	23ff      	movs	r3, #255	; 0xff
1a006746:	6083      	str	r3, [r0, #8]
1a006748:	e7f8      	b.n	1a00673c <SSP_Write1BFifo+0xa>

1a00674a <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a00674a:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00674c:	f013 0f04 	tst.w	r3, #4
1a006750:	d01b      	beq.n	1a00678a <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006752:	68ca      	ldr	r2, [r1, #12]
1a006754:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006756:	429a      	cmp	r2, r3
1a006758:	d216      	bcs.n	1a006788 <SSP_Read2BFifo+0x3e>
{
1a00675a:	b410      	push	{r4}
1a00675c:	e00a      	b.n	1a006774 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a00675e:	68cb      	ldr	r3, [r1, #12]
1a006760:	3302      	adds	r3, #2
1a006762:	60cb      	str	r3, [r1, #12]
1a006764:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006766:	f013 0f04 	tst.w	r3, #4
1a00676a:	d00a      	beq.n	1a006782 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a00676c:	68ca      	ldr	r2, [r1, #12]
1a00676e:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006770:	429a      	cmp	r2, r3
1a006772:	d206      	bcs.n	1a006782 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a006774:	6883      	ldr	r3, [r0, #8]
1a006776:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a006778:	688c      	ldr	r4, [r1, #8]
1a00677a:	2c00      	cmp	r4, #0
1a00677c:	d0ef      	beq.n	1a00675e <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a00677e:	52a3      	strh	r3, [r4, r2]
1a006780:	e7ed      	b.n	1a00675e <SSP_Read2BFifo+0x14>
	}
}
1a006782:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006786:	4770      	bx	lr
1a006788:	4770      	bx	lr
1a00678a:	4770      	bx	lr

1a00678c <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a00678c:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00678e:	f013 0f04 	tst.w	r3, #4
1a006792:	d01a      	beq.n	1a0067ca <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a006794:	68cb      	ldr	r3, [r1, #12]
1a006796:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a006798:	4293      	cmp	r3, r2
1a00679a:	d215      	bcs.n	1a0067c8 <SSP_Read1BFifo+0x3c>
{
1a00679c:	b410      	push	{r4}
1a00679e:	e00a      	b.n	1a0067b6 <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a0067a0:	68cb      	ldr	r3, [r1, #12]
1a0067a2:	3301      	adds	r3, #1
1a0067a4:	60cb      	str	r3, [r1, #12]
1a0067a6:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0067a8:	f013 0f04 	tst.w	r3, #4
1a0067ac:	d009      	beq.n	1a0067c2 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0067ae:	68cb      	ldr	r3, [r1, #12]
1a0067b0:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0067b2:	4293      	cmp	r3, r2
1a0067b4:	d205      	bcs.n	1a0067c2 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0067b6:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a0067b8:	688a      	ldr	r2, [r1, #8]
1a0067ba:	2a00      	cmp	r2, #0
1a0067bc:	d0f0      	beq.n	1a0067a0 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0067be:	54d4      	strb	r4, [r2, r3]
1a0067c0:	e7ee      	b.n	1a0067a0 <SSP_Read1BFifo+0x14>
	}
}
1a0067c2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0067c6:	4770      	bx	lr
1a0067c8:	4770      	bx	lr
1a0067ca:	4770      	bx	lr

1a0067cc <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0067cc:	4b03      	ldr	r3, [pc, #12]	; (1a0067dc <Chip_SSP_GetClockIndex+0x10>)
1a0067ce:	4298      	cmp	r0, r3
1a0067d0:	d001      	beq.n	1a0067d6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0067d2:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0067d4:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a0067d6:	20a5      	movs	r0, #165	; 0xa5
1a0067d8:	4770      	bx	lr
1a0067da:	bf00      	nop
1a0067dc:	400c5000 	.word	0x400c5000

1a0067e0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0067e0:	4b04      	ldr	r3, [pc, #16]	; (1a0067f4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0067e2:	4298      	cmp	r0, r3
1a0067e4:	d002      	beq.n	1a0067ec <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0067e6:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0067ea:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a0067ec:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0067f0:	4770      	bx	lr
1a0067f2:	bf00      	nop
1a0067f4:	400c5000 	.word	0x400c5000

1a0067f8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0067f8:	6803      	ldr	r3, [r0, #0]
1a0067fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0067fe:	0209      	lsls	r1, r1, #8
1a006800:	b289      	uxth	r1, r1
1a006802:	4319      	orrs	r1, r3
1a006804:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a006806:	6102      	str	r2, [r0, #16]
}
1a006808:	4770      	bx	lr

1a00680a <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a00680a:	b538      	push	{r3, r4, r5, lr}
1a00680c:	4604      	mov	r4, r0
1a00680e:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a006810:	e000      	b.n	1a006814 <Chip_SSP_RWFrames_Blocking+0xa>
1a006812:	68a3      	ldr	r3, [r4, #8]
	return (pSSP->SR & Stat) ? SET : RESET;
1a006814:	68e3      	ldr	r3, [r4, #12]
1a006816:	f013 0f04 	tst.w	r3, #4
1a00681a:	d1fa      	bne.n	1a006812 <Chip_SSP_RWFrames_Blocking+0x8>
	pSSP->ICR = IntClear;
1a00681c:	2303      	movs	r3, #3
1a00681e:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a006820:	6823      	ldr	r3, [r4, #0]
1a006822:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a006826:	2b07      	cmp	r3, #7
1a006828:	d808      	bhi.n	1a00683c <Chip_SSP_RWFrames_Blocking+0x32>
1a00682a:	e022      	b.n	1a006872 <Chip_SSP_RWFrames_Blocking+0x68>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00682c:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a00682e:	f013 0f01 	tst.w	r3, #1
1a006832:	d139      	bne.n	1a0068a8 <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a006834:	4629      	mov	r1, r5
1a006836:	4620      	mov	r0, r4
1a006838:	f7ff ff87 	bl	1a00674a <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a00683c:	68ea      	ldr	r2, [r5, #12]
1a00683e:	692b      	ldr	r3, [r5, #16]
1a006840:	429a      	cmp	r2, r3
1a006842:	d302      	bcc.n	1a00684a <Chip_SSP_RWFrames_Blocking+0x40>
1a006844:	686a      	ldr	r2, [r5, #4]
1a006846:	4293      	cmp	r3, r2
1a006848:	d926      	bls.n	1a006898 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a00684a:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00684c:	f012 0f02 	tst.w	r2, #2
1a006850:	d0ec      	beq.n	1a00682c <Chip_SSP_RWFrames_Blocking+0x22>
1a006852:	686a      	ldr	r2, [r5, #4]
1a006854:	429a      	cmp	r2, r3
1a006856:	d2e9      	bcs.n	1a00682c <Chip_SSP_RWFrames_Blocking+0x22>
				SSP_Write2BFifo(pSSP, xf_setup);
1a006858:	4629      	mov	r1, r5
1a00685a:	4620      	mov	r0, r4
1a00685c:	f7ff ff5c 	bl	1a006718 <SSP_Write2BFifo>
1a006860:	e7e4      	b.n	1a00682c <Chip_SSP_RWFrames_Blocking+0x22>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a006862:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a006864:	f013 0f01 	tst.w	r3, #1
1a006868:	d120      	bne.n	1a0068ac <Chip_SSP_RWFrames_Blocking+0xa2>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a00686a:	4629      	mov	r1, r5
1a00686c:	4620      	mov	r0, r4
1a00686e:	f7ff ff8d 	bl	1a00678c <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a006872:	68ea      	ldr	r2, [r5, #12]
1a006874:	692b      	ldr	r3, [r5, #16]
1a006876:	429a      	cmp	r2, r3
1a006878:	d302      	bcc.n	1a006880 <Chip_SSP_RWFrames_Blocking+0x76>
1a00687a:	686a      	ldr	r2, [r5, #4]
1a00687c:	4293      	cmp	r3, r2
1a00687e:	d90b      	bls.n	1a006898 <Chip_SSP_RWFrames_Blocking+0x8e>
	return (pSSP->SR & Stat) ? SET : RESET;
1a006880:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a006882:	f012 0f02 	tst.w	r2, #2
1a006886:	d0ec      	beq.n	1a006862 <Chip_SSP_RWFrames_Blocking+0x58>
1a006888:	686a      	ldr	r2, [r5, #4]
1a00688a:	429a      	cmp	r2, r3
1a00688c:	d2e9      	bcs.n	1a006862 <Chip_SSP_RWFrames_Blocking+0x58>
				SSP_Write1BFifo(pSSP, xf_setup);
1a00688e:	4629      	mov	r1, r5
1a006890:	4620      	mov	r0, r4
1a006892:	f7ff ff4e 	bl	1a006732 <SSP_Write1BFifo>
1a006896:	e7e4      	b.n	1a006862 <Chip_SSP_RWFrames_Blocking+0x58>
		}
	}
	if (xf_setup->tx_data) {
1a006898:	682b      	ldr	r3, [r5, #0]
1a00689a:	b10b      	cbz	r3, 1a0068a0 <Chip_SSP_RWFrames_Blocking+0x96>
		return xf_setup->tx_cnt;
1a00689c:	6868      	ldr	r0, [r5, #4]
1a00689e:	e004      	b.n	1a0068aa <Chip_SSP_RWFrames_Blocking+0xa0>
	}
	else if (xf_setup->rx_data) {
1a0068a0:	68ab      	ldr	r3, [r5, #8]
1a0068a2:	b12b      	cbz	r3, 1a0068b0 <Chip_SSP_RWFrames_Blocking+0xa6>
		return xf_setup->rx_cnt;
1a0068a4:	68e8      	ldr	r0, [r5, #12]
1a0068a6:	e000      	b.n	1a0068aa <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
1a0068a8:	2000      	movs	r0, #0
	}

	return 0;
}
1a0068aa:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a0068ac:	2000      	movs	r0, #0
1a0068ae:	e7fc      	b.n	1a0068aa <Chip_SSP_RWFrames_Blocking+0xa0>
	return 0;
1a0068b0:	2000      	movs	r0, #0
1a0068b2:	e7fa      	b.n	1a0068aa <Chip_SSP_RWFrames_Blocking+0xa0>

1a0068b4 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0068b4:	b570      	push	{r4, r5, r6, lr}
1a0068b6:	4606      	mov	r6, r0
1a0068b8:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0068ba:	f7ff ff91 	bl	1a0067e0 <Chip_SSP_GetPeriphClockIndex>
1a0068be:	f7ff fc13 	bl	1a0060e8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0068c2:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0068c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0068c8:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0068ca:	e000      	b.n	1a0068ce <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0068cc:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a0068ce:	42ab      	cmp	r3, r5
1a0068d0:	d90b      	bls.n	1a0068ea <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0068d2:	1c4c      	adds	r4, r1, #1
1a0068d4:	fb02 f304 	mul.w	r3, r2, r4
1a0068d8:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0068dc:	429d      	cmp	r5, r3
1a0068de:	d2f6      	bcs.n	1a0068ce <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0068e0:	2cff      	cmp	r4, #255	; 0xff
1a0068e2:	d9f3      	bls.n	1a0068cc <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0068e4:	3202      	adds	r2, #2
				cr0_div = 0;
1a0068e6:	2100      	movs	r1, #0
1a0068e8:	e7f1      	b.n	1a0068ce <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0068ea:	4630      	mov	r0, r6
1a0068ec:	f7ff ff84 	bl	1a0067f8 <Chip_SSP_SetClockRate>
}
1a0068f0:	bd70      	pop	{r4, r5, r6, pc}
1a0068f2:	Address 0x000000001a0068f2 is out of bounds.


1a0068f4 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0068f4:	b510      	push	{r4, lr}
1a0068f6:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0068f8:	f7ff ff68 	bl	1a0067cc <Chip_SSP_GetClockIndex>
1a0068fc:	f7ff fbce 	bl	1a00609c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a006900:	4620      	mov	r0, r4
1a006902:	f7ff ff6d 	bl	1a0067e0 <Chip_SSP_GetPeriphClockIndex>
1a006906:	f7ff fbc9 	bl	1a00609c <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00690a:	6863      	ldr	r3, [r4, #4]
1a00690c:	f023 0304 	bic.w	r3, r3, #4
1a006910:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a006912:	6823      	ldr	r3, [r4, #0]
1a006914:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a006918:	f043 0307 	orr.w	r3, r3, #7
1a00691c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00691e:	4902      	ldr	r1, [pc, #8]	; (1a006928 <Chip_SSP_Init+0x34>)
1a006920:	4620      	mov	r0, r4
1a006922:	f7ff ffc7 	bl	1a0068b4 <Chip_SSP_SetBitRate>
}
1a006926:	bd10      	pop	{r4, pc}
1a006928:	000186a0 	.word	0x000186a0

1a00692c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00692c:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00692e:	4a0b      	ldr	r2, [pc, #44]	; (1a00695c <SystemInit+0x30>)
1a006930:	4b0b      	ldr	r3, [pc, #44]	; (1a006960 <SystemInit+0x34>)
1a006932:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a006934:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a006938:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00693a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00693e:	2b20      	cmp	r3, #32
1a006940:	d004      	beq.n	1a00694c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a006942:	f7fe ffe5 	bl	1a005910 <Board_SystemInit>
   Board_Init();
1a006946:	f7fe ff6d 	bl	1a005824 <Board_Init>
}
1a00694a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00694c:	4a04      	ldr	r2, [pc, #16]	; (1a006960 <SystemInit+0x34>)
1a00694e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a006952:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a006956:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00695a:	e7f2      	b.n	1a006942 <SystemInit+0x16>
1a00695c:	1a000000 	.word	0x1a000000
1a006960:	e000ed00 	.word	0xe000ed00

1a006964 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a006964:	4b04      	ldr	r3, [pc, #16]	; (1a006978 <cyclesCounterInit+0x14>)
1a006966:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a006968:	4a04      	ldr	r2, [pc, #16]	; (1a00697c <cyclesCounterInit+0x18>)
1a00696a:	6813      	ldr	r3, [r2, #0]
1a00696c:	f043 0301 	orr.w	r3, r3, #1
1a006970:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a006972:	2001      	movs	r0, #1
1a006974:	4770      	bx	lr
1a006976:	bf00      	nop
1a006978:	10000054 	.word	0x10000054
1a00697c:	e0001000 	.word	0xe0001000

1a006980 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a006980:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a006984:	0083      	lsls	r3, r0, #2
1a006986:	4a03      	ldr	r2, [pc, #12]	; (1a006994 <uartRxReady+0x14>)
1a006988:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a00698a:	6958      	ldr	r0, [r3, #20]
}
1a00698c:	f000 0001 	and.w	r0, r0, #1
1a006990:	4770      	bx	lr
1a006992:	bf00      	nop
1a006994:	1a009e40 	.word	0x1a009e40

1a006998 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a006998:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00699c:	0083      	lsls	r3, r0, #2
1a00699e:	4a03      	ldr	r2, [pc, #12]	; (1a0069ac <uartTxReady+0x14>)
1a0069a0:	58d3      	ldr	r3, [r2, r3]
1a0069a2:	6958      	ldr	r0, [r3, #20]
}
1a0069a4:	f000 0020 	and.w	r0, r0, #32
1a0069a8:	4770      	bx	lr
1a0069aa:	bf00      	nop
1a0069ac:	1a009e40 	.word	0x1a009e40

1a0069b0 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a0069b0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0069b4:	0083      	lsls	r3, r0, #2
1a0069b6:	4a02      	ldr	r2, [pc, #8]	; (1a0069c0 <uartRxRead+0x10>)
1a0069b8:	58d3      	ldr	r3, [r2, r3]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0069ba:	6818      	ldr	r0, [r3, #0]
}
1a0069bc:	b2c0      	uxtb	r0, r0
1a0069be:	4770      	bx	lr
1a0069c0:	1a009e40 	.word	0x1a009e40

1a0069c4 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0069c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0069c8:	0083      	lsls	r3, r0, #2
1a0069ca:	4a02      	ldr	r2, [pc, #8]	; (1a0069d4 <uartTxWrite+0x10>)
1a0069cc:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a0069ce:	6019      	str	r1, [r3, #0]
}
1a0069d0:	4770      	bx	lr
1a0069d2:	bf00      	nop
1a0069d4:	1a009e40 	.word	0x1a009e40

1a0069d8 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a0069d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0069dc:	4680      	mov	r8, r0
1a0069de:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a0069e0:	4c19      	ldr	r4, [pc, #100]	; (1a006a48 <uartInit+0x70>)
1a0069e2:	0045      	lsls	r5, r0, #1
1a0069e4:	182a      	adds	r2, r5, r0
1a0069e6:	0093      	lsls	r3, r2, #2
1a0069e8:	18e6      	adds	r6, r4, r3
1a0069ea:	58e7      	ldr	r7, [r4, r3]
1a0069ec:	4638      	mov	r0, r7
1a0069ee:	f7fe ffab 	bl	1a005948 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0069f2:	4649      	mov	r1, r9
1a0069f4:	4638      	mov	r0, r7
1a0069f6:	f7fe ffd1 	bl	1a00599c <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a0069fa:	2307      	movs	r3, #7
1a0069fc:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0069fe:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a006a00:	2301      	movs	r3, #1
1a006a02:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a006a04:	7930      	ldrb	r0, [r6, #4]
1a006a06:	7973      	ldrb	r3, [r6, #5]
1a006a08:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a006a0a:	f042 0218 	orr.w	r2, r2, #24
1a006a0e:	490f      	ldr	r1, [pc, #60]	; (1a006a4c <uartInit+0x74>)
1a006a10:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a006a18:	79f0      	ldrb	r0, [r6, #7]
1a006a1a:	7a33      	ldrb	r3, [r6, #8]
1a006a1c:	7a72      	ldrb	r2, [r6, #9]
1a006a1e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006a22:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a006a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a006a2a:	f1b8 0f01 	cmp.w	r8, #1
1a006a2e:	d001      	beq.n	1a006a34 <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a006a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a006a34:	4a06      	ldr	r2, [pc, #24]	; (1a006a50 <uartInit+0x78>)
1a006a36:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a006a38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a006a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
1a006a3e:	221a      	movs	r2, #26
1a006a40:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a006a44:	e7f4      	b.n	1a006a30 <uartInit+0x58>
1a006a46:	bf00      	nop
1a006a48:	1a009e40 	.word	0x1a009e40
1a006a4c:	40086000 	.word	0x40086000
1a006a50:	40081000 	.word	0x40081000

1a006a54 <uartReadByte>:

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a006a54:	b538      	push	{r3, r4, r5, lr}
1a006a56:	4605      	mov	r5, r0
1a006a58:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a006a5a:	f7ff ff91 	bl	1a006980 <uartRxReady>
1a006a5e:	4603      	mov	r3, r0
1a006a60:	b908      	cbnz	r0, 1a006a66 <uartReadByte+0x12>
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
   }
   return retVal;
}
1a006a62:	4618      	mov	r0, r3
1a006a64:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a006a66:	4628      	mov	r0, r5
1a006a68:	f7ff ffa2 	bl	1a0069b0 <uartRxRead>
1a006a6c:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a006a6e:	2301      	movs	r3, #1
1a006a70:	e7f7      	b.n	1a006a62 <uartReadByte+0xe>

1a006a72 <uartWriteByte>:

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a006a72:	b538      	push	{r3, r4, r5, lr}
1a006a74:	4604      	mov	r4, r0
1a006a76:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a006a78:	4620      	mov	r0, r4
1a006a7a:	f7ff ff8d 	bl	1a006998 <uartTxReady>
1a006a7e:	2800      	cmp	r0, #0
1a006a80:	d0fa      	beq.n	1a006a78 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a006a82:	4629      	mov	r1, r5
1a006a84:	4620      	mov	r0, r4
1a006a86:	f7ff ff9d 	bl	1a0069c4 <uartTxWrite>
}
1a006a8a:	bd38      	pop	{r3, r4, r5, pc}

1a006a8c <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a006a8c:	b108      	cbz	r0, 1a006a92 <spiInit+0x6>
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a006a8e:	2000      	movs	r0, #0
   }

   return retVal;
}
1a006a90:	4770      	bx	lr
{
1a006a92:	b510      	push	{r4, lr}
1a006a94:	4b0e      	ldr	r3, [pc, #56]	; (1a006ad0 <spiInit+0x44>)
1a006a96:	2200      	movs	r2, #0
1a006a98:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a006a9c:	21c5      	movs	r1, #197	; 0xc5
1a006a9e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a006aa2:	2105      	movs	r1, #5
1a006aa4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a006aa8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a006aac:	4909      	ldr	r1, [pc, #36]	; (1a006ad4 <spiInit+0x48>)
1a006aae:	f242 020c 	movw	r2, #8204	; 0x200c
1a006ab2:	588b      	ldr	r3, [r1, r2]
1a006ab4:	f043 0301 	orr.w	r3, r3, #1
1a006ab8:	508b      	str	r3, [r1, r2]
      Chip_SSP_Init( LPC_SSP1 );
1a006aba:	4c07      	ldr	r4, [pc, #28]	; (1a006ad8 <spiInit+0x4c>)
1a006abc:	4620      	mov	r0, r4
1a006abe:	f7ff ff19 	bl	1a0068f4 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a006ac2:	6863      	ldr	r3, [r4, #4]
1a006ac4:	f043 0302 	orr.w	r3, r3, #2
1a006ac8:	6063      	str	r3, [r4, #4]
   bool_t retVal = TRUE;
1a006aca:	2001      	movs	r0, #1
}
1a006acc:	bd10      	pop	{r4, pc}
1a006ace:	bf00      	nop
1a006ad0:	40086000 	.word	0x40086000
1a006ad4:	400f4000 	.word	0x400f4000
1a006ad8:	400c5000 	.word	0x400c5000

1a006adc <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a006adc:	b510      	push	{r4, lr}
1a006ade:	b088      	sub	sp, #32
1a006ae0:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a006ae2:	4669      	mov	r1, sp
1a006ae4:	4809      	ldr	r0, [pc, #36]	; (1a006b0c <rtcRead+0x30>)
1a006ae6:	f7ff fbfa 	bl	1a0062de <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a006aea:	9b00      	ldr	r3, [sp, #0]
1a006aec:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a006aee:	9b01      	ldr	r3, [sp, #4]
1a006af0:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a006af2:	9b02      	ldr	r3, [sp, #8]
1a006af4:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a006af6:	9b04      	ldr	r3, [sp, #16]
1a006af8:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a006afa:	9b03      	ldr	r3, [sp, #12]
1a006afc:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a006afe:	9b06      	ldr	r3, [sp, #24]
1a006b00:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a006b02:	9b07      	ldr	r3, [sp, #28]
1a006b04:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a006b06:	2001      	movs	r0, #1
1a006b08:	b008      	add	sp, #32
1a006b0a:	bd10      	pop	{r4, pc}
1a006b0c:	40046000 	.word	0x40046000

1a006b10 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a006b10:	b500      	push	{lr}
1a006b12:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a006b14:	79c3      	ldrb	r3, [r0, #7]
1a006b16:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a006b18:	7983      	ldrb	r3, [r0, #6]
1a006b1a:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a006b1c:	7943      	ldrb	r3, [r0, #5]
1a006b1e:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a006b20:	78c3      	ldrb	r3, [r0, #3]
1a006b22:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a006b24:	7883      	ldrb	r3, [r0, #2]
1a006b26:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a006b28:	8803      	ldrh	r3, [r0, #0]
1a006b2a:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a006b2c:	4669      	mov	r1, sp
1a006b2e:	4803      	ldr	r0, [pc, #12]	; (1a006b3c <rtcWrite+0x2c>)
1a006b30:	f7ff fbbe 	bl	1a0062b0 <Chip_RTC_SetFullTime>

   return ret_val;
}
1a006b34:	2001      	movs	r0, #1
1a006b36:	b009      	add	sp, #36	; 0x24
1a006b38:	f85d fb04 	ldr.w	pc, [sp], #4
1a006b3c:	40046000 	.word	0x40046000

1a006b40 <rtcInit>:
{
1a006b40:	b538      	push	{r3, r4, r5, lr}
   if( init ) {
1a006b42:	4b0a      	ldr	r3, [pc, #40]	; (1a006b6c <rtcInit+0x2c>)
1a006b44:	781b      	ldrb	r3, [r3, #0]
1a006b46:	b10b      	cbz	r3, 1a006b4c <rtcInit+0xc>
      ret_val = 0;
1a006b48:	2000      	movs	r0, #0
}
1a006b4a:	bd38      	pop	{r3, r4, r5, pc}
1a006b4c:	4604      	mov	r4, r0
      Chip_RTC_Init(LPC_RTC);
1a006b4e:	4d08      	ldr	r5, [pc, #32]	; (1a006b70 <rtcInit+0x30>)
1a006b50:	4628      	mov	r0, r5
1a006b52:	f7ff fbeb 	bl	1a00632c <Chip_RTC_Init>
      rtcWrite( rtc );
1a006b56:	4620      	mov	r0, r4
1a006b58:	f7ff ffda 	bl	1a006b10 <rtcWrite>
      Chip_RTC_Enable(LPC_RTC, ENABLE);
1a006b5c:	2101      	movs	r1, #1
1a006b5e:	4628      	mov	r0, r5
1a006b60:	f7ff fb9a 	bl	1a006298 <Chip_RTC_Enable>
      init = 1;
1a006b64:	2001      	movs	r0, #1
1a006b66:	4b01      	ldr	r3, [pc, #4]	; (1a006b6c <rtcInit+0x2c>)
1a006b68:	7018      	strb	r0, [r3, #0]
1a006b6a:	e7ee      	b.n	1a006b4a <rtcInit+0xa>
1a006b6c:	1000344c 	.word	0x1000344c
1a006b70:	40046000 	.word	0x40046000

1a006b74 <tickerCallback>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a006b74:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a006b78:	4908      	ldr	r1, [pc, #32]	; (1a006b9c <tickerCallback+0x28>)
1a006b7a:	e9d1 2300 	ldrd	r2, r3, [r1]
1a006b7e:	f112 0b01 	adds.w	fp, r2, #1
1a006b82:	f143 0c00 	adc.w	ip, r3, #0
1a006b86:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a006b8a:	4b05      	ldr	r3, [pc, #20]	; (1a006ba0 <tickerCallback+0x2c>)
1a006b8c:	681b      	ldr	r3, [r3, #0]
1a006b8e:	b113      	cbz	r3, 1a006b96 <tickerCallback+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a006b90:	4a04      	ldr	r2, [pc, #16]	; (1a006ba4 <tickerCallback+0x30>)
1a006b92:	6810      	ldr	r0, [r2, #0]
1a006b94:	4798      	blx	r3
   }
}
1a006b96:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a006b9a:	bf00      	nop
1a006b9c:	10003458 	.word	0x10003458
1a006ba0:	10003460 	.word	0x10003460
1a006ba4:	10003450 	.word	0x10003450

1a006ba8 <tickInit>:
{
1a006ba8:	b510      	push	{r4, lr}
1a006baa:	b082      	sub	sp, #8
         TimerHandle_t h = xTimerCreateStatic( "tikcerTimer",
1a006bac:	4b0e      	ldr	r3, [pc, #56]	; (1a006be8 <tickInit+0x40>)
1a006bae:	9301      	str	r3, [sp, #4]
1a006bb0:	4b0e      	ldr	r3, [pc, #56]	; (1a006bec <tickInit+0x44>)
1a006bb2:	9300      	str	r3, [sp, #0]
1a006bb4:	2300      	movs	r3, #0
1a006bb6:	2201      	movs	r2, #1
1a006bb8:	4601      	mov	r1, r0
1a006bba:	480d      	ldr	r0, [pc, #52]	; (1a006bf0 <tickInit+0x48>)
1a006bbc:	f7fd fd48 	bl	1a004650 <xTimerCreateStatic>
         if (h == NULL)
1a006bc0:	b178      	cbz	r0, 1a006be2 <tickInit+0x3a>
1a006bc2:	4604      	mov	r4, r0
         return xTimerStart(h, 0) == pdPASS;
1a006bc4:	f7fd f990 	bl	1a003ee8 <xTaskGetTickCount>
1a006bc8:	2300      	movs	r3, #0
1a006bca:	9300      	str	r3, [sp, #0]
1a006bcc:	4602      	mov	r2, r0
1a006bce:	2101      	movs	r1, #1
1a006bd0:	4620      	mov	r0, r4
1a006bd2:	f7fd fd63 	bl	1a00469c <xTimerGenericCommand>
1a006bd6:	2801      	cmp	r0, #1
1a006bd8:	bf14      	ite	ne
1a006bda:	2000      	movne	r0, #0
1a006bdc:	2001      	moveq	r0, #1
}
1a006bde:	b002      	add	sp, #8
1a006be0:	bd10      	pop	{r4, pc}
            return 0;
1a006be2:	2000      	movs	r0, #0
1a006be4:	e7fb      	b.n	1a006bde <tickInit+0x36>
1a006be6:	bf00      	nop
1a006be8:	10003464 	.word	0x10003464
1a006bec:	1a006b75 	.word	0x1a006b75
1a006bf0:	1a009e88 	.word	0x1a009e88

1a006bf4 <tickRead>:
}
1a006bf4:	4b01      	ldr	r3, [pc, #4]	; (1a006bfc <tickRead+0x8>)
1a006bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
1a006bfa:	4770      	bx	lr
1a006bfc:	10003458 	.word	0x10003458

1a006c00 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a006c00:	b538      	push	{r3, r4, r5, lr}
1a006c02:	4604      	mov	r4, r0
1a006c04:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a006c06:	4b08      	ldr	r3, [pc, #32]	; (1a006c28 <i2cHardwareInit+0x28>)
1a006c08:	f640 0208 	movw	r2, #2056	; 0x808
1a006c0c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a006c10:	f7ff fcfc 	bl	1a00660c <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a006c14:	4629      	mov	r1, r5
1a006c16:	4620      	mov	r0, r4
1a006c18:	f7ff fd0a 	bl	1a006630 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a006c1c:	4903      	ldr	r1, [pc, #12]	; (1a006c2c <i2cHardwareInit+0x2c>)
1a006c1e:	4620      	mov	r0, r4
1a006c20:	f7ff fd22 	bl	1a006668 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a006c24:	2001      	movs	r0, #1
1a006c26:	bd38      	pop	{r3, r4, r5, pc}
1a006c28:	40086000 	.word	0x40086000
1a006c2c:	1a0066e1 	.word	0x1a0066e1

1a006c30 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a006c30:	b500      	push	{lr}
1a006c32:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a006c34:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a006c38:	2100      	movs	r1, #0
1a006c3a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a006c3e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a006c42:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a006c44:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a006c48:	9b07      	ldr	r3, [sp, #28]
1a006c4a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a006c4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a006c50:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a006c54:	4669      	mov	r1, sp
1a006c56:	4804      	ldr	r0, [pc, #16]	; (1a006c68 <i2cHardwareRead+0x38>)
1a006c58:	f7ff fafb 	bl	1a006252 <Chip_I2CM_XferBlocking>
1a006c5c:	b100      	cbz	r0, 1a006c60 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a006c5e:	2001      	movs	r0, #1
}
1a006c60:	b005      	add	sp, #20
1a006c62:	f85d fb04 	ldr.w	pc, [sp], #4
1a006c66:	bf00      	nop
1a006c68:	400a1000 	.word	0x400a1000

1a006c6c <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a006c6c:	b108      	cbz	r0, 1a006c72 <i2cHardwareWrite+0x6>
      return FALSE;
1a006c6e:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a006c70:	4770      	bx	lr
{
1a006c72:	b500      	push	{lr}
1a006c74:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a006c76:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a006c7a:	2100      	movs	r1, #0
1a006c7c:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a006c80:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a006c84:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a006c86:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a006c8a:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a006c8c:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a006c90:	4669      	mov	r1, sp
1a006c92:	4804      	ldr	r0, [pc, #16]	; (1a006ca4 <i2cHardwareWrite+0x38>)
1a006c94:	f7ff fadd 	bl	1a006252 <Chip_I2CM_XferBlocking>
1a006c98:	b100      	cbz	r0, 1a006c9c <i2cHardwareWrite+0x30>
   return TRUE;
1a006c9a:	2001      	movs	r0, #1
}
1a006c9c:	b005      	add	sp, #20
1a006c9e:	f85d fb04 	ldr.w	pc, [sp], #4
1a006ca2:	bf00      	nop
1a006ca4:	400a1000 	.word	0x400a1000

1a006ca8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a006ca8:	b108      	cbz	r0, 1a006cae <i2cInit+0x6>
      return FALSE;
1a006caa:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a006cac:	4770      	bx	lr
{
1a006cae:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a006cb0:	f7ff ffa6 	bl	1a006c00 <i2cHardwareInit>
}
1a006cb4:	bd08      	pop	{r3, pc}

1a006cb6 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a006cb6:	b108      	cbz	r0, 1a006cbc <i2cRead+0x6>
      return FALSE;
1a006cb8:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a006cba:	4770      	bx	lr
{
1a006cbc:	b510      	push	{r4, lr}
1a006cbe:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a006cc0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a006cc4:	9403      	str	r4, [sp, #12]
1a006cc6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a006cca:	9402      	str	r4, [sp, #8]
1a006ccc:	9c07      	ldr	r4, [sp, #28]
1a006cce:	9401      	str	r4, [sp, #4]
1a006cd0:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a006cd4:	9400      	str	r4, [sp, #0]
1a006cd6:	f7ff ffab 	bl	1a006c30 <i2cHardwareRead>
}
1a006cda:	b004      	add	sp, #16
1a006cdc:	bd10      	pop	{r4, pc}

1a006cde <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a006cde:	b108      	cbz	r0, 1a006ce4 <i2cWrite+0x6>
      return FALSE;
1a006ce0:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a006ce2:	4770      	bx	lr
{
1a006ce4:	b510      	push	{r4, lr}
1a006ce6:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a006ce8:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a006cec:	9400      	str	r4, [sp, #0]
1a006cee:	f7ff ffbd 	bl	1a006c6c <i2cHardwareWrite>
}
1a006cf2:	b002      	add	sp, #8
1a006cf4:	bd10      	pop	{r4, pc}
1a006cf6:	Address 0x000000001a006cf6 is out of bounds.


1a006cf8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a006cf8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a006cfa:	4d0b      	ldr	r5, [pc, #44]	; (1a006d28 <gpioObtainPinInit+0x30>)
1a006cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a006d00:	182c      	adds	r4, r5, r0
1a006d02:	5628      	ldrsb	r0, [r5, r0]
1a006d04:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a006d06:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a006d0a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a006d0c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a006d10:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a006d12:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a006d16:	9b02      	ldr	r3, [sp, #8]
1a006d18:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a006d1a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a006d1e:	9b03      	ldr	r3, [sp, #12]
1a006d20:	701a      	strb	r2, [r3, #0]
}
1a006d22:	bc30      	pop	{r4, r5}
1a006d24:	4770      	bx	lr
1a006d26:	bf00      	nop
1a006d28:	1a009e94 	.word	0x1a009e94

1a006d2c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a006d2c:	b570      	push	{r4, r5, r6, lr}
1a006d2e:	b084      	sub	sp, #16
1a006d30:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a006d32:	2300      	movs	r3, #0
1a006d34:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006d38:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006d3c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006d40:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006d44:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006d48:	f10d 030b 	add.w	r3, sp, #11
1a006d4c:	9301      	str	r3, [sp, #4]
1a006d4e:	ab03      	add	r3, sp, #12
1a006d50:	9300      	str	r3, [sp, #0]
1a006d52:	f10d 030d 	add.w	r3, sp, #13
1a006d56:	f10d 020e 	add.w	r2, sp, #14
1a006d5a:	f10d 010f 	add.w	r1, sp, #15
1a006d5e:	f7ff ffcb 	bl	1a006cf8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a006d62:	2c05      	cmp	r4, #5
1a006d64:	f200 80a5 	bhi.w	1a006eb2 <gpioInit+0x186>
1a006d68:	e8df f004 	tbb	[pc, r4]
1a006d6c:	45278109 	.word	0x45278109
1a006d70:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a006d72:	4851      	ldr	r0, [pc, #324]	; (1a006eb8 <gpioInit+0x18c>)
1a006d74:	f7ff fafe 	bl	1a006374 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a006d78:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a006d7a:	b004      	add	sp, #16
1a006d7c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a006d7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006d82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006d86:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a006d8a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006d8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006d92:	494a      	ldr	r1, [pc, #296]	; (1a006ebc <gpioInit+0x190>)
1a006d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006d98:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006d9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006da0:	2001      	movs	r0, #1
1a006da2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a006da6:	4c44      	ldr	r4, [pc, #272]	; (1a006eb8 <gpioInit+0x18c>)
1a006da8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006dac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006db0:	ea22 0201 	bic.w	r2, r2, r1
1a006db4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006db8:	e7df      	b.n	1a006d7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a006dba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006dbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006dc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006dc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a006dca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006dce:	493b      	ldr	r1, [pc, #236]	; (1a006ebc <gpioInit+0x190>)
1a006dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006dd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006dd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006ddc:	2001      	movs	r0, #1
1a006dde:	fa00 f102 	lsl.w	r1, r0, r2
1a006de2:	4c35      	ldr	r4, [pc, #212]	; (1a006eb8 <gpioInit+0x18c>)
1a006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006de8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006dec:	ea22 0201 	bic.w	r2, r2, r1
1a006df0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006df4:	e7c1      	b.n	1a006d7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a006df6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006dfa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006dfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006e02:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a006e06:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006e0a:	492c      	ldr	r1, [pc, #176]	; (1a006ebc <gpioInit+0x190>)
1a006e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006e10:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006e14:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006e18:	2001      	movs	r0, #1
1a006e1a:	fa00 f102 	lsl.w	r1, r0, r2
1a006e1e:	4c26      	ldr	r4, [pc, #152]	; (1a006eb8 <gpioInit+0x18c>)
1a006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006e24:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006e28:	ea22 0201 	bic.w	r2, r2, r1
1a006e2c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006e30:	e7a3      	b.n	1a006d7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a006e32:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006e36:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006e3a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006e3e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a006e42:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006e46:	491d      	ldr	r1, [pc, #116]	; (1a006ebc <gpioInit+0x190>)
1a006e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a006e4c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006e50:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006e54:	2001      	movs	r0, #1
1a006e56:	fa00 f102 	lsl.w	r1, r0, r2
1a006e5a:	4c17      	ldr	r4, [pc, #92]	; (1a006eb8 <gpioInit+0x18c>)
1a006e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a006e60:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a006e64:	ea22 0201 	bic.w	r2, r2, r1
1a006e68:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a006e6c:	e785      	b.n	1a006d7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a006e6e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a006e72:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a006e76:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a006e7a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a006e7e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a006e82:	490e      	ldr	r1, [pc, #56]	; (1a006ebc <gpioInit+0x190>)
1a006e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a006e88:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a006e8c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a006e90:	2001      	movs	r0, #1
1a006e92:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a006e96:	4b08      	ldr	r3, [pc, #32]	; (1a006eb8 <gpioInit+0x18c>)
1a006e98:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a006e9c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a006ea0:	4331      	orrs	r1, r6
1a006ea2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a006ea6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a006ea8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a006eac:	2100      	movs	r1, #0
1a006eae:	5499      	strb	r1, [r3, r2]
1a006eb0:	e763      	b.n	1a006d7a <gpioInit+0x4e>
      ret_val = 0;
1a006eb2:	2000      	movs	r0, #0
1a006eb4:	e761      	b.n	1a006d7a <gpioInit+0x4e>
1a006eb6:	bf00      	nop
1a006eb8:	400f4000 	.word	0x400f4000
1a006ebc:	40086000 	.word	0x40086000

1a006ec0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a006ec0:	b510      	push	{r4, lr}
1a006ec2:	b084      	sub	sp, #16
1a006ec4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a006ec6:	2300      	movs	r3, #0
1a006ec8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a006ecc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a006ed0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a006ed4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a006ed8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a006edc:	f10d 030b 	add.w	r3, sp, #11
1a006ee0:	9301      	str	r3, [sp, #4]
1a006ee2:	ab03      	add	r3, sp, #12
1a006ee4:	9300      	str	r3, [sp, #0]
1a006ee6:	f10d 030d 	add.w	r3, sp, #13
1a006eea:	f10d 020e 	add.w	r2, sp, #14
1a006eee:	f10d 010f 	add.w	r1, sp, #15
1a006ef2:	f7ff ff01 	bl	1a006cf8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a006ef6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a006efa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a006efe:	3400      	adds	r4, #0
1a006f00:	bf18      	it	ne
1a006f02:	2401      	movne	r4, #1
1a006f04:	015b      	lsls	r3, r3, #5
1a006f06:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a006f0a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a006f0e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a006f10:	2001      	movs	r0, #1
1a006f12:	b004      	add	sp, #16
1a006f14:	bd10      	pop	{r4, pc}
1a006f16:	Address 0x000000001a006f16 is out of bounds.


1a006f18 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a006f18:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a006f1a:	4b04      	ldr	r3, [pc, #16]	; (1a006f2c <USB0_IRQHandler+0x14>)
1a006f1c:	681b      	ldr	r3, [r3, #0]
1a006f1e:	681b      	ldr	r3, [r3, #0]
1a006f20:	68db      	ldr	r3, [r3, #12]
1a006f22:	4a03      	ldr	r2, [pc, #12]	; (1a006f30 <USB0_IRQHandler+0x18>)
1a006f24:	6810      	ldr	r0, [r2, #0]
1a006f26:	4798      	blx	r3
}
1a006f28:	bd08      	pop	{r3, pc}
1a006f2a:	bf00      	nop
1a006f2c:	10003650 	.word	0x10003650
1a006f30:	10003494 	.word	0x10003494

1a006f34 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a006f34:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a006f36:	f7ff f8fd 	bl	1a006134 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a006f3a:	4b3a      	ldr	r3, [pc, #232]	; (1a007024 <boardInit+0xf0>)
1a006f3c:	6818      	ldr	r0, [r3, #0]
1a006f3e:	f7ff fd11 	bl	1a006964 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a006f42:	2001      	movs	r0, #1
1a006f44:	2100      	movs	r1, #0
1a006f46:	f7ff fe2f 	bl	1a006ba8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a006f4a:	2105      	movs	r1, #5
1a006f4c:	2000      	movs	r0, #0
1a006f4e:	f7ff feed 	bl	1a006d2c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a006f52:	2100      	movs	r1, #0
1a006f54:	2026      	movs	r0, #38	; 0x26
1a006f56:	f7ff fee9 	bl	1a006d2c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a006f5a:	2100      	movs	r1, #0
1a006f5c:	2027      	movs	r0, #39	; 0x27
1a006f5e:	f7ff fee5 	bl	1a006d2c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a006f62:	2100      	movs	r1, #0
1a006f64:	2028      	movs	r0, #40	; 0x28
1a006f66:	f7ff fee1 	bl	1a006d2c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a006f6a:	2100      	movs	r1, #0
1a006f6c:	2029      	movs	r0, #41	; 0x29
1a006f6e:	f7ff fedd 	bl	1a006d2c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a006f72:	2101      	movs	r1, #1
1a006f74:	202a      	movs	r0, #42	; 0x2a
1a006f76:	f7ff fed9 	bl	1a006d2c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a006f7a:	2101      	movs	r1, #1
1a006f7c:	202b      	movs	r0, #43	; 0x2b
1a006f7e:	f7ff fed5 	bl	1a006d2c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a006f82:	2101      	movs	r1, #1
1a006f84:	202c      	movs	r0, #44	; 0x2c
1a006f86:	f7ff fed1 	bl	1a006d2c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a006f8a:	2101      	movs	r1, #1
1a006f8c:	202d      	movs	r0, #45	; 0x2d
1a006f8e:	f7ff fecd 	bl	1a006d2c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a006f92:	2101      	movs	r1, #1
1a006f94:	202e      	movs	r0, #46	; 0x2e
1a006f96:	f7ff fec9 	bl	1a006d2c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a006f9a:	2101      	movs	r1, #1
1a006f9c:	202f      	movs	r0, #47	; 0x2f
1a006f9e:	f7ff fec5 	bl	1a006d2c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a006fa2:	2100      	movs	r1, #0
1a006fa4:	2030      	movs	r0, #48	; 0x30
1a006fa6:	f7ff fec1 	bl	1a006d2c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a006faa:	2100      	movs	r1, #0
1a006fac:	2031      	movs	r0, #49	; 0x31
1a006fae:	f7ff febd 	bl	1a006d2c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a006fb2:	2100      	movs	r1, #0
1a006fb4:	2032      	movs	r0, #50	; 0x32
1a006fb6:	f7ff feb9 	bl	1a006d2c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a006fba:	2100      	movs	r1, #0
1a006fbc:	2033      	movs	r0, #51	; 0x33
1a006fbe:	f7ff feb5 	bl	1a006d2c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a006fc2:	2100      	movs	r1, #0
1a006fc4:	2034      	movs	r0, #52	; 0x34
1a006fc6:	f7ff feb1 	bl	1a006d2c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a006fca:	2100      	movs	r1, #0
1a006fcc:	2035      	movs	r0, #53	; 0x35
1a006fce:	f7ff fead 	bl	1a006d2c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a006fd2:	2100      	movs	r1, #0
1a006fd4:	2036      	movs	r0, #54	; 0x36
1a006fd6:	f7ff fea9 	bl	1a006d2c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a006fda:	2100      	movs	r1, #0
1a006fdc:	2037      	movs	r0, #55	; 0x37
1a006fde:	f7ff fea5 	bl	1a006d2c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a006fe2:	2101      	movs	r1, #1
1a006fe4:	2038      	movs	r0, #56	; 0x38
1a006fe6:	f7ff fea1 	bl	1a006d2c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a006fea:	2101      	movs	r1, #1
1a006fec:	2039      	movs	r0, #57	; 0x39
1a006fee:	f7ff fe9d 	bl	1a006d2c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a006ff2:	2101      	movs	r1, #1
1a006ff4:	203a      	movs	r0, #58	; 0x3a
1a006ff6:	f7ff fe99 	bl	1a006d2c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a006ffa:	2101      	movs	r1, #1
1a006ffc:	203b      	movs	r0, #59	; 0x3b
1a006ffe:	f7ff fe95 	bl	1a006d2c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a007002:	2101      	movs	r1, #1
1a007004:	203c      	movs	r0, #60	; 0x3c
1a007006:	f7ff fe91 	bl	1a006d2c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00700a:	2101      	movs	r1, #1
1a00700c:	203d      	movs	r0, #61	; 0x3d
1a00700e:	f7ff fe8d 	bl	1a006d2c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a007012:	2101      	movs	r1, #1
1a007014:	203e      	movs	r0, #62	; 0x3e
1a007016:	f7ff fe89 	bl	1a006d2c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00701a:	2101      	movs	r1, #1
1a00701c:	203f      	movs	r0, #63	; 0x3f
1a00701e:	f7ff fe85 	bl	1a006d2c <gpioInit>

}
1a007022:	bd08      	pop	{r3, pc}
1a007024:	10003644 	.word	0x10003644

1a007028 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a007028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00702c:	4680      	mov	r8, r0
1a00702e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a007030:	f7ff fde0 	bl	1a006bf4 <tickRead>
1a007034:	4606      	mov	r6, r0
1a007036:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a007038:	f7ff fddc 	bl	1a006bf4 <tickRead>
1a00703c:	1b84      	subs	r4, r0, r6
1a00703e:	eb61 0507 	sbc.w	r5, r1, r7
1a007042:	4b06      	ldr	r3, [pc, #24]	; (1a00705c <delay+0x34>)
1a007044:	e9d3 2300 	ldrd	r2, r3, [r3]
1a007048:	4640      	mov	r0, r8
1a00704a:	4649      	mov	r1, r9
1a00704c:	f000 ffe2 	bl	1a008014 <__aeabi_uldivmod>
1a007050:	428d      	cmp	r5, r1
1a007052:	bf08      	it	eq
1a007054:	4284      	cmpeq	r4, r0
1a007056:	d3ef      	bcc.n	1a007038 <delay+0x10>
}
1a007058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a00705c:	10003648 	.word	0x10003648

1a007060 <mpu9250InitializeControlStructure>:

/*==================[internal functions definition]==========================*/

static int8_t mpu9250InitializeControlStructure( void )
{
	control._tempScale = 333.87f;
1a007060:	4b1b      	ldr	r3, [pc, #108]	; (1a0070d0 <mpu9250InitializeControlStructure+0x70>)
1a007062:	4a1c      	ldr	r2, [pc, #112]	; (1a0070d4 <mpu9250InitializeControlStructure+0x74>)
1a007064:	619a      	str	r2, [r3, #24]
	control._tempOffset = 21.0f;
1a007066:	4a1c      	ldr	r2, [pc, #112]	; (1a0070d8 <mpu9250InitializeControlStructure+0x78>)
1a007068:	61da      	str	r2, [r3, #28]
	control._numSamples = 100;
1a00706a:	2264      	movs	r2, #100	; 0x64
1a00706c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	control._axs = 1.0f;
1a007070:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
1a007074:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	control._ays = 1.0f;
1a007078:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	control._azs = 1.0f;
1a00707c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	control._maxCounts = 1000;
1a007080:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a007084:	f8a3 10d8 	strh.w	r1, [r3, #216]	; 0xd8
	control._deltaThresh = 0.3f;
1a007088:	4914      	ldr	r1, [pc, #80]	; (1a0070dc <mpu9250InitializeControlStructure+0x7c>)
1a00708a:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
	control._coeff = 8;
1a00708e:	2108      	movs	r1, #8
1a007090:	f883 10e0 	strb.w	r1, [r3, #224]	; 0xe0
	control._hxs = 1.0f;
1a007094:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	control._hys = 1.0f;
1a007098:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	control._hzs = 1.0f;
1a00709c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	control.tX[0] = 0;
1a0070a0:	2200      	movs	r2, #0
1a0070a2:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
	control.tX[1] = 1;
1a0070a6:	2101      	movs	r1, #1
1a0070a8:	f8a3 1142 	strh.w	r1, [r3, #322]	; 0x142
	control.tX[2] = 0;
1a0070ac:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
	control.tY[0] = 1;
1a0070b0:	f8a3 1146 	strh.w	r1, [r3, #326]	; 0x146
	control.tY[1] = 0;
1a0070b4:	f8a3 2148 	strh.w	r2, [r3, #328]	; 0x148
	control.tY[2] = 0;
1a0070b8:	f8a3 214a 	strh.w	r2, [r3, #330]	; 0x14a
	control.tZ[0] = 0;
1a0070bc:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
	control.tZ[1] = 0;
1a0070c0:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e
	control.tZ[2] = -1;
1a0070c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
1a0070c8:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
}
1a0070cc:	4770      	bx	lr
1a0070ce:	bf00      	nop
1a0070d0:	10003498 	.word	0x10003498
1a0070d4:	43a6ef5c 	.word	0x43a6ef5c
1a0070d8:	41a80000 	.word	0x41a80000
1a0070dc:	3e99999a 	.word	0x3e99999a

1a0070e0 <mpu9250ReadRegisters>:
      return -1;
	}
}

static int8_t mpu9250ReadRegisters( uint8_t subAddress, uint8_t count )
{
1a0070e0:	b510      	push	{r4, lr}
1a0070e2:	b086      	sub	sp, #24
1a0070e4:	aa06      	add	r2, sp, #24
1a0070e6:	f802 0d01 	strb.w	r0, [r2, #-1]!
	if( i2cRead( I2C0,control.address,&subAddress,1,TRUE,control._buffer,count,TRUE) ){
1a0070ea:	4809      	ldr	r0, [pc, #36]	; (1a007110 <mpu9250ReadRegisters+0x30>)
1a0070ec:	f810 4b24 	ldrb.w	r4, [r0], #36
1a0070f0:	2301      	movs	r3, #1
1a0070f2:	9303      	str	r3, [sp, #12]
1a0070f4:	9102      	str	r1, [sp, #8]
1a0070f6:	9001      	str	r0, [sp, #4]
1a0070f8:	9300      	str	r3, [sp, #0]
1a0070fa:	4621      	mov	r1, r4
1a0070fc:	2000      	movs	r0, #0
1a0070fe:	f7ff fdda 	bl	1a006cb6 <i2cRead>
1a007102:	b110      	cbz	r0, 1a00710a <mpu9250ReadRegisters+0x2a>
		return 1;
1a007104:	2001      	movs	r0, #1
	} else {
		return -1;
	}
}
1a007106:	b006      	add	sp, #24
1a007108:	bd10      	pop	{r4, pc}
		return -1;
1a00710a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00710e:	e7fa      	b.n	1a007106 <mpu9250ReadRegisters+0x26>
1a007110:	10003498 	.word	0x10003498

1a007114 <mpu9250WhoAmI>:
		return -6;
	}
}

static int8_t mpu9250WhoAmI( void )
{
1a007114:	b508      	push	{r3, lr}
	// read the WHO AM I register
	if (mpu9250ReadRegisters(MPU9250_WHO_AM_I,1) < 0) {
1a007116:	2101      	movs	r1, #1
1a007118:	2075      	movs	r0, #117	; 0x75
1a00711a:	f7ff ffe1 	bl	1a0070e0 <mpu9250ReadRegisters>
1a00711e:	2800      	cmp	r0, #0
1a007120:	db03      	blt.n	1a00712a <mpu9250WhoAmI+0x16>
		return -1;
	}
	// return the register value
	return control._buffer[0];
1a007122:	4b03      	ldr	r3, [pc, #12]	; (1a007130 <mpu9250WhoAmI+0x1c>)
1a007124:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a007128:	bd08      	pop	{r3, pc}
		return -1;
1a00712a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00712e:	e7fb      	b.n	1a007128 <mpu9250WhoAmI+0x14>
1a007130:	10003498 	.word	0x10003498

1a007134 <mpu9250WriteRegister>:
{
1a007134:	b5f0      	push	{r4, r5, r6, r7, lr}
1a007136:	b085      	sub	sp, #20
1a007138:	4606      	mov	r6, r0
1a00713a:	460c      	mov	r4, r1
	transmitDataBuffer[0] = subAddress;
1a00713c:	f88d 000c 	strb.w	r0, [sp, #12]
	transmitDataBuffer[1] = data;
1a007140:	f88d 100d 	strb.w	r1, [sp, #13]
	i2cWrite(I2C0, control.address, transmitDataBuffer, 2, TRUE);
1a007144:	4d0d      	ldr	r5, [pc, #52]	; (1a00717c <mpu9250WriteRegister+0x48>)
1a007146:	7829      	ldrb	r1, [r5, #0]
1a007148:	2701      	movs	r7, #1
1a00714a:	9700      	str	r7, [sp, #0]
1a00714c:	2302      	movs	r3, #2
1a00714e:	aa03      	add	r2, sp, #12
1a007150:	2000      	movs	r0, #0
1a007152:	f7ff fdc4 	bl	1a006cde <i2cWrite>
	delay(10);
1a007156:	200a      	movs	r0, #10
1a007158:	2100      	movs	r1, #0
1a00715a:	f7ff ff65 	bl	1a007028 <delay>
	mpu9250ReadRegisters(subAddress,1);
1a00715e:	4639      	mov	r1, r7
1a007160:	4630      	mov	r0, r6
1a007162:	f7ff ffbd 	bl	1a0070e0 <mpu9250ReadRegisters>
	if(control._buffer[0] == data) {
1a007166:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
1a00716a:	42a3      	cmp	r3, r4
1a00716c:	d102      	bne.n	1a007174 <mpu9250WriteRegister+0x40>
      return 1;
1a00716e:	4638      	mov	r0, r7
}
1a007170:	b005      	add	sp, #20
1a007172:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return -1;
1a007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007178:	e7fa      	b.n	1a007170 <mpu9250WriteRegister+0x3c>
1a00717a:	bf00      	nop
1a00717c:	10003498 	.word	0x10003498

1a007180 <mpu9250ReadAK8963Registers>:
	// return the register value
	return control._buffer[0];
}

static int8_t mpu9250ReadAK8963Registers( uint8_t subAddress, uint8_t count )
{
1a007180:	b538      	push	{r3, r4, r5, lr}
1a007182:	4605      	mov	r5, r0
1a007184:	460c      	mov	r4, r1
	// set slave 0 to the AK8963 and set for read
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR | MPU9250_I2C_READ_FLAG) < 0) {
1a007186:	218c      	movs	r1, #140	; 0x8c
1a007188:	2025      	movs	r0, #37	; 0x25
1a00718a:	f7ff ffd3 	bl	1a007134 <mpu9250WriteRegister>
1a00718e:	2800      	cmp	r0, #0
1a007190:	db18      	blt.n	1a0071c4 <mpu9250ReadAK8963Registers+0x44>
		return -1;
	}
	// set the register to the desired AK8963 sub address
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a007192:	4629      	mov	r1, r5
1a007194:	2026      	movs	r0, #38	; 0x26
1a007196:	f7ff ffcd 	bl	1a007134 <mpu9250WriteRegister>
1a00719a:	2800      	cmp	r0, #0
1a00719c:	db15      	blt.n	1a0071ca <mpu9250ReadAK8963Registers+0x4a>
		return -2;
	}
	// enable I2C and request the bytes
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | count) < 0) {
1a00719e:	f044 0180 	orr.w	r1, r4, #128	; 0x80
1a0071a2:	2027      	movs	r0, #39	; 0x27
1a0071a4:	f7ff ffc6 	bl	1a007134 <mpu9250WriteRegister>
1a0071a8:	2800      	cmp	r0, #0
1a0071aa:	db11      	blt.n	1a0071d0 <mpu9250ReadAK8963Registers+0x50>
		return -3;
	}
	delay(1); // takes some time for these registers to fill
1a0071ac:	2001      	movs	r0, #1
1a0071ae:	2100      	movs	r1, #0
1a0071b0:	f7ff ff3a 	bl	1a007028 <delay>
	// read the bytes off the MPU9250 EXT_SENS_DATA registers
	control._status = mpu9250ReadRegisters(MPU9250_EXT_SENS_DATA_00,count);
1a0071b4:	4621      	mov	r1, r4
1a0071b6:	2049      	movs	r0, #73	; 0x49
1a0071b8:	f7ff ff92 	bl	1a0070e0 <mpu9250ReadRegisters>
1a0071bc:	4b06      	ldr	r3, [pc, #24]	; (1a0071d8 <mpu9250ReadAK8963Registers+0x58>)
1a0071be:	f883 0152 	strb.w	r0, [r3, #338]	; 0x152
	return control._status;
}
1a0071c2:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a0071c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0071c8:	e7fb      	b.n	1a0071c2 <mpu9250ReadAK8963Registers+0x42>
		return -2;
1a0071ca:	f06f 0001 	mvn.w	r0, #1
1a0071ce:	e7f8      	b.n	1a0071c2 <mpu9250ReadAK8963Registers+0x42>
		return -3;
1a0071d0:	f06f 0002 	mvn.w	r0, #2
1a0071d4:	e7f5      	b.n	1a0071c2 <mpu9250ReadAK8963Registers+0x42>
1a0071d6:	bf00      	nop
1a0071d8:	10003498 	.word	0x10003498

1a0071dc <mpu9250WhoAmIAK8963>:
{
1a0071dc:	b508      	push	{r3, lr}
	if (mpu9250ReadAK8963Registers(MPU9250_AK8963_WHO_AM_I,1) < 0) {
1a0071de:	2101      	movs	r1, #1
1a0071e0:	2000      	movs	r0, #0
1a0071e2:	f7ff ffcd 	bl	1a007180 <mpu9250ReadAK8963Registers>
1a0071e6:	2800      	cmp	r0, #0
1a0071e8:	db03      	blt.n	1a0071f2 <mpu9250WhoAmIAK8963+0x16>
	return control._buffer[0];
1a0071ea:	4b03      	ldr	r3, [pc, #12]	; (1a0071f8 <mpu9250WhoAmIAK8963+0x1c>)
1a0071ec:	f993 0024 	ldrsb.w	r0, [r3, #36]	; 0x24
}
1a0071f0:	bd08      	pop	{r3, pc}
		return -1;
1a0071f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0071f6:	e7fb      	b.n	1a0071f0 <mpu9250WhoAmIAK8963+0x14>
1a0071f8:	10003498 	.word	0x10003498

1a0071fc <mpu9250WriteAK8963Register>:
{
1a0071fc:	b538      	push	{r3, r4, r5, lr}
1a0071fe:	4604      	mov	r4, r0
1a007200:	460d      	mov	r5, r1
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_ADDR, MPU9250_AK8963_I2C_ADDR) < 0) {
1a007202:	210c      	movs	r1, #12
1a007204:	2025      	movs	r0, #37	; 0x25
1a007206:	f7ff ff95 	bl	1a007134 <mpu9250WriteRegister>
1a00720a:	2800      	cmp	r0, #0
1a00720c:	db1e      	blt.n	1a00724c <mpu9250WriteAK8963Register+0x50>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_REG, subAddress) < 0) {
1a00720e:	4621      	mov	r1, r4
1a007210:	2026      	movs	r0, #38	; 0x26
1a007212:	f7ff ff8f 	bl	1a007134 <mpu9250WriteRegister>
1a007216:	2800      	cmp	r0, #0
1a007218:	db1b      	blt.n	1a007252 <mpu9250WriteAK8963Register+0x56>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_DO, data) < 0) {
1a00721a:	4629      	mov	r1, r5
1a00721c:	2063      	movs	r0, #99	; 0x63
1a00721e:	f7ff ff89 	bl	1a007134 <mpu9250WriteRegister>
1a007222:	2800      	cmp	r0, #0
1a007224:	db18      	blt.n	1a007258 <mpu9250WriteAK8963Register+0x5c>
	if (mpu9250WriteRegister( MPU9250_I2C_SLV0_CTRL, MPU9250_I2C_SLV0_EN | (uint8_t)1) < 0) {
1a007226:	2181      	movs	r1, #129	; 0x81
1a007228:	2027      	movs	r0, #39	; 0x27
1a00722a:	f7ff ff83 	bl	1a007134 <mpu9250WriteRegister>
1a00722e:	2800      	cmp	r0, #0
1a007230:	db15      	blt.n	1a00725e <mpu9250WriteAK8963Register+0x62>
	if (mpu9250ReadAK8963Registers(subAddress,1) < 0) {
1a007232:	2101      	movs	r1, #1
1a007234:	4620      	mov	r0, r4
1a007236:	f7ff ffa3 	bl	1a007180 <mpu9250ReadAK8963Registers>
1a00723a:	2800      	cmp	r0, #0
1a00723c:	db12      	blt.n	1a007264 <mpu9250WriteAK8963Register+0x68>
	if(control._buffer[0] == data) {
1a00723e:	4b0c      	ldr	r3, [pc, #48]	; (1a007270 <mpu9250WriteAK8963Register+0x74>)
1a007240:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
1a007244:	42ab      	cmp	r3, r5
1a007246:	d110      	bne.n	1a00726a <mpu9250WriteAK8963Register+0x6e>
		return 1;
1a007248:	2001      	movs	r0, #1
}
1a00724a:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a00724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007250:	e7fb      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
		return -2;
1a007252:	f06f 0001 	mvn.w	r0, #1
1a007256:	e7f8      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
		return -3;
1a007258:	f06f 0002 	mvn.w	r0, #2
1a00725c:	e7f5      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
		return -4;
1a00725e:	f06f 0003 	mvn.w	r0, #3
1a007262:	e7f2      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
		return -5;
1a007264:	f06f 0004 	mvn.w	r0, #4
1a007268:	e7ef      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
		return -6;
1a00726a:	f06f 0005 	mvn.w	r0, #5
1a00726e:	e7ec      	b.n	1a00724a <mpu9250WriteAK8963Register+0x4e>
1a007270:	10003498 	.word	0x10003498

1a007274 <mpu9250SetGyroRange>:
	}
	return 1;
}

static int8_t mpu9250SetGyroRange( MPU9250_GyroRange_t range )
{
1a007274:	b510      	push	{r4, lr}
1a007276:	4604      	mov	r4, r0
	switch(range) {
1a007278:	2803      	cmp	r0, #3
1a00727a:	d80c      	bhi.n	1a007296 <mpu9250SetGyroRange+0x22>
1a00727c:	e8df f000 	tbb	[pc, r0]
1a007280:	241a1002 	.word	0x241a1002
		case MPU9250_GYRO_RANGE_250DPS: {
		  // setting the gyro range to 250DPS
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_250DPS) < 0){
1a007284:	2100      	movs	r1, #0
1a007286:	201b      	movs	r0, #27
1a007288:	f7ff ff54 	bl	1a007134 <mpu9250WriteRegister>
1a00728c:	2800      	cmp	r0, #0
1a00728e:	db25      	blt.n	1a0072dc <mpu9250SetGyroRange+0x68>
			return -1;
		  }
        // setting the gyro scale to 250DPS
		  control._gyroScale = 250.0f/32767.5f * MPU9250_D2R; 
1a007290:	4b18      	ldr	r3, [pc, #96]	; (1a0072f4 <mpu9250SetGyroRange+0x80>)
1a007292:	4a19      	ldr	r2, [pc, #100]	; (1a0072f8 <mpu9250SetGyroRange+0x84>)
1a007294:	609a      	str	r2, [r3, #8]
        // setting the gyro scale to 2000DPS
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
		  break;
		}
	}
	control._gyroRange = range;
1a007296:	4b17      	ldr	r3, [pc, #92]	; (1a0072f4 <mpu9250SetGyroRange+0x80>)
1a007298:	f883 4021 	strb.w	r4, [r3, #33]	; 0x21
	return 1;
1a00729c:	2001      	movs	r0, #1
}
1a00729e:	bd10      	pop	{r4, pc}
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_500DPS) < 0){
1a0072a0:	2108      	movs	r1, #8
1a0072a2:	201b      	movs	r0, #27
1a0072a4:	f7ff ff46 	bl	1a007134 <mpu9250WriteRegister>
1a0072a8:	2800      	cmp	r0, #0
1a0072aa:	db1a      	blt.n	1a0072e2 <mpu9250SetGyroRange+0x6e>
		  control._gyroScale = 500.0f/32767.5f * MPU9250_D2R; 
1a0072ac:	4b11      	ldr	r3, [pc, #68]	; (1a0072f4 <mpu9250SetGyroRange+0x80>)
1a0072ae:	4a13      	ldr	r2, [pc, #76]	; (1a0072fc <mpu9250SetGyroRange+0x88>)
1a0072b0:	609a      	str	r2, [r3, #8]
		  break;
1a0072b2:	e7f0      	b.n	1a007296 <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_1000DPS) < 0){
1a0072b4:	2110      	movs	r1, #16
1a0072b6:	201b      	movs	r0, #27
1a0072b8:	f7ff ff3c 	bl	1a007134 <mpu9250WriteRegister>
1a0072bc:	2800      	cmp	r0, #0
1a0072be:	db13      	blt.n	1a0072e8 <mpu9250SetGyroRange+0x74>
		  control._gyroScale = 1000.0f/32767.5f * MPU9250_D2R; 
1a0072c0:	4b0c      	ldr	r3, [pc, #48]	; (1a0072f4 <mpu9250SetGyroRange+0x80>)
1a0072c2:	4a0f      	ldr	r2, [pc, #60]	; (1a007300 <mpu9250SetGyroRange+0x8c>)
1a0072c4:	609a      	str	r2, [r3, #8]
		  break;
1a0072c6:	e7e6      	b.n	1a007296 <mpu9250SetGyroRange+0x22>
		  if(mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0){
1a0072c8:	2118      	movs	r1, #24
1a0072ca:	201b      	movs	r0, #27
1a0072cc:	f7ff ff32 	bl	1a007134 <mpu9250WriteRegister>
1a0072d0:	2800      	cmp	r0, #0
1a0072d2:	db0c      	blt.n	1a0072ee <mpu9250SetGyroRange+0x7a>
		  control._gyroScale = 2000.0f/32767.5f * MPU9250_D2R; 
1a0072d4:	4b07      	ldr	r3, [pc, #28]	; (1a0072f4 <mpu9250SetGyroRange+0x80>)
1a0072d6:	4a0b      	ldr	r2, [pc, #44]	; (1a007304 <mpu9250SetGyroRange+0x90>)
1a0072d8:	609a      	str	r2, [r3, #8]
		  break;
1a0072da:	e7dc      	b.n	1a007296 <mpu9250SetGyroRange+0x22>
			return -1;
1a0072dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0072e0:	e7dd      	b.n	1a00729e <mpu9250SetGyroRange+0x2a>
			return -1;
1a0072e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0072e6:	e7da      	b.n	1a00729e <mpu9250SetGyroRange+0x2a>
			return -1;
1a0072e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0072ec:	e7d7      	b.n	1a00729e <mpu9250SetGyroRange+0x2a>
			return -1;
1a0072ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0072f2:	e7d4      	b.n	1a00729e <mpu9250SetGyroRange+0x2a>
1a0072f4:	10003498 	.word	0x10003498
1a0072f8:	390ba0e4 	.word	0x390ba0e4
1a0072fc:	398ba0e4 	.word	0x398ba0e4
1a007300:	3a0ba0e4 	.word	0x3a0ba0e4
1a007304:	3a8ba0e4 	.word	0x3a8ba0e4

1a007308 <mpu9250SetDlpfBandwidth>:

static int8_t mpu9250SetDlpfBandwidth( MPU9250_DlpfBandwidth_t bandwidth )
{
1a007308:	b510      	push	{r4, lr}
1a00730a:	4604      	mov	r4, r0
	switch (bandwidth) {
1a00730c:	2805      	cmp	r0, #5
1a00730e:	d810      	bhi.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
1a007310:	e8df f000 	tbb	[pc, r0]
1a007314:	32231403 	.word	0x32231403
1a007318:	5041      	.short	0x5041
		case MPU9250_DLPF_BANDWIDTH_184HZ: {
         // setting accel bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) { 
1a00731a:	2101      	movs	r1, #1
1a00731c:	201d      	movs	r0, #29
1a00731e:	f7ff ff09 	bl	1a007134 <mpu9250WriteRegister>
1a007322:	2800      	cmp	r0, #0
1a007324:	db55      	blt.n	1a0073d2 <mpu9250SetDlpfBandwidth+0xca>
				return -1;
			}
         // setting gyro bandwidth to 184Hz
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a007326:	2101      	movs	r1, #1
1a007328:	201a      	movs	r0, #26
1a00732a:	f7ff ff03 	bl	1a007134 <mpu9250WriteRegister>
1a00732e:	2800      	cmp	r0, #0
1a007330:	db52      	blt.n	1a0073d8 <mpu9250SetDlpfBandwidth+0xd0>
				return -2;
			}
			break;
		}
	}
	control._bandwidth = bandwidth;
1a007332:	4b32      	ldr	r3, [pc, #200]	; (1a0073fc <mpu9250SetDlpfBandwidth+0xf4>)
1a007334:	f883 4022 	strb.w	r4, [r3, #34]	; 0x22
	return 1;
1a007338:	2001      	movs	r0, #1
}
1a00733a:	bd10      	pop	{r4, pc}
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_92) < 0) { 
1a00733c:	2102      	movs	r1, #2
1a00733e:	201d      	movs	r0, #29
1a007340:	f7ff fef8 	bl	1a007134 <mpu9250WriteRegister>
1a007344:	2800      	cmp	r0, #0
1a007346:	db4a      	blt.n	1a0073de <mpu9250SetDlpfBandwidth+0xd6>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_92) < 0) { 
1a007348:	2102      	movs	r1, #2
1a00734a:	201a      	movs	r0, #26
1a00734c:	f7ff fef2 	bl	1a007134 <mpu9250WriteRegister>
1a007350:	2800      	cmp	r0, #0
1a007352:	daee      	bge.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a007354:	f06f 0001 	mvn.w	r0, #1
1a007358:	e7ef      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_41) < 0) { 
1a00735a:	2103      	movs	r1, #3
1a00735c:	201d      	movs	r0, #29
1a00735e:	f7ff fee9 	bl	1a007134 <mpu9250WriteRegister>
1a007362:	2800      	cmp	r0, #0
1a007364:	db3e      	blt.n	1a0073e4 <mpu9250SetDlpfBandwidth+0xdc>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_41) < 0) { 
1a007366:	2103      	movs	r1, #3
1a007368:	201a      	movs	r0, #26
1a00736a:	f7ff fee3 	bl	1a007134 <mpu9250WriteRegister>
1a00736e:	2800      	cmp	r0, #0
1a007370:	dadf      	bge.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a007372:	f06f 0001 	mvn.w	r0, #1
1a007376:	e7e0      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_20) < 0) { 
1a007378:	2104      	movs	r1, #4
1a00737a:	201d      	movs	r0, #29
1a00737c:	f7ff feda 	bl	1a007134 <mpu9250WriteRegister>
1a007380:	2800      	cmp	r0, #0
1a007382:	db32      	blt.n	1a0073ea <mpu9250SetDlpfBandwidth+0xe2>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_20) < 0) { 
1a007384:	2104      	movs	r1, #4
1a007386:	201a      	movs	r0, #26
1a007388:	f7ff fed4 	bl	1a007134 <mpu9250WriteRegister>
1a00738c:	2800      	cmp	r0, #0
1a00738e:	dad0      	bge.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a007390:	f06f 0001 	mvn.w	r0, #1
1a007394:	e7d1      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_10) < 0) { 
1a007396:	2105      	movs	r1, #5
1a007398:	201d      	movs	r0, #29
1a00739a:	f7ff fecb 	bl	1a007134 <mpu9250WriteRegister>
1a00739e:	2800      	cmp	r0, #0
1a0073a0:	db26      	blt.n	1a0073f0 <mpu9250SetDlpfBandwidth+0xe8>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_10) < 0) { 
1a0073a2:	2105      	movs	r1, #5
1a0073a4:	201a      	movs	r0, #26
1a0073a6:	f7ff fec5 	bl	1a007134 <mpu9250WriteRegister>
1a0073aa:	2800      	cmp	r0, #0
1a0073ac:	dac1      	bge.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0073ae:	f06f 0001 	mvn.w	r0, #1
1a0073b2:	e7c2      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
			if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_5) < 0) { 
1a0073b4:	2106      	movs	r1, #6
1a0073b6:	201d      	movs	r0, #29
1a0073b8:	f7ff febc 	bl	1a007134 <mpu9250WriteRegister>
1a0073bc:	2800      	cmp	r0, #0
1a0073be:	db1a      	blt.n	1a0073f6 <mpu9250SetDlpfBandwidth+0xee>
			if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_5) < 0) { 
1a0073c0:	2106      	movs	r1, #6
1a0073c2:	201a      	movs	r0, #26
1a0073c4:	f7ff feb6 	bl	1a007134 <mpu9250WriteRegister>
1a0073c8:	2800      	cmp	r0, #0
1a0073ca:	dab2      	bge.n	1a007332 <mpu9250SetDlpfBandwidth+0x2a>
				return -2;
1a0073cc:	f06f 0001 	mvn.w	r0, #1
1a0073d0:	e7b3      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073d6:	e7b0      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -2;
1a0073d8:	f06f 0001 	mvn.w	r0, #1
1a0073dc:	e7ad      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073e2:	e7aa      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073e8:	e7a7      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073ee:	e7a4      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073f4:	e7a1      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
				return -1;
1a0073f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073fa:	e79e      	b.n	1a00733a <mpu9250SetDlpfBandwidth+0x32>
1a0073fc:	10003498 	.word	0x10003498

1a007400 <mpu9250SetSrd>:

static int8_t mpu9250SetSrd( uint8_t srd )
{
1a007400:	b510      	push	{r4, lr}
1a007402:	4604      	mov	r4, r0
	/* setting the sample rate divider to 19 to facilitate setting up 
      magnetometer */
   // setting the sample rate divider
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 19) < 0) {
1a007404:	2113      	movs	r1, #19
1a007406:	2019      	movs	r0, #25
1a007408:	f7ff fe94 	bl	1a007134 <mpu9250WriteRegister>
1a00740c:	2800      	cmp	r0, #0
1a00740e:	db3d      	blt.n	1a00748c <mpu9250SetSrd+0x8c>
		return -1;
	}
	if (srd > 9) {
1a007410:	2c09      	cmp	r4, #9
1a007412:	d922      	bls.n	1a00745a <mpu9250SetSrd+0x5a>
		// set AK8963 to Power Down
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a007414:	2100      	movs	r1, #0
1a007416:	200a      	movs	r0, #10
1a007418:	f7ff fef0 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a00741c:	2800      	cmp	r0, #0
1a00741e:	db38      	blt.n	1a007492 <mpu9250SetSrd+0x92>
			return -2;
		}
		delay(100); // long wait between AK8963 mode changes
1a007420:	2064      	movs	r0, #100	; 0x64
1a007422:	2100      	movs	r1, #0
1a007424:	f7ff fe00 	bl	1a007028 <delay>
		// set AK8963 to 16 bit resolution, 8 Hz update rate
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS1) < 0) {
1a007428:	2112      	movs	r1, #18
1a00742a:	200a      	movs	r0, #10
1a00742c:	f7ff fee6 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a007430:	2800      	cmp	r0, #0
1a007432:	db31      	blt.n	1a007498 <mpu9250SetSrd+0x98>
			return -3;
		}
		delay(100); // long wait between AK8963 mode changes
1a007434:	2064      	movs	r0, #100	; 0x64
1a007436:	2100      	movs	r1, #0
1a007438:	f7ff fdf6 	bl	1a007028 <delay>
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a00743c:	2107      	movs	r1, #7
1a00743e:	2003      	movs	r0, #3
1a007440:	f7ff fe9e 	bl	1a007180 <mpu9250ReadAK8963Registers>
		delay(100); // long wait between AK8963 mode changes
		// instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
	}
	/* setting the sample rate divider */
	if (mpu9250WriteRegister(MPU9250_SMPDIV, srd) < 0) { // setting the sample rate divider
1a007444:	4621      	mov	r1, r4
1a007446:	2019      	movs	r0, #25
1a007448:	f7ff fe74 	bl	1a007134 <mpu9250WriteRegister>
1a00744c:	2800      	cmp	r0, #0
1a00744e:	db2c      	blt.n	1a0074aa <mpu9250SetSrd+0xaa>
		return -4;
	}
	control._srd = srd;
1a007450:	4b17      	ldr	r3, [pc, #92]	; (1a0074b0 <mpu9250SetSrd+0xb0>)
1a007452:	f883 4023 	strb.w	r4, [r3, #35]	; 0x23
	return 1;
1a007456:	2001      	movs	r0, #1
}
1a007458:	bd10      	pop	{r4, pc}
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a00745a:	2100      	movs	r1, #0
1a00745c:	200a      	movs	r0, #10
1a00745e:	f7ff fecd 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a007462:	2800      	cmp	r0, #0
1a007464:	db1b      	blt.n	1a00749e <mpu9250SetSrd+0x9e>
		delay(100); // long wait between AK8963 mode changes
1a007466:	2064      	movs	r0, #100	; 0x64
1a007468:	2100      	movs	r1, #0
1a00746a:	f7ff fddd 	bl	1a007028 <delay>
		if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a00746e:	2116      	movs	r1, #22
1a007470:	200a      	movs	r0, #10
1a007472:	f7ff fec3 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a007476:	2800      	cmp	r0, #0
1a007478:	db14      	blt.n	1a0074a4 <mpu9250SetSrd+0xa4>
		delay(100); // long wait between AK8963 mode changes
1a00747a:	2064      	movs	r0, #100	; 0x64
1a00747c:	2100      	movs	r1, #0
1a00747e:	f7ff fdd3 	bl	1a007028 <delay>
		mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a007482:	2107      	movs	r1, #7
1a007484:	2003      	movs	r0, #3
1a007486:	f7ff fe7b 	bl	1a007180 <mpu9250ReadAK8963Registers>
1a00748a:	e7db      	b.n	1a007444 <mpu9250SetSrd+0x44>
		return -1;
1a00748c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007490:	e7e2      	b.n	1a007458 <mpu9250SetSrd+0x58>
			return -2;
1a007492:	f06f 0001 	mvn.w	r0, #1
1a007496:	e7df      	b.n	1a007458 <mpu9250SetSrd+0x58>
			return -3;
1a007498:	f06f 0002 	mvn.w	r0, #2
1a00749c:	e7dc      	b.n	1a007458 <mpu9250SetSrd+0x58>
			return -2;
1a00749e:	f06f 0001 	mvn.w	r0, #1
1a0074a2:	e7d9      	b.n	1a007458 <mpu9250SetSrd+0x58>
			return -3;
1a0074a4:	f06f 0002 	mvn.w	r0, #2
1a0074a8:	e7d6      	b.n	1a007458 <mpu9250SetSrd+0x58>
		return -4;
1a0074aa:	f06f 0003 	mvn.w	r0, #3
1a0074ae:	e7d3      	b.n	1a007458 <mpu9250SetSrd+0x58>
1a0074b0:	10003498 	.word	0x10003498

1a0074b4 <mpu9250Read>:
	return 1;
}

//Read sensor registers and store data at control structure
bool_t mpu9250Read(void)
{
1a0074b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0074b8:	b083      	sub	sp, #12
	// grab the data from the MPU9250
	if( !mpu9250ReadRegisters(MPU9250_ACCEL_OUT, 21) ){
1a0074ba:	2115      	movs	r1, #21
1a0074bc:	203b      	movs	r0, #59	; 0x3b
1a0074be:	f7ff fe0f 	bl	1a0070e0 <mpu9250ReadRegisters>
1a0074c2:	2800      	cmp	r0, #0
1a0074c4:	f000 8136 	beq.w	1a007734 <mpu9250Read+0x280>
		return 0;
	}
	// combine into 16 bit values
	control._axcounts = (((int16_t)control._buffer[0]) << 8)  | control._buffer[1];
1a0074c8:	4b9b      	ldr	r3, [pc, #620]	; (1a007738 <mpu9250Read+0x284>)
1a0074ca:	f893 b024 	ldrb.w	fp, [r3, #36]	; 0x24
1a0074ce:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
1a0074d2:	ea41 210b 	orr.w	r1, r1, fp, lsl #8
1a0074d6:	fa0f fb81 	sxth.w	fp, r1
1a0074da:	f8a3 b12c 	strh.w	fp, [r3, #300]	; 0x12c
	control._aycounts = (((int16_t)control._buffer[2]) << 8)  | control._buffer[3];
1a0074de:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a0074e2:	f893 1027 	ldrb.w	r1, [r3, #39]	; 0x27
1a0074e6:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
1a0074ea:	b209      	sxth	r1, r1
1a0074ec:	f8a3 112e 	strh.w	r1, [r3, #302]	; 0x12e
	control._azcounts = (((int16_t)control._buffer[4]) << 8)  | control._buffer[5];
1a0074f0:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
1a0074f4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
1a0074f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
1a0074fc:	b212      	sxth	r2, r2
1a0074fe:	f8a3 2130 	strh.w	r2, [r3, #304]	; 0x130
	control._tcounts  = (((int16_t)control._buffer[6]) << 8)  | control._buffer[7];
1a007502:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
1a007506:	f893 002b 	ldrb.w	r0, [r3, #43]	; 0x2b
1a00750a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a00750e:	b200      	sxth	r0, r0
1a007510:	ee05 0a90 	vmov	s11, r0
1a007514:	f8a3 013e 	strh.w	r0, [r3, #318]	; 0x13e
	control._gxcounts = (((int16_t)control._buffer[8]) << 8)  | control._buffer[9];
1a007518:	f893 502c 	ldrb.w	r5, [r3, #44]	; 0x2c
1a00751c:	f893 602d 	ldrb.w	r6, [r3, #45]	; 0x2d
1a007520:	ea46 2605 	orr.w	r6, r6, r5, lsl #8
1a007524:	b236      	sxth	r6, r6
1a007526:	f8a3 6132 	strh.w	r6, [r3, #306]	; 0x132
	control._gycounts = (((int16_t)control._buffer[10]) << 8) | control._buffer[11];
1a00752a:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
1a00752e:	f893 002f 	ldrb.w	r0, [r3, #47]	; 0x2f
1a007532:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
1a007536:	b200      	sxth	r0, r0
1a007538:	f8a3 0134 	strh.w	r0, [r3, #308]	; 0x134
	control._gzcounts = (((int16_t)control._buffer[12]) << 8) | control._buffer[13];
1a00753c:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
1a007540:	f893 5031 	ldrb.w	r5, [r3, #49]	; 0x31
1a007544:	ea45 2504 	orr.w	r5, r5, r4, lsl #8
1a007548:	b22d      	sxth	r5, r5
1a00754a:	f8a3 5136 	strh.w	r5, [r3, #310]	; 0x136
	control._hxcounts = (((int16_t)control._buffer[15]) << 8) | control._buffer[14];
1a00754e:	f893 7033 	ldrb.w	r7, [r3, #51]	; 0x33
1a007552:	f893 4032 	ldrb.w	r4, [r3, #50]	; 0x32
1a007556:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a00755a:	b224      	sxth	r4, r4
1a00755c:	ee06 4a90 	vmov	s13, r4
1a007560:	f8a3 4138 	strh.w	r4, [r3, #312]	; 0x138
	control._hycounts = (((int16_t)control._buffer[17]) << 8) | control._buffer[16];
1a007564:	f893 7035 	ldrb.w	r7, [r3, #53]	; 0x35
1a007568:	f893 4034 	ldrb.w	r4, [r3, #52]	; 0x34
1a00756c:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a007570:	b224      	sxth	r4, r4
1a007572:	ee07 4a10 	vmov	s14, r4
1a007576:	f8a3 413a 	strh.w	r4, [r3, #314]	; 0x13a
	control._hzcounts = (((int16_t)control._buffer[19]) << 8) | control._buffer[18];
1a00757a:	f893 7037 	ldrb.w	r7, [r3, #55]	; 0x37
1a00757e:	f893 4036 	ldrb.w	r4, [r3, #54]	; 0x36
1a007582:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
1a007586:	b224      	sxth	r4, r4
1a007588:	ee07 4a90 	vmov	s15, r4
1a00758c:	f8a3 413c 	strh.w	r4, [r3, #316]	; 0x13c
	// transform and convert to float values
	control._ax = (((float)(control.tX[0]*control._axcounts + control.tX[1]*control._aycounts + control.tX[2]*control._azcounts) * control._accelScale) - control._axb)*control._axs;
1a007590:	f9b3 a140 	ldrsh.w	sl, [r3, #320]	; 0x140
1a007594:	f9b3 7142 	ldrsh.w	r7, [r3, #322]	; 0x142
1a007598:	fb01 f407 	mul.w	r4, r1, r7
1a00759c:	fb0b 4c0a 	mla	ip, fp, sl, r4
1a0075a0:	f9b3 4144 	ldrsh.w	r4, [r3, #324]	; 0x144
1a0075a4:	9401      	str	r4, [sp, #4]
1a0075a6:	fb02 cc04 	mla	ip, r2, r4, ip
1a0075aa:	ee06 ca10 	vmov	s12, ip
1a0075ae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0075b2:	ed93 5a01 	vldr	s10, [r3, #4]
1a0075b6:	ee26 6a05 	vmul.f32	s12, s12, s10
1a0075ba:	edd3 4a30 	vldr	s9, [r3, #192]	; 0xc0
1a0075be:	ee36 6a64 	vsub.f32	s12, s12, s9
1a0075c2:	edd3 4a33 	vldr	s9, [r3, #204]	; 0xcc
1a0075c6:	ee26 6a24 	vmul.f32	s12, s12, s9
1a0075ca:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
	control._ay = (((float)(control.tY[0]*control._axcounts + control.tY[1]*control._aycounts + control.tY[2]*control._azcounts) * control._accelScale) - control._ayb)*control._ays;
1a0075ce:	f9b3 e146 	ldrsh.w	lr, [r3, #326]	; 0x146
1a0075d2:	f9b3 8148 	ldrsh.w	r8, [r3, #328]	; 0x148
1a0075d6:	fb08 fc01 	mul.w	ip, r8, r1
1a0075da:	fb0e cc0b 	mla	ip, lr, fp, ip
1a0075de:	f9b3 414a 	ldrsh.w	r4, [r3, #330]	; 0x14a
1a0075e2:	fb04 cc02 	mla	ip, r4, r2, ip
1a0075e6:	ee06 ca10 	vmov	s12, ip
1a0075ea:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0075ee:	ee25 6a06 	vmul.f32	s12, s10, s12
1a0075f2:	edd3 4a31 	vldr	s9, [r3, #196]	; 0xc4
1a0075f6:	ee36 6a64 	vsub.f32	s12, s12, s9
1a0075fa:	edd3 4a34 	vldr	s9, [r3, #208]	; 0xd0
1a0075fe:	ee26 6a24 	vmul.f32	s12, s12, s9
1a007602:	ed83 6a10 	vstr	s12, [r3, #64]	; 0x40
	control._az = (((float)(control.tZ[0]*control._axcounts + control.tZ[1]*control._aycounts + control.tZ[2]*control._azcounts) * control._accelScale) - control._azb)*control._azs;
1a007606:	f9b3 c14c 	ldrsh.w	ip, [r3, #332]	; 0x14c
1a00760a:	f9b3 914e 	ldrsh.w	r9, [r3, #334]	; 0x14e
1a00760e:	fb09 f101 	mul.w	r1, r9, r1
1a007612:	fb0c 110b 	mla	r1, ip, fp, r1
1a007616:	f9b3 b150 	ldrsh.w	fp, [r3, #336]	; 0x150
1a00761a:	fb0b 1102 	mla	r1, fp, r2, r1
1a00761e:	ee06 1a10 	vmov	s12, r1
1a007622:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a007626:	ee25 5a06 	vmul.f32	s10, s10, s12
1a00762a:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
1a00762e:	ee35 5a46 	vsub.f32	s10, s10, s12
1a007632:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
1a007636:	ee25 5a06 	vmul.f32	s10, s10, s12
1a00763a:	ed83 5a11 	vstr	s10, [r3, #68]	; 0x44
	control._gx = ((float) (control.tX[0]*control._gxcounts + control.tX[1]*control._gycounts + control.tX[2]*control._gzcounts) * control._gyroScale) -  control._gxb;
1a00763e:	fb00 f707 	mul.w	r7, r0, r7
1a007642:	fb06 770a 	mla	r7, r6, sl, r7
1a007646:	9a01      	ldr	r2, [sp, #4]
1a007648:	fb05 7202 	mla	r2, r5, r2, r7
1a00764c:	ee06 2a10 	vmov	s12, r2
1a007650:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a007654:	ed93 5a02 	vldr	s10, [r3, #8]
1a007658:	ee26 6a05 	vmul.f32	s12, s12, s10
1a00765c:	edd3 4a20 	vldr	s9, [r3, #128]	; 0x80
1a007660:	ee36 6a64 	vsub.f32	s12, s12, s9
1a007664:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	control._gy = ((float) (control.tY[0]*control._gxcounts + control.tY[1]*control._gycounts + control.tY[2]*control._gzcounts) * control._gyroScale) -  control._gyb;
1a007668:	fb00 f808 	mul.w	r8, r0, r8
1a00766c:	fb06 8e0e 	mla	lr, r6, lr, r8
1a007670:	fb05 e204 	mla	r2, r5, r4, lr
1a007674:	ee06 2a10 	vmov	s12, r2
1a007678:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a00767c:	ee25 6a06 	vmul.f32	s12, s10, s12
1a007680:	edd3 4a21 	vldr	s9, [r3, #132]	; 0x84
1a007684:	ee36 6a64 	vsub.f32	s12, s12, s9
1a007688:	ed83 6a13 	vstr	s12, [r3, #76]	; 0x4c
	control._gz = ((float) (control.tZ[0]*control._gxcounts + control.tZ[1]*control._gycounts + control.tZ[2]*control._gzcounts) * control._gyroScale) -  control._gzb;
1a00768c:	fb00 f009 	mul.w	r0, r0, r9
1a007690:	fb06 000c 	mla	r0, r6, ip, r0
1a007694:	fb05 050b 	mla	r5, r5, fp, r0
1a007698:	ee06 5a10 	vmov	s12, r5
1a00769c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
1a0076a0:	ee25 5a06 	vmul.f32	s10, s10, s12
1a0076a4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
1a0076a8:	ee35 5a46 	vsub.f32	s10, s10, s12
1a0076ac:	ed83 5a14 	vstr	s10, [r3, #80]	; 0x50
	control._hx = (((float)(control._hxcounts) * control._magScaleX) - control._hxb)*control._hxs;
1a0076b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
1a0076b4:	ed93 6a03 	vldr	s12, [r3, #12]
1a0076b8:	ee66 6a86 	vmul.f32	s13, s13, s12
1a0076bc:	ed93 6a44 	vldr	s12, [r3, #272]	; 0x110
1a0076c0:	ee76 6ac6 	vsub.f32	s13, s13, s12
1a0076c4:	ed93 6a47 	vldr	s12, [r3, #284]	; 0x11c
1a0076c8:	ee66 6a86 	vmul.f32	s13, s13, s12
1a0076cc:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	control._hy = (((float)(control._hycounts) * control._magScaleY) - control._hyb)*control._hys;
1a0076d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
1a0076d4:	edd3 6a04 	vldr	s13, [r3, #16]
1a0076d8:	ee27 7a26 	vmul.f32	s14, s14, s13
1a0076dc:	edd3 6a45 	vldr	s13, [r3, #276]	; 0x114
1a0076e0:	ee37 7a66 	vsub.f32	s14, s14, s13
1a0076e4:	edd3 6a48 	vldr	s13, [r3, #288]	; 0x120
1a0076e8:	ee27 7a26 	vmul.f32	s14, s14, s13
1a0076ec:	ed83 7a16 	vstr	s14, [r3, #88]	; 0x58
	control._hz = (((float)(control._hzcounts) * control._magScaleZ) - control._hzb)*control._hzs;
1a0076f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a0076f4:	ed93 7a05 	vldr	s14, [r3, #20]
1a0076f8:	ee67 7a87 	vmul.f32	s15, s15, s14
1a0076fc:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
1a007700:	ee77 7ac7 	vsub.f32	s15, s15, s14
1a007704:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
1a007708:	ee67 7a87 	vmul.f32	s15, s15, s14
1a00770c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	control._t = ((((float) control._tcounts)  - control._tempOffset)/ control._tempScale) + control._tempOffset;
1a007710:	eef8 5ae5 	vcvt.f32.s32	s11, s11
1a007714:	edd3 7a07 	vldr	s15, [r3, #28]
1a007718:	ee75 5ae7 	vsub.f32	s11, s11, s15
1a00771c:	edd3 6a06 	vldr	s13, [r3, #24]
1a007720:	ee85 7aa6 	vdiv.f32	s14, s11, s13
1a007724:	ee77 7a87 	vadd.f32	s15, s15, s14
1a007728:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	return 1;
1a00772c:	2001      	movs	r0, #1
}
1a00772e:	b003      	add	sp, #12
1a007730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
1a007734:	2000      	movs	r0, #0
1a007736:	e7fa      	b.n	1a00772e <mpu9250Read+0x27a>
1a007738:	10003498 	.word	0x10003498

1a00773c <mpu9250GetGyroX_rads>:

// Returns the gyroscope measurement in the x direction, rad/s
float mpu9250GetGyroX_rads( void )
{
	return control._gx;
}
1a00773c:	4b01      	ldr	r3, [pc, #4]	; (1a007744 <mpu9250GetGyroX_rads+0x8>)
1a00773e:	ed93 0a12 	vldr	s0, [r3, #72]	; 0x48
1a007742:	4770      	bx	lr
1a007744:	10003498 	.word	0x10003498

1a007748 <mpu9250GetGyroY_rads>:

// Returns the gyroscope measurement in the y direction, rad/s
float mpu9250GetGyroY_rads( void )
{
	return control._gy;
}
1a007748:	4b01      	ldr	r3, [pc, #4]	; (1a007750 <mpu9250GetGyroY_rads+0x8>)
1a00774a:	ed93 0a13 	vldr	s0, [r3, #76]	; 0x4c
1a00774e:	4770      	bx	lr
1a007750:	10003498 	.word	0x10003498

1a007754 <mpu9250GetGyroZ_rads>:

// Returns the gyroscope measurement in the z direction, rad/s
float mpu9250GetGyroZ_rads( void )
{
	return control._gz;
}
1a007754:	4b01      	ldr	r3, [pc, #4]	; (1a00775c <mpu9250GetGyroZ_rads+0x8>)
1a007756:	ed93 0a14 	vldr	s0, [r3, #80]	; 0x50
1a00775a:	4770      	bx	lr
1a00775c:	10003498 	.word	0x10003498

1a007760 <mpu9250CalibrateGyro>:
{
1a007760:	b538      	push	{r3, r4, r5, lr}
1a007762:	ed2d 8b02 	vpush	{d8}
	if (mpu9250SetGyroRange(MPU9250_GYRO_RANGE_250DPS) < 0) {
1a007766:	2000      	movs	r0, #0
1a007768:	f7ff fd84 	bl	1a007274 <mpu9250SetGyroRange>
1a00776c:	2800      	cmp	r0, #0
1a00776e:	f2c0 8093 	blt.w	1a007898 <mpu9250CalibrateGyro+0x138>
	if (mpu9250SetDlpfBandwidth(MPU9250_DLPF_BANDWIDTH_20HZ) < 0) {
1a007772:	2003      	movs	r0, #3
1a007774:	f7ff fdc8 	bl	1a007308 <mpu9250SetDlpfBandwidth>
1a007778:	2800      	cmp	r0, #0
1a00777a:	f2c0 8090 	blt.w	1a00789e <mpu9250CalibrateGyro+0x13e>
	if (mpu9250SetSrd(19) < 0) {
1a00777e:	2013      	movs	r0, #19
1a007780:	f7ff fe3e 	bl	1a007400 <mpu9250SetSrd>
1a007784:	2800      	cmp	r0, #0
1a007786:	f2c0 808d 	blt.w	1a0078a4 <mpu9250CalibrateGyro+0x144>
	control._gxbD = 0;
1a00778a:	4b4b      	ldr	r3, [pc, #300]	; (1a0078b8 <mpu9250CalibrateGyro+0x158>)
1a00778c:	2000      	movs	r0, #0
1a00778e:	2100      	movs	r1, #0
1a007790:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
	control._gybD = 0;
1a007794:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
	control._gzbD = 0;
1a007798:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
	for (uint8_t i=0; i < control._numSamples; i++) {
1a00779c:	2500      	movs	r5, #0
1a00779e:	e04a      	b.n	1a007836 <mpu9250CalibrateGyro+0xd6>
		mpu9250Read();
1a0077a0:	f7ff fe88 	bl	1a0074b4 <mpu9250Read>
		control._gxbD += ((mpu9250GetGyroX_rads() + control._gxb)/control._numSamples);
1a0077a4:	f7ff ffca 	bl	1a00773c <mpu9250GetGyroX_rads>
1a0077a8:	4c43      	ldr	r4, [pc, #268]	; (1a0078b8 <mpu9250CalibrateGyro+0x158>)
1a0077aa:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
1a0077ae:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0077b2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
1a0077b6:	ee08 3a10 	vmov	s16, r3
1a0077ba:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
1a0077be:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0077c2:	ee17 0a90 	vmov	r0, s15
1a0077c6:	f000 fb7d 	bl	1a007ec4 <__aeabi_f2d>
1a0077ca:	4602      	mov	r2, r0
1a0077cc:	460b      	mov	r3, r1
1a0077ce:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a0077d2:	f000 fa19 	bl	1a007c08 <__adddf3>
1a0077d6:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
		control._gybD += ((mpu9250GetGyroY_rads() + control._gyb)/control._numSamples);
1a0077da:	f7ff ffb5 	bl	1a007748 <mpu9250GetGyroY_rads>
1a0077de:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
1a0077e2:	ee30 0a27 	vadd.f32	s0, s0, s15
1a0077e6:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a0077ea:	ee17 0a90 	vmov	r0, s15
1a0077ee:	f000 fb69 	bl	1a007ec4 <__aeabi_f2d>
1a0077f2:	4602      	mov	r2, r0
1a0077f4:	460b      	mov	r3, r1
1a0077f6:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a0077fa:	f000 fa05 	bl	1a007c08 <__adddf3>
1a0077fe:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
		control._gzbD += ((mpu9250GetGyroZ_rads() + control._gzb)/control._numSamples);
1a007802:	f7ff ffa7 	bl	1a007754 <mpu9250GetGyroZ_rads>
1a007806:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
1a00780a:	ee30 0a27 	vadd.f32	s0, s0, s15
1a00780e:	eec0 7a08 	vdiv.f32	s15, s0, s16
1a007812:	ee17 0a90 	vmov	r0, s15
1a007816:	f000 fb55 	bl	1a007ec4 <__aeabi_f2d>
1a00781a:	4602      	mov	r2, r0
1a00781c:	460b      	mov	r3, r1
1a00781e:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a007822:	f000 f9f1 	bl	1a007c08 <__adddf3>
1a007826:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
		delay(20);
1a00782a:	2014      	movs	r0, #20
1a00782c:	2100      	movs	r1, #0
1a00782e:	f7ff fbfb 	bl	1a007028 <delay>
	for (uint8_t i=0; i < control._numSamples; i++) {
1a007832:	3501      	adds	r5, #1
1a007834:	b2ed      	uxtb	r5, r5
1a007836:	4b20      	ldr	r3, [pc, #128]	; (1a0078b8 <mpu9250CalibrateGyro+0x158>)
1a007838:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
1a00783c:	42ab      	cmp	r3, r5
1a00783e:	d8af      	bhi.n	1a0077a0 <mpu9250CalibrateGyro+0x40>
	control._gxb = (float)control._gxbD;
1a007840:	4c1d      	ldr	r4, [pc, #116]	; (1a0078b8 <mpu9250CalibrateGyro+0x158>)
1a007842:	e9d4 011a 	ldrd	r0, r1, [r4, #104]	; 0x68
1a007846:	f000 fb95 	bl	1a007f74 <__aeabi_d2f>
1a00784a:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	control._gyb = (float)control._gybD;
1a00784e:	e9d4 011c 	ldrd	r0, r1, [r4, #112]	; 0x70
1a007852:	f000 fb8f 	bl	1a007f74 <__aeabi_d2f>
1a007856:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
	control._gzb = (float)control._gzbD;
1a00785a:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
1a00785e:	f000 fb89 	bl	1a007f74 <__aeabi_d2f>
1a007862:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
	if (mpu9250SetGyroRange(control._gyroRange) < 0) {
1a007866:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
1a00786a:	f7ff fd03 	bl	1a007274 <mpu9250SetGyroRange>
1a00786e:	2800      	cmp	r0, #0
1a007870:	db1b      	blt.n	1a0078aa <mpu9250CalibrateGyro+0x14a>
	if (mpu9250SetDlpfBandwidth(control._bandwidth) < 0) {
1a007872:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
1a007876:	f7ff fd47 	bl	1a007308 <mpu9250SetDlpfBandwidth>
1a00787a:	2800      	cmp	r0, #0
1a00787c:	db18      	blt.n	1a0078b0 <mpu9250CalibrateGyro+0x150>
	if (mpu9250SetSrd(control._srd) < 0) {
1a00787e:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
1a007882:	f7ff fdbd 	bl	1a007400 <mpu9250SetSrd>
1a007886:	2800      	cmp	r0, #0
1a007888:	db03      	blt.n	1a007892 <mpu9250CalibrateGyro+0x132>
	return 1;
1a00788a:	2001      	movs	r0, #1
}
1a00788c:	ecbd 8b02 	vpop	{d8}
1a007890:	bd38      	pop	{r3, r4, r5, pc}
		return -6;
1a007892:	f06f 0005 	mvn.w	r0, #5
1a007896:	e7f9      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
		return -1;
1a007898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00789c:	e7f6      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
		return -2;
1a00789e:	f06f 0001 	mvn.w	r0, #1
1a0078a2:	e7f3      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
		return -3;
1a0078a4:	f06f 0002 	mvn.w	r0, #2
1a0078a8:	e7f0      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
		return -4;
1a0078aa:	f06f 0003 	mvn.w	r0, #3
1a0078ae:	e7ed      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
		return -5;
1a0078b0:	f06f 0004 	mvn.w	r0, #4
1a0078b4:	e7ea      	b.n	1a00788c <mpu9250CalibrateGyro+0x12c>
1a0078b6:	bf00      	nop
1a0078b8:	10003498 	.word	0x10003498

1a0078bc <mpu9250Init>:
{
1a0078bc:	b510      	push	{r4, lr}
1a0078be:	4604      	mov	r4, r0
	mpu9250InitializeControlStructure();
1a0078c0:	f7ff fbce 	bl	1a007060 <mpu9250InitializeControlStructure>
	control.address = address;
1a0078c4:	4ba2      	ldr	r3, [pc, #648]	; (1a007b50 <mpu9250Init+0x294>)
1a0078c6:	701c      	strb	r4, [r3, #0]
	i2cInit(I2C0, MPU9250_I2C_RATE);
1a0078c8:	49a2      	ldr	r1, [pc, #648]	; (1a007b54 <mpu9250Init+0x298>)
1a0078ca:	2000      	movs	r0, #0
1a0078cc:	f7ff f9ec 	bl	1a006ca8 <i2cInit>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a0078d0:	2101      	movs	r1, #1
1a0078d2:	206b      	movs	r0, #107	; 0x6b
1a0078d4:	f7ff fc2e 	bl	1a007134 <mpu9250WriteRegister>
1a0078d8:	2800      	cmp	r0, #0
1a0078da:	f2c0 8100 	blt.w	1a007ade <mpu9250Init+0x222>
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0078de:	2120      	movs	r1, #32
1a0078e0:	206a      	movs	r0, #106	; 0x6a
1a0078e2:	f7ff fc27 	bl	1a007134 <mpu9250WriteRegister>
1a0078e6:	2800      	cmp	r0, #0
1a0078e8:	f2c0 80fc 	blt.w	1a007ae4 <mpu9250Init+0x228>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0078ec:	210d      	movs	r1, #13
1a0078ee:	2024      	movs	r0, #36	; 0x24
1a0078f0:	f7ff fc20 	bl	1a007134 <mpu9250WriteRegister>
1a0078f4:	2800      	cmp	r0, #0
1a0078f6:	f2c0 80f8 	blt.w	1a007aea <mpu9250Init+0x22e>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN);
1a0078fa:	2100      	movs	r1, #0
1a0078fc:	200a      	movs	r0, #10
1a0078fe:	f7ff fc7d 	bl	1a0071fc <mpu9250WriteAK8963Register>
	mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_PWR_RESET);
1a007902:	2180      	movs	r1, #128	; 0x80
1a007904:	206b      	movs	r0, #107	; 0x6b
1a007906:	f7ff fc15 	bl	1a007134 <mpu9250WriteRegister>
	delay(1);
1a00790a:	2001      	movs	r0, #1
1a00790c:	2100      	movs	r1, #0
1a00790e:	f7ff fb8b 	bl	1a007028 <delay>
	mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL2, MPU9250_AK8963_RESET);
1a007912:	2101      	movs	r1, #1
1a007914:	200b      	movs	r0, #11
1a007916:	f7ff fc71 	bl	1a0071fc <mpu9250WriteAK8963Register>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a00791a:	2101      	movs	r1, #1
1a00791c:	206b      	movs	r0, #107	; 0x6b
1a00791e:	f7ff fc09 	bl	1a007134 <mpu9250WriteRegister>
1a007922:	2800      	cmp	r0, #0
1a007924:	f2c0 80e4 	blt.w	1a007af0 <mpu9250Init+0x234>
	if ((mpu9250WhoAmI() != 113) && (mpu9250WhoAmI() != 115)) {
1a007928:	f7ff fbf4 	bl	1a007114 <mpu9250WhoAmI>
1a00792c:	2871      	cmp	r0, #113	; 0x71
1a00792e:	d004      	beq.n	1a00793a <mpu9250Init+0x7e>
1a007930:	f7ff fbf0 	bl	1a007114 <mpu9250WhoAmI>
1a007934:	2873      	cmp	r0, #115	; 0x73
1a007936:	f040 80de 	bne.w	1a007af6 <mpu9250Init+0x23a>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_2, MPU9250_SEN_ENABLE) < 0) {
1a00793a:	2100      	movs	r1, #0
1a00793c:	206c      	movs	r0, #108	; 0x6c
1a00793e:	f7ff fbf9 	bl	1a007134 <mpu9250WriteRegister>
1a007942:	2800      	cmp	r0, #0
1a007944:	f2c0 80da 	blt.w	1a007afc <mpu9250Init+0x240>
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG, MPU9250_ACCEL_FS_SEL_16G) < 0) {
1a007948:	2118      	movs	r1, #24
1a00794a:	201c      	movs	r0, #28
1a00794c:	f7ff fbf2 	bl	1a007134 <mpu9250WriteRegister>
1a007950:	2800      	cmp	r0, #0
1a007952:	f2c0 80d6 	blt.w	1a007b02 <mpu9250Init+0x246>
	control._accelScale = MPU9250_G * 16.0f / 32767.5f; // setting the accel scale to 16G
1a007956:	4b7e      	ldr	r3, [pc, #504]	; (1a007b50 <mpu9250Init+0x294>)
1a007958:	4a7f      	ldr	r2, [pc, #508]	; (1a007b58 <mpu9250Init+0x29c>)
1a00795a:	605a      	str	r2, [r3, #4]
	control._accelRange = MPU9250_ACCEL_RANGE_16G;
1a00795c:	2203      	movs	r2, #3
1a00795e:	f883 2020 	strb.w	r2, [r3, #32]
	if (mpu9250WriteRegister(MPU9250_GYRO_CONFIG, MPU9250_GYRO_FS_SEL_2000DPS) < 0) {
1a007962:	2118      	movs	r1, #24
1a007964:	201b      	movs	r0, #27
1a007966:	f7ff fbe5 	bl	1a007134 <mpu9250WriteRegister>
1a00796a:	2800      	cmp	r0, #0
1a00796c:	f2c0 80cc 	blt.w	1a007b08 <mpu9250Init+0x24c>
	control._gyroScale = 2000.0f / 32767.5f * MPU9250_D2R; 
1a007970:	4b77      	ldr	r3, [pc, #476]	; (1a007b50 <mpu9250Init+0x294>)
1a007972:	4a7a      	ldr	r2, [pc, #488]	; (1a007b5c <mpu9250Init+0x2a0>)
1a007974:	609a      	str	r2, [r3, #8]
	control._gyroRange = MPU9250_GYRO_RANGE_2000DPS;
1a007976:	2203      	movs	r2, #3
1a007978:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	if (mpu9250WriteRegister(MPU9250_ACCEL_CONFIG2, MPU9250_ACCEL_DLPF_184) < 0) {
1a00797c:	2101      	movs	r1, #1
1a00797e:	201d      	movs	r0, #29
1a007980:	f7ff fbd8 	bl	1a007134 <mpu9250WriteRegister>
1a007984:	2800      	cmp	r0, #0
1a007986:	f2c0 80c2 	blt.w	1a007b0e <mpu9250Init+0x252>
	if (mpu9250WriteRegister(MPU9250_CONFIG, MPU9250_GYRO_DLPF_184) < 0) { 
1a00798a:	2101      	movs	r1, #1
1a00798c:	201a      	movs	r0, #26
1a00798e:	f7ff fbd1 	bl	1a007134 <mpu9250WriteRegister>
1a007992:	2800      	cmp	r0, #0
1a007994:	f2c0 80be 	blt.w	1a007b14 <mpu9250Init+0x258>
	control._bandwidth = MPU9250_DLPF_BANDWIDTH_184HZ;
1a007998:	2100      	movs	r1, #0
1a00799a:	4b6d      	ldr	r3, [pc, #436]	; (1a007b50 <mpu9250Init+0x294>)
1a00799c:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
	if (mpu9250WriteRegister(MPU9250_SMPDIV, 0x00) < 0) {
1a0079a0:	2019      	movs	r0, #25
1a0079a2:	f7ff fbc7 	bl	1a007134 <mpu9250WriteRegister>
1a0079a6:	2800      	cmp	r0, #0
1a0079a8:	f2c0 80b7 	blt.w	1a007b1a <mpu9250Init+0x25e>
	control._srd = 0;
1a0079ac:	4b68      	ldr	r3, [pc, #416]	; (1a007b50 <mpu9250Init+0x294>)
1a0079ae:	2200      	movs	r2, #0
1a0079b0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	if (mpu9250WriteRegister(MPU9250_USER_CTRL, MPU9250_I2C_MST_EN) < 0) {
1a0079b4:	2120      	movs	r1, #32
1a0079b6:	206a      	movs	r0, #106	; 0x6a
1a0079b8:	f7ff fbbc 	bl	1a007134 <mpu9250WriteRegister>
1a0079bc:	2800      	cmp	r0, #0
1a0079be:	f2c0 80af 	blt.w	1a007b20 <mpu9250Init+0x264>
	if (mpu9250WriteRegister(MPU9250_I2C_MST_CTRL, MPU9250_I2C_MST_CLK) < 0) {
1a0079c2:	210d      	movs	r1, #13
1a0079c4:	2024      	movs	r0, #36	; 0x24
1a0079c6:	f7ff fbb5 	bl	1a007134 <mpu9250WriteRegister>
1a0079ca:	2800      	cmp	r0, #0
1a0079cc:	f2c0 80ab 	blt.w	1a007b26 <mpu9250Init+0x26a>
	if (mpu9250WhoAmIAK8963() != 72) {
1a0079d0:	f7ff fc04 	bl	1a0071dc <mpu9250WhoAmIAK8963>
1a0079d4:	2848      	cmp	r0, #72	; 0x48
1a0079d6:	f040 80a9 	bne.w	1a007b2c <mpu9250Init+0x270>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a0079da:	2100      	movs	r1, #0
1a0079dc:	200a      	movs	r0, #10
1a0079de:	f7ff fc0d 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a0079e2:	2800      	cmp	r0, #0
1a0079e4:	f2c0 80a5 	blt.w	1a007b32 <mpu9250Init+0x276>
	delay(100); // long wait between AK8963 mode changes
1a0079e8:	2064      	movs	r0, #100	; 0x64
1a0079ea:	2100      	movs	r1, #0
1a0079ec:	f7ff fb1c 	bl	1a007028 <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_FUSE_ROM) < 0) {
1a0079f0:	210f      	movs	r1, #15
1a0079f2:	200a      	movs	r0, #10
1a0079f4:	f7ff fc02 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a0079f8:	2800      	cmp	r0, #0
1a0079fa:	f2c0 809d 	blt.w	1a007b38 <mpu9250Init+0x27c>
	delay(100); // long wait between AK8963 mode changes
1a0079fe:	2064      	movs	r0, #100	; 0x64
1a007a00:	2100      	movs	r1, #0
1a007a02:	f7ff fb11 	bl	1a007028 <delay>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_ASA, 3);
1a007a06:	2103      	movs	r1, #3
1a007a08:	2010      	movs	r0, #16
1a007a0a:	f7ff fbb9 	bl	1a007180 <mpu9250ReadAK8963Registers>
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a0e:	4b50      	ldr	r3, [pc, #320]	; (1a007b50 <mpu9250Init+0x294>)
1a007a10:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
1a007a14:	ee07 2a10 	vmov	s14, r2
1a007a18:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a007a1c:	eddf 4a50 	vldr	s9, [pc, #320]	; 1a007b60 <mpu9250Init+0x2a4>
1a007a20:	ee37 7a64 	vsub.f32	s14, s14, s9
1a007a24:	ed9f 5a4f 	vldr	s10, [pc, #316]	; 1a007b64 <mpu9250Init+0x2a8>
1a007a28:	ee27 7a05 	vmul.f32	s14, s14, s10
1a007a2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
1a007a30:	ee37 7a25 	vadd.f32	s14, s14, s11
1a007a34:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 1a007b68 <mpu9250Init+0x2ac>
1a007a38:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a007a3c:	eddf 6a4b 	vldr	s13, [pc, #300]	; 1a007b6c <mpu9250Init+0x2b0>
1a007a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleX = ((((float) control._buffer[0]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a44:	edc3 7a03 	vstr	s15, [r3, #12]
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a48:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
1a007a4c:	ee07 2a10 	vmov	s14, r2
1a007a50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a007a54:	ee37 7a64 	vsub.f32	s14, s14, s9
1a007a58:	ee27 7a05 	vmul.f32	s14, s14, s10
1a007a5c:	ee37 7a25 	vadd.f32	s14, s14, s11
1a007a60:	ee27 7a06 	vmul.f32	s14, s14, s12
			/ 32760.0f; // micro Tesla
1a007a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
	control._magScaleY = ((((float) control._buffer[1]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a68:	edc3 7a04 	vstr	s15, [r3, #16]
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a6c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
1a007a70:	ee07 2a90 	vmov	s15, r2
1a007a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a007a78:	ee77 7ae4 	vsub.f32	s15, s15, s9
1a007a7c:	ee67 7a85 	vmul.f32	s15, s15, s10
1a007a80:	ee77 7aa5 	vadd.f32	s15, s15, s11
1a007a84:	ee67 7a86 	vmul.f32	s15, s15, s12
			/ 32760.0f; // micro Tesla
1a007a88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	control._magScaleZ = ((((float) control._buffer[2]) - 128.0f) / (256.0f) + 1.0f) * 4912.0f
1a007a8c:	ed83 7a05 	vstr	s14, [r3, #20]
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_PWR_DOWN) < 0) {
1a007a90:	2100      	movs	r1, #0
1a007a92:	200a      	movs	r0, #10
1a007a94:	f7ff fbb2 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a007a98:	2800      	cmp	r0, #0
1a007a9a:	db50      	blt.n	1a007b3e <mpu9250Init+0x282>
	delay(100); // long wait between AK8963 mode changes
1a007a9c:	2064      	movs	r0, #100	; 0x64
1a007a9e:	2100      	movs	r1, #0
1a007aa0:	f7ff fac2 	bl	1a007028 <delay>
	if (mpu9250WriteAK8963Register(MPU9250_AK8963_CNTL1, MPU9250_AK8963_CNT_MEAS2) < 0) {
1a007aa4:	2116      	movs	r1, #22
1a007aa6:	200a      	movs	r0, #10
1a007aa8:	f7ff fba8 	bl	1a0071fc <mpu9250WriteAK8963Register>
1a007aac:	2800      	cmp	r0, #0
1a007aae:	db49      	blt.n	1a007b44 <mpu9250Init+0x288>
	delay(100); // long wait between AK8963 mode changes
1a007ab0:	2064      	movs	r0, #100	; 0x64
1a007ab2:	2100      	movs	r1, #0
1a007ab4:	f7ff fab8 	bl	1a007028 <delay>
	if (mpu9250WriteRegister(MPU9250_PWR_MGMNT_1, MPU9250_CLOCK_SEL_PLL) < 0) {
1a007ab8:	2101      	movs	r1, #1
1a007aba:	206b      	movs	r0, #107	; 0x6b
1a007abc:	f7ff fb3a 	bl	1a007134 <mpu9250WriteRegister>
1a007ac0:	2800      	cmp	r0, #0
1a007ac2:	db42      	blt.n	1a007b4a <mpu9250Init+0x28e>
	mpu9250ReadAK8963Registers(MPU9250_AK8963_HXL, 7);
1a007ac4:	2107      	movs	r1, #7
1a007ac6:	2003      	movs	r0, #3
1a007ac8:	f7ff fb5a 	bl	1a007180 <mpu9250ReadAK8963Registers>
	if (mpu9250CalibrateGyro() < 0) {
1a007acc:	f7ff fe48 	bl	1a007760 <mpu9250CalibrateGyro>
1a007ad0:	2800      	cmp	r0, #0
1a007ad2:	db01      	blt.n	1a007ad8 <mpu9250Init+0x21c>
	return 1;
1a007ad4:	2001      	movs	r0, #1
}
1a007ad6:	bd10      	pop	{r4, pc}
		return -20;
1a007ad8:	f06f 0013 	mvn.w	r0, #19
1a007adc:	e7fb      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -1;
1a007ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007ae2:	e7f8      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -2;
1a007ae4:	f06f 0001 	mvn.w	r0, #1
1a007ae8:	e7f5      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -3;
1a007aea:	f06f 0002 	mvn.w	r0, #2
1a007aee:	e7f2      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -4;
1a007af0:	f06f 0003 	mvn.w	r0, #3
1a007af4:	e7ef      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -5;
1a007af6:	f06f 0004 	mvn.w	r0, #4
1a007afa:	e7ec      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -6;
1a007afc:	f06f 0005 	mvn.w	r0, #5
1a007b00:	e7e9      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -7;
1a007b02:	f06f 0006 	mvn.w	r0, #6
1a007b06:	e7e6      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -8;
1a007b08:	f06f 0007 	mvn.w	r0, #7
1a007b0c:	e7e3      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -9;
1a007b0e:	f06f 0008 	mvn.w	r0, #8
1a007b12:	e7e0      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -10;
1a007b14:	f06f 0009 	mvn.w	r0, #9
1a007b18:	e7dd      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -11;
1a007b1a:	f06f 000a 	mvn.w	r0, #10
1a007b1e:	e7da      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -12;
1a007b20:	f06f 000b 	mvn.w	r0, #11
1a007b24:	e7d7      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -13;
1a007b26:	f06f 000c 	mvn.w	r0, #12
1a007b2a:	e7d4      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -14;
1a007b2c:	f06f 000d 	mvn.w	r0, #13
1a007b30:	e7d1      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -15;
1a007b32:	f06f 000e 	mvn.w	r0, #14
1a007b36:	e7ce      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -16;
1a007b38:	f06f 000f 	mvn.w	r0, #15
1a007b3c:	e7cb      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -17;
1a007b3e:	f06f 0010 	mvn.w	r0, #16
1a007b42:	e7c8      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -18;
1a007b44:	f06f 0011 	mvn.w	r0, #17
1a007b48:	e7c5      	b.n	1a007ad6 <mpu9250Init+0x21a>
		return -19;
1a007b4a:	f06f 0012 	mvn.w	r0, #18
1a007b4e:	e7c2      	b.n	1a007ad6 <mpu9250Init+0x21a>
1a007b50:	10003498 	.word	0x10003498
1a007b54:	00061a80 	.word	0x00061a80
1a007b58:	3b9cea16 	.word	0x3b9cea16
1a007b5c:	3a8ba0e4 	.word	0x3a8ba0e4
1a007b60:	43000000 	.word	0x43000000
1a007b64:	3b800000 	.word	0x3b800000
1a007b68:	45998000 	.word	0x45998000
1a007b6c:	46fff000 	.word	0x46fff000

1a007b70 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a007b70:	2301      	movs	r3, #1
1a007b72:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a007b76:	4b01      	ldr	r3, [pc, #4]	; (1a007b7c <clearInterrupt+0xc>)
1a007b78:	6258      	str	r0, [r3, #36]	; 0x24
}
1a007b7a:	4770      	bx	lr
1a007b7c:	40087000 	.word	0x40087000

1a007b80 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a007b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a007b82:	4b12      	ldr	r3, [pc, #72]	; (1a007bcc <serveInterrupt+0x4c>)
1a007b84:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a007b86:	4b12      	ldr	r3, [pc, #72]	; (1a007bd0 <serveInterrupt+0x50>)
1a007b88:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a007b8a:	2301      	movs	r3, #1
1a007b8c:	4083      	lsls	r3, r0
1a007b8e:	420b      	tst	r3, r1
1a007b90:	d111      	bne.n	1a007bb6 <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a007b92:	4910      	ldr	r1, [pc, #64]	; (1a007bd4 <serveInterrupt+0x54>)
1a007b94:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a007b96:	4d10      	ldr	r5, [pc, #64]	; (1a007bd8 <serveInterrupt+0x58>)
1a007b98:	0051      	lsls	r1, r2, #1
1a007b9a:	188f      	adds	r7, r1, r2
1a007b9c:	00fc      	lsls	r4, r7, #3
1a007b9e:	4627      	mov	r7, r4
1a007ba0:	442c      	add	r4, r5
1a007ba2:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a007ba4:	6864      	ldr	r4, [r4, #4]
1a007ba6:	1b36      	subs	r6, r6, r4
1a007ba8:	443d      	add	r5, r7
1a007baa:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a007bac:	4a08      	ldr	r2, [pc, #32]	; (1a007bd0 <serveInterrupt+0x50>)
1a007bae:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a007bb0:	f7ff ffde 	bl	1a007b70 <clearInterrupt>
}
1a007bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007bb6:	4907      	ldr	r1, [pc, #28]	; (1a007bd4 <serveInterrupt+0x54>)
1a007bb8:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a007bba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a007bbe:	00d1      	lsls	r1, r2, #3
1a007bc0:	4a05      	ldr	r2, [pc, #20]	; (1a007bd8 <serveInterrupt+0x58>)
1a007bc2:	440a      	add	r2, r1
1a007bc4:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a007bc6:	4a02      	ldr	r2, [pc, #8]	; (1a007bd0 <serveInterrupt+0x50>)
1a007bc8:	61d3      	str	r3, [r2, #28]
1a007bca:	e7f1      	b.n	1a007bb0 <serveInterrupt+0x30>
1a007bcc:	1a009fd4 	.word	0x1a009fd4
1a007bd0:	40087000 	.word	0x40087000
1a007bd4:	40084000 	.word	0x40084000
1a007bd8:	10000058 	.word	0x10000058

1a007bdc <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a007bdc:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a007bde:	2000      	movs	r0, #0
1a007be0:	f7ff ffce 	bl	1a007b80 <serveInterrupt>
}
1a007be4:	bd08      	pop	{r3, pc}

1a007be6 <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a007be6:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a007be8:	2001      	movs	r0, #1
1a007bea:	f7ff ffc9 	bl	1a007b80 <serveInterrupt>
}
1a007bee:	bd08      	pop	{r3, pc}

1a007bf0 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a007bf0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a007bf2:	2002      	movs	r0, #2
1a007bf4:	f7ff ffc4 	bl	1a007b80 <serveInterrupt>
}
1a007bf8:	bd08      	pop	{r3, pc}
1a007bfa:	Address 0x000000001a007bfa is out of bounds.


1a007bfc <__aeabi_drsub>:
1a007bfc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a007c00:	e002      	b.n	1a007c08 <__adddf3>
1a007c02:	bf00      	nop

1a007c04 <__aeabi_dsub>:
1a007c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a007c08 <__adddf3>:
1a007c08:	b530      	push	{r4, r5, lr}
1a007c0a:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a007c0e:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a007c12:	ea94 0f05 	teq	r4, r5
1a007c16:	bf08      	it	eq
1a007c18:	ea90 0f02 	teqeq	r0, r2
1a007c1c:	bf1f      	itttt	ne
1a007c1e:	ea54 0c00 	orrsne.w	ip, r4, r0
1a007c22:	ea55 0c02 	orrsne.w	ip, r5, r2
1a007c26:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a007c2a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a007c2e:	f000 80e2 	beq.w	1a007df6 <__adddf3+0x1ee>
1a007c32:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a007c36:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a007c3a:	bfb8      	it	lt
1a007c3c:	426d      	neglt	r5, r5
1a007c3e:	dd0c      	ble.n	1a007c5a <__adddf3+0x52>
1a007c40:	442c      	add	r4, r5
1a007c42:	ea80 0202 	eor.w	r2, r0, r2
1a007c46:	ea81 0303 	eor.w	r3, r1, r3
1a007c4a:	ea82 0000 	eor.w	r0, r2, r0
1a007c4e:	ea83 0101 	eor.w	r1, r3, r1
1a007c52:	ea80 0202 	eor.w	r2, r0, r2
1a007c56:	ea81 0303 	eor.w	r3, r1, r3
1a007c5a:	2d36      	cmp	r5, #54	; 0x36
1a007c5c:	bf88      	it	hi
1a007c5e:	bd30      	pophi	{r4, r5, pc}
1a007c60:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a007c64:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a007c68:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a007c6c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a007c70:	d002      	beq.n	1a007c78 <__adddf3+0x70>
1a007c72:	4240      	negs	r0, r0
1a007c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a007c78:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a007c7c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a007c80:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a007c84:	d002      	beq.n	1a007c8c <__adddf3+0x84>
1a007c86:	4252      	negs	r2, r2
1a007c88:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a007c8c:	ea94 0f05 	teq	r4, r5
1a007c90:	f000 80a7 	beq.w	1a007de2 <__adddf3+0x1da>
1a007c94:	f1a4 0401 	sub.w	r4, r4, #1
1a007c98:	f1d5 0e20 	rsbs	lr, r5, #32
1a007c9c:	db0d      	blt.n	1a007cba <__adddf3+0xb2>
1a007c9e:	fa02 fc0e 	lsl.w	ip, r2, lr
1a007ca2:	fa22 f205 	lsr.w	r2, r2, r5
1a007ca6:	1880      	adds	r0, r0, r2
1a007ca8:	f141 0100 	adc.w	r1, r1, #0
1a007cac:	fa03 f20e 	lsl.w	r2, r3, lr
1a007cb0:	1880      	adds	r0, r0, r2
1a007cb2:	fa43 f305 	asr.w	r3, r3, r5
1a007cb6:	4159      	adcs	r1, r3
1a007cb8:	e00e      	b.n	1a007cd8 <__adddf3+0xd0>
1a007cba:	f1a5 0520 	sub.w	r5, r5, #32
1a007cbe:	f10e 0e20 	add.w	lr, lr, #32
1a007cc2:	2a01      	cmp	r2, #1
1a007cc4:	fa03 fc0e 	lsl.w	ip, r3, lr
1a007cc8:	bf28      	it	cs
1a007cca:	f04c 0c02 	orrcs.w	ip, ip, #2
1a007cce:	fa43 f305 	asr.w	r3, r3, r5
1a007cd2:	18c0      	adds	r0, r0, r3
1a007cd4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a007cd8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a007cdc:	d507      	bpl.n	1a007cee <__adddf3+0xe6>
1a007cde:	f04f 0e00 	mov.w	lr, #0
1a007ce2:	f1dc 0c00 	rsbs	ip, ip, #0
1a007ce6:	eb7e 0000 	sbcs.w	r0, lr, r0
1a007cea:	eb6e 0101 	sbc.w	r1, lr, r1
1a007cee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a007cf2:	d31b      	bcc.n	1a007d2c <__adddf3+0x124>
1a007cf4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a007cf8:	d30c      	bcc.n	1a007d14 <__adddf3+0x10c>
1a007cfa:	0849      	lsrs	r1, r1, #1
1a007cfc:	ea5f 0030 	movs.w	r0, r0, rrx
1a007d00:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a007d04:	f104 0401 	add.w	r4, r4, #1
1a007d08:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a007d0c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a007d10:	f080 809a 	bcs.w	1a007e48 <__adddf3+0x240>
1a007d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a007d18:	bf08      	it	eq
1a007d1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a007d1e:	f150 0000 	adcs.w	r0, r0, #0
1a007d22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a007d26:	ea41 0105 	orr.w	r1, r1, r5
1a007d2a:	bd30      	pop	{r4, r5, pc}
1a007d2c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a007d30:	4140      	adcs	r0, r0
1a007d32:	eb41 0101 	adc.w	r1, r1, r1
1a007d36:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a007d3a:	f1a4 0401 	sub.w	r4, r4, #1
1a007d3e:	d1e9      	bne.n	1a007d14 <__adddf3+0x10c>
1a007d40:	f091 0f00 	teq	r1, #0
1a007d44:	bf04      	itt	eq
1a007d46:	4601      	moveq	r1, r0
1a007d48:	2000      	moveq	r0, #0
1a007d4a:	fab1 f381 	clz	r3, r1
1a007d4e:	bf08      	it	eq
1a007d50:	3320      	addeq	r3, #32
1a007d52:	f1a3 030b 	sub.w	r3, r3, #11
1a007d56:	f1b3 0220 	subs.w	r2, r3, #32
1a007d5a:	da0c      	bge.n	1a007d76 <__adddf3+0x16e>
1a007d5c:	320c      	adds	r2, #12
1a007d5e:	dd08      	ble.n	1a007d72 <__adddf3+0x16a>
1a007d60:	f102 0c14 	add.w	ip, r2, #20
1a007d64:	f1c2 020c 	rsb	r2, r2, #12
1a007d68:	fa01 f00c 	lsl.w	r0, r1, ip
1a007d6c:	fa21 f102 	lsr.w	r1, r1, r2
1a007d70:	e00c      	b.n	1a007d8c <__adddf3+0x184>
1a007d72:	f102 0214 	add.w	r2, r2, #20
1a007d76:	bfd8      	it	le
1a007d78:	f1c2 0c20 	rsble	ip, r2, #32
1a007d7c:	fa01 f102 	lsl.w	r1, r1, r2
1a007d80:	fa20 fc0c 	lsr.w	ip, r0, ip
1a007d84:	bfdc      	itt	le
1a007d86:	ea41 010c 	orrle.w	r1, r1, ip
1a007d8a:	4090      	lslle	r0, r2
1a007d8c:	1ae4      	subs	r4, r4, r3
1a007d8e:	bfa2      	ittt	ge
1a007d90:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a007d94:	4329      	orrge	r1, r5
1a007d96:	bd30      	popge	{r4, r5, pc}
1a007d98:	ea6f 0404 	mvn.w	r4, r4
1a007d9c:	3c1f      	subs	r4, #31
1a007d9e:	da1c      	bge.n	1a007dda <__adddf3+0x1d2>
1a007da0:	340c      	adds	r4, #12
1a007da2:	dc0e      	bgt.n	1a007dc2 <__adddf3+0x1ba>
1a007da4:	f104 0414 	add.w	r4, r4, #20
1a007da8:	f1c4 0220 	rsb	r2, r4, #32
1a007dac:	fa20 f004 	lsr.w	r0, r0, r4
1a007db0:	fa01 f302 	lsl.w	r3, r1, r2
1a007db4:	ea40 0003 	orr.w	r0, r0, r3
1a007db8:	fa21 f304 	lsr.w	r3, r1, r4
1a007dbc:	ea45 0103 	orr.w	r1, r5, r3
1a007dc0:	bd30      	pop	{r4, r5, pc}
1a007dc2:	f1c4 040c 	rsb	r4, r4, #12
1a007dc6:	f1c4 0220 	rsb	r2, r4, #32
1a007dca:	fa20 f002 	lsr.w	r0, r0, r2
1a007dce:	fa01 f304 	lsl.w	r3, r1, r4
1a007dd2:	ea40 0003 	orr.w	r0, r0, r3
1a007dd6:	4629      	mov	r1, r5
1a007dd8:	bd30      	pop	{r4, r5, pc}
1a007dda:	fa21 f004 	lsr.w	r0, r1, r4
1a007dde:	4629      	mov	r1, r5
1a007de0:	bd30      	pop	{r4, r5, pc}
1a007de2:	f094 0f00 	teq	r4, #0
1a007de6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a007dea:	bf06      	itte	eq
1a007dec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a007df0:	3401      	addeq	r4, #1
1a007df2:	3d01      	subne	r5, #1
1a007df4:	e74e      	b.n	1a007c94 <__adddf3+0x8c>
1a007df6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a007dfa:	bf18      	it	ne
1a007dfc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a007e00:	d029      	beq.n	1a007e56 <__adddf3+0x24e>
1a007e02:	ea94 0f05 	teq	r4, r5
1a007e06:	bf08      	it	eq
1a007e08:	ea90 0f02 	teqeq	r0, r2
1a007e0c:	d005      	beq.n	1a007e1a <__adddf3+0x212>
1a007e0e:	ea54 0c00 	orrs.w	ip, r4, r0
1a007e12:	bf04      	itt	eq
1a007e14:	4619      	moveq	r1, r3
1a007e16:	4610      	moveq	r0, r2
1a007e18:	bd30      	pop	{r4, r5, pc}
1a007e1a:	ea91 0f03 	teq	r1, r3
1a007e1e:	bf1e      	ittt	ne
1a007e20:	2100      	movne	r1, #0
1a007e22:	2000      	movne	r0, #0
1a007e24:	bd30      	popne	{r4, r5, pc}
1a007e26:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a007e2a:	d105      	bne.n	1a007e38 <__adddf3+0x230>
1a007e2c:	0040      	lsls	r0, r0, #1
1a007e2e:	4149      	adcs	r1, r1
1a007e30:	bf28      	it	cs
1a007e32:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a007e36:	bd30      	pop	{r4, r5, pc}
1a007e38:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a007e3c:	bf3c      	itt	cc
1a007e3e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a007e42:	bd30      	popcc	{r4, r5, pc}
1a007e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a007e48:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a007e4c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a007e50:	f04f 0000 	mov.w	r0, #0
1a007e54:	bd30      	pop	{r4, r5, pc}
1a007e56:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a007e5a:	bf1a      	itte	ne
1a007e5c:	4619      	movne	r1, r3
1a007e5e:	4610      	movne	r0, r2
1a007e60:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a007e64:	bf1c      	itt	ne
1a007e66:	460b      	movne	r3, r1
1a007e68:	4602      	movne	r2, r0
1a007e6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a007e6e:	bf06      	itte	eq
1a007e70:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a007e74:	ea91 0f03 	teqeq	r1, r3
1a007e78:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a007e7c:	bd30      	pop	{r4, r5, pc}
1a007e7e:	bf00      	nop

1a007e80 <__aeabi_ui2d>:
1a007e80:	f090 0f00 	teq	r0, #0
1a007e84:	bf04      	itt	eq
1a007e86:	2100      	moveq	r1, #0
1a007e88:	4770      	bxeq	lr
1a007e8a:	b530      	push	{r4, r5, lr}
1a007e8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a007e90:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a007e94:	f04f 0500 	mov.w	r5, #0
1a007e98:	f04f 0100 	mov.w	r1, #0
1a007e9c:	e750      	b.n	1a007d40 <__adddf3+0x138>
1a007e9e:	bf00      	nop

1a007ea0 <__aeabi_i2d>:
1a007ea0:	f090 0f00 	teq	r0, #0
1a007ea4:	bf04      	itt	eq
1a007ea6:	2100      	moveq	r1, #0
1a007ea8:	4770      	bxeq	lr
1a007eaa:	b530      	push	{r4, r5, lr}
1a007eac:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a007eb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a007eb4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a007eb8:	bf48      	it	mi
1a007eba:	4240      	negmi	r0, r0
1a007ebc:	f04f 0100 	mov.w	r1, #0
1a007ec0:	e73e      	b.n	1a007d40 <__adddf3+0x138>
1a007ec2:	bf00      	nop

1a007ec4 <__aeabi_f2d>:
1a007ec4:	0042      	lsls	r2, r0, #1
1a007ec6:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a007eca:	ea4f 0131 	mov.w	r1, r1, rrx
1a007ece:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a007ed2:	bf1f      	itttt	ne
1a007ed4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a007ed8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a007edc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a007ee0:	4770      	bxne	lr
1a007ee2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a007ee6:	bf08      	it	eq
1a007ee8:	4770      	bxeq	lr
1a007eea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a007eee:	bf04      	itt	eq
1a007ef0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a007ef4:	4770      	bxeq	lr
1a007ef6:	b530      	push	{r4, r5, lr}
1a007ef8:	f44f 7460 	mov.w	r4, #896	; 0x380
1a007efc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a007f00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a007f04:	e71c      	b.n	1a007d40 <__adddf3+0x138>
1a007f06:	bf00      	nop

1a007f08 <__aeabi_ul2d>:
1a007f08:	ea50 0201 	orrs.w	r2, r0, r1
1a007f0c:	bf08      	it	eq
1a007f0e:	4770      	bxeq	lr
1a007f10:	b530      	push	{r4, r5, lr}
1a007f12:	f04f 0500 	mov.w	r5, #0
1a007f16:	e00a      	b.n	1a007f2e <__aeabi_l2d+0x16>

1a007f18 <__aeabi_l2d>:
1a007f18:	ea50 0201 	orrs.w	r2, r0, r1
1a007f1c:	bf08      	it	eq
1a007f1e:	4770      	bxeq	lr
1a007f20:	b530      	push	{r4, r5, lr}
1a007f22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a007f26:	d502      	bpl.n	1a007f2e <__aeabi_l2d+0x16>
1a007f28:	4240      	negs	r0, r0
1a007f2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a007f2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a007f32:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a007f36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a007f3a:	f43f aed8 	beq.w	1a007cee <__adddf3+0xe6>
1a007f3e:	f04f 0203 	mov.w	r2, #3
1a007f42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a007f46:	bf18      	it	ne
1a007f48:	3203      	addne	r2, #3
1a007f4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a007f4e:	bf18      	it	ne
1a007f50:	3203      	addne	r2, #3
1a007f52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a007f56:	f1c2 0320 	rsb	r3, r2, #32
1a007f5a:	fa00 fc03 	lsl.w	ip, r0, r3
1a007f5e:	fa20 f002 	lsr.w	r0, r0, r2
1a007f62:	fa01 fe03 	lsl.w	lr, r1, r3
1a007f66:	ea40 000e 	orr.w	r0, r0, lr
1a007f6a:	fa21 f102 	lsr.w	r1, r1, r2
1a007f6e:	4414      	add	r4, r2
1a007f70:	e6bd      	b.n	1a007cee <__adddf3+0xe6>
1a007f72:	bf00      	nop

1a007f74 <__aeabi_d2f>:
1a007f74:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a007f78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a007f7c:	bf24      	itt	cs
1a007f7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a007f82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a007f86:	d90d      	bls.n	1a007fa4 <__aeabi_d2f+0x30>
1a007f88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a007f8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a007f90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a007f94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a007f98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a007f9c:	bf08      	it	eq
1a007f9e:	f020 0001 	biceq.w	r0, r0, #1
1a007fa2:	4770      	bx	lr
1a007fa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a007fa8:	d121      	bne.n	1a007fee <__aeabi_d2f+0x7a>
1a007faa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a007fae:	bfbc      	itt	lt
1a007fb0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a007fb4:	4770      	bxlt	lr
1a007fb6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a007fba:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a007fbe:	f1c2 0218 	rsb	r2, r2, #24
1a007fc2:	f1c2 0c20 	rsb	ip, r2, #32
1a007fc6:	fa10 f30c 	lsls.w	r3, r0, ip
1a007fca:	fa20 f002 	lsr.w	r0, r0, r2
1a007fce:	bf18      	it	ne
1a007fd0:	f040 0001 	orrne.w	r0, r0, #1
1a007fd4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a007fd8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a007fdc:	fa03 fc0c 	lsl.w	ip, r3, ip
1a007fe0:	ea40 000c 	orr.w	r0, r0, ip
1a007fe4:	fa23 f302 	lsr.w	r3, r3, r2
1a007fe8:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a007fec:	e7cc      	b.n	1a007f88 <__aeabi_d2f+0x14>
1a007fee:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a007ff2:	d107      	bne.n	1a008004 <__aeabi_d2f+0x90>
1a007ff4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a007ff8:	bf1e      	ittt	ne
1a007ffa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a007ffe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a008002:	4770      	bxne	lr
1a008004:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a008008:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a00800c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a008010:	4770      	bx	lr
1a008012:	bf00      	nop

1a008014 <__aeabi_uldivmod>:
1a008014:	b953      	cbnz	r3, 1a00802c <__aeabi_uldivmod+0x18>
1a008016:	b94a      	cbnz	r2, 1a00802c <__aeabi_uldivmod+0x18>
1a008018:	2900      	cmp	r1, #0
1a00801a:	bf08      	it	eq
1a00801c:	2800      	cmpeq	r0, #0
1a00801e:	bf1c      	itt	ne
1a008020:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a008024:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a008028:	f000 b972 	b.w	1a008310 <__aeabi_idiv0>
1a00802c:	f1ad 0c08 	sub.w	ip, sp, #8
1a008030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a008034:	f000 f806 	bl	1a008044 <__udivmoddi4>
1a008038:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00803c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a008040:	b004      	add	sp, #16
1a008042:	4770      	bx	lr

1a008044 <__udivmoddi4>:
1a008044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a008048:	9e08      	ldr	r6, [sp, #32]
1a00804a:	4604      	mov	r4, r0
1a00804c:	4688      	mov	r8, r1
1a00804e:	2b00      	cmp	r3, #0
1a008050:	d14b      	bne.n	1a0080ea <__udivmoddi4+0xa6>
1a008052:	428a      	cmp	r2, r1
1a008054:	4615      	mov	r5, r2
1a008056:	d967      	bls.n	1a008128 <__udivmoddi4+0xe4>
1a008058:	fab2 f282 	clz	r2, r2
1a00805c:	b14a      	cbz	r2, 1a008072 <__udivmoddi4+0x2e>
1a00805e:	f1c2 0720 	rsb	r7, r2, #32
1a008062:	fa01 f302 	lsl.w	r3, r1, r2
1a008066:	fa20 f707 	lsr.w	r7, r0, r7
1a00806a:	4095      	lsls	r5, r2
1a00806c:	ea47 0803 	orr.w	r8, r7, r3
1a008070:	4094      	lsls	r4, r2
1a008072:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a008076:	0c23      	lsrs	r3, r4, #16
1a008078:	fbb8 f7fe 	udiv	r7, r8, lr
1a00807c:	fa1f fc85 	uxth.w	ip, r5
1a008080:	fb0e 8817 	mls	r8, lr, r7, r8
1a008084:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a008088:	fb07 f10c 	mul.w	r1, r7, ip
1a00808c:	4299      	cmp	r1, r3
1a00808e:	d909      	bls.n	1a0080a4 <__udivmoddi4+0x60>
1a008090:	18eb      	adds	r3, r5, r3
1a008092:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a008096:	f080 811b 	bcs.w	1a0082d0 <__udivmoddi4+0x28c>
1a00809a:	4299      	cmp	r1, r3
1a00809c:	f240 8118 	bls.w	1a0082d0 <__udivmoddi4+0x28c>
1a0080a0:	3f02      	subs	r7, #2
1a0080a2:	442b      	add	r3, r5
1a0080a4:	1a5b      	subs	r3, r3, r1
1a0080a6:	b2a4      	uxth	r4, r4
1a0080a8:	fbb3 f0fe 	udiv	r0, r3, lr
1a0080ac:	fb0e 3310 	mls	r3, lr, r0, r3
1a0080b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0080b4:	fb00 fc0c 	mul.w	ip, r0, ip
1a0080b8:	45a4      	cmp	ip, r4
1a0080ba:	d909      	bls.n	1a0080d0 <__udivmoddi4+0x8c>
1a0080bc:	192c      	adds	r4, r5, r4
1a0080be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0080c2:	f080 8107 	bcs.w	1a0082d4 <__udivmoddi4+0x290>
1a0080c6:	45a4      	cmp	ip, r4
1a0080c8:	f240 8104 	bls.w	1a0082d4 <__udivmoddi4+0x290>
1a0080cc:	3802      	subs	r0, #2
1a0080ce:	442c      	add	r4, r5
1a0080d0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a0080d4:	eba4 040c 	sub.w	r4, r4, ip
1a0080d8:	2700      	movs	r7, #0
1a0080da:	b11e      	cbz	r6, 1a0080e4 <__udivmoddi4+0xa0>
1a0080dc:	40d4      	lsrs	r4, r2
1a0080de:	2300      	movs	r3, #0
1a0080e0:	e9c6 4300 	strd	r4, r3, [r6]
1a0080e4:	4639      	mov	r1, r7
1a0080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0080ea:	428b      	cmp	r3, r1
1a0080ec:	d909      	bls.n	1a008102 <__udivmoddi4+0xbe>
1a0080ee:	2e00      	cmp	r6, #0
1a0080f0:	f000 80eb 	beq.w	1a0082ca <__udivmoddi4+0x286>
1a0080f4:	2700      	movs	r7, #0
1a0080f6:	e9c6 0100 	strd	r0, r1, [r6]
1a0080fa:	4638      	mov	r0, r7
1a0080fc:	4639      	mov	r1, r7
1a0080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a008102:	fab3 f783 	clz	r7, r3
1a008106:	2f00      	cmp	r7, #0
1a008108:	d147      	bne.n	1a00819a <__udivmoddi4+0x156>
1a00810a:	428b      	cmp	r3, r1
1a00810c:	d302      	bcc.n	1a008114 <__udivmoddi4+0xd0>
1a00810e:	4282      	cmp	r2, r0
1a008110:	f200 80fa 	bhi.w	1a008308 <__udivmoddi4+0x2c4>
1a008114:	1a84      	subs	r4, r0, r2
1a008116:	eb61 0303 	sbc.w	r3, r1, r3
1a00811a:	2001      	movs	r0, #1
1a00811c:	4698      	mov	r8, r3
1a00811e:	2e00      	cmp	r6, #0
1a008120:	d0e0      	beq.n	1a0080e4 <__udivmoddi4+0xa0>
1a008122:	e9c6 4800 	strd	r4, r8, [r6]
1a008126:	e7dd      	b.n	1a0080e4 <__udivmoddi4+0xa0>
1a008128:	b902      	cbnz	r2, 1a00812c <__udivmoddi4+0xe8>
1a00812a:	deff      	udf	#255	; 0xff
1a00812c:	fab2 f282 	clz	r2, r2
1a008130:	2a00      	cmp	r2, #0
1a008132:	f040 808f 	bne.w	1a008254 <__udivmoddi4+0x210>
1a008136:	1b49      	subs	r1, r1, r5
1a008138:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00813c:	fa1f f885 	uxth.w	r8, r5
1a008140:	2701      	movs	r7, #1
1a008142:	fbb1 fcfe 	udiv	ip, r1, lr
1a008146:	0c23      	lsrs	r3, r4, #16
1a008148:	fb0e 111c 	mls	r1, lr, ip, r1
1a00814c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a008150:	fb08 f10c 	mul.w	r1, r8, ip
1a008154:	4299      	cmp	r1, r3
1a008156:	d907      	bls.n	1a008168 <__udivmoddi4+0x124>
1a008158:	18eb      	adds	r3, r5, r3
1a00815a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00815e:	d202      	bcs.n	1a008166 <__udivmoddi4+0x122>
1a008160:	4299      	cmp	r1, r3
1a008162:	f200 80cd 	bhi.w	1a008300 <__udivmoddi4+0x2bc>
1a008166:	4684      	mov	ip, r0
1a008168:	1a59      	subs	r1, r3, r1
1a00816a:	b2a3      	uxth	r3, r4
1a00816c:	fbb1 f0fe 	udiv	r0, r1, lr
1a008170:	fb0e 1410 	mls	r4, lr, r0, r1
1a008174:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a008178:	fb08 f800 	mul.w	r8, r8, r0
1a00817c:	45a0      	cmp	r8, r4
1a00817e:	d907      	bls.n	1a008190 <__udivmoddi4+0x14c>
1a008180:	192c      	adds	r4, r5, r4
1a008182:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a008186:	d202      	bcs.n	1a00818e <__udivmoddi4+0x14a>
1a008188:	45a0      	cmp	r8, r4
1a00818a:	f200 80b6 	bhi.w	1a0082fa <__udivmoddi4+0x2b6>
1a00818e:	4618      	mov	r0, r3
1a008190:	eba4 0408 	sub.w	r4, r4, r8
1a008194:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a008198:	e79f      	b.n	1a0080da <__udivmoddi4+0x96>
1a00819a:	f1c7 0c20 	rsb	ip, r7, #32
1a00819e:	40bb      	lsls	r3, r7
1a0081a0:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0081a4:	ea4e 0e03 	orr.w	lr, lr, r3
1a0081a8:	fa01 f407 	lsl.w	r4, r1, r7
1a0081ac:	fa20 f50c 	lsr.w	r5, r0, ip
1a0081b0:	fa21 f30c 	lsr.w	r3, r1, ip
1a0081b4:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0081b8:	4325      	orrs	r5, r4
1a0081ba:	fbb3 f9f8 	udiv	r9, r3, r8
1a0081be:	0c2c      	lsrs	r4, r5, #16
1a0081c0:	fb08 3319 	mls	r3, r8, r9, r3
1a0081c4:	fa1f fa8e 	uxth.w	sl, lr
1a0081c8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0081cc:	fb09 f40a 	mul.w	r4, r9, sl
1a0081d0:	429c      	cmp	r4, r3
1a0081d2:	fa02 f207 	lsl.w	r2, r2, r7
1a0081d6:	fa00 f107 	lsl.w	r1, r0, r7
1a0081da:	d90b      	bls.n	1a0081f4 <__udivmoddi4+0x1b0>
1a0081dc:	eb1e 0303 	adds.w	r3, lr, r3
1a0081e0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a0081e4:	f080 8087 	bcs.w	1a0082f6 <__udivmoddi4+0x2b2>
1a0081e8:	429c      	cmp	r4, r3
1a0081ea:	f240 8084 	bls.w	1a0082f6 <__udivmoddi4+0x2b2>
1a0081ee:	f1a9 0902 	sub.w	r9, r9, #2
1a0081f2:	4473      	add	r3, lr
1a0081f4:	1b1b      	subs	r3, r3, r4
1a0081f6:	b2ad      	uxth	r5, r5
1a0081f8:	fbb3 f0f8 	udiv	r0, r3, r8
1a0081fc:	fb08 3310 	mls	r3, r8, r0, r3
1a008200:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a008204:	fb00 fa0a 	mul.w	sl, r0, sl
1a008208:	45a2      	cmp	sl, r4
1a00820a:	d908      	bls.n	1a00821e <__udivmoddi4+0x1da>
1a00820c:	eb1e 0404 	adds.w	r4, lr, r4
1a008210:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a008214:	d26b      	bcs.n	1a0082ee <__udivmoddi4+0x2aa>
1a008216:	45a2      	cmp	sl, r4
1a008218:	d969      	bls.n	1a0082ee <__udivmoddi4+0x2aa>
1a00821a:	3802      	subs	r0, #2
1a00821c:	4474      	add	r4, lr
1a00821e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a008222:	fba0 8902 	umull	r8, r9, r0, r2
1a008226:	eba4 040a 	sub.w	r4, r4, sl
1a00822a:	454c      	cmp	r4, r9
1a00822c:	46c2      	mov	sl, r8
1a00822e:	464b      	mov	r3, r9
1a008230:	d354      	bcc.n	1a0082dc <__udivmoddi4+0x298>
1a008232:	d051      	beq.n	1a0082d8 <__udivmoddi4+0x294>
1a008234:	2e00      	cmp	r6, #0
1a008236:	d069      	beq.n	1a00830c <__udivmoddi4+0x2c8>
1a008238:	ebb1 050a 	subs.w	r5, r1, sl
1a00823c:	eb64 0403 	sbc.w	r4, r4, r3
1a008240:	fa04 fc0c 	lsl.w	ip, r4, ip
1a008244:	40fd      	lsrs	r5, r7
1a008246:	40fc      	lsrs	r4, r7
1a008248:	ea4c 0505 	orr.w	r5, ip, r5
1a00824c:	e9c6 5400 	strd	r5, r4, [r6]
1a008250:	2700      	movs	r7, #0
1a008252:	e747      	b.n	1a0080e4 <__udivmoddi4+0xa0>
1a008254:	f1c2 0320 	rsb	r3, r2, #32
1a008258:	fa20 f703 	lsr.w	r7, r0, r3
1a00825c:	4095      	lsls	r5, r2
1a00825e:	fa01 f002 	lsl.w	r0, r1, r2
1a008262:	fa21 f303 	lsr.w	r3, r1, r3
1a008266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00826a:	4338      	orrs	r0, r7
1a00826c:	0c01      	lsrs	r1, r0, #16
1a00826e:	fbb3 f7fe 	udiv	r7, r3, lr
1a008272:	fa1f f885 	uxth.w	r8, r5
1a008276:	fb0e 3317 	mls	r3, lr, r7, r3
1a00827a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00827e:	fb07 f308 	mul.w	r3, r7, r8
1a008282:	428b      	cmp	r3, r1
1a008284:	fa04 f402 	lsl.w	r4, r4, r2
1a008288:	d907      	bls.n	1a00829a <__udivmoddi4+0x256>
1a00828a:	1869      	adds	r1, r5, r1
1a00828c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a008290:	d22f      	bcs.n	1a0082f2 <__udivmoddi4+0x2ae>
1a008292:	428b      	cmp	r3, r1
1a008294:	d92d      	bls.n	1a0082f2 <__udivmoddi4+0x2ae>
1a008296:	3f02      	subs	r7, #2
1a008298:	4429      	add	r1, r5
1a00829a:	1acb      	subs	r3, r1, r3
1a00829c:	b281      	uxth	r1, r0
1a00829e:	fbb3 f0fe 	udiv	r0, r3, lr
1a0082a2:	fb0e 3310 	mls	r3, lr, r0, r3
1a0082a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0082aa:	fb00 f308 	mul.w	r3, r0, r8
1a0082ae:	428b      	cmp	r3, r1
1a0082b0:	d907      	bls.n	1a0082c2 <__udivmoddi4+0x27e>
1a0082b2:	1869      	adds	r1, r5, r1
1a0082b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0082b8:	d217      	bcs.n	1a0082ea <__udivmoddi4+0x2a6>
1a0082ba:	428b      	cmp	r3, r1
1a0082bc:	d915      	bls.n	1a0082ea <__udivmoddi4+0x2a6>
1a0082be:	3802      	subs	r0, #2
1a0082c0:	4429      	add	r1, r5
1a0082c2:	1ac9      	subs	r1, r1, r3
1a0082c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0082c8:	e73b      	b.n	1a008142 <__udivmoddi4+0xfe>
1a0082ca:	4637      	mov	r7, r6
1a0082cc:	4630      	mov	r0, r6
1a0082ce:	e709      	b.n	1a0080e4 <__udivmoddi4+0xa0>
1a0082d0:	4607      	mov	r7, r0
1a0082d2:	e6e7      	b.n	1a0080a4 <__udivmoddi4+0x60>
1a0082d4:	4618      	mov	r0, r3
1a0082d6:	e6fb      	b.n	1a0080d0 <__udivmoddi4+0x8c>
1a0082d8:	4541      	cmp	r1, r8
1a0082da:	d2ab      	bcs.n	1a008234 <__udivmoddi4+0x1f0>
1a0082dc:	ebb8 0a02 	subs.w	sl, r8, r2
1a0082e0:	eb69 020e 	sbc.w	r2, r9, lr
1a0082e4:	3801      	subs	r0, #1
1a0082e6:	4613      	mov	r3, r2
1a0082e8:	e7a4      	b.n	1a008234 <__udivmoddi4+0x1f0>
1a0082ea:	4660      	mov	r0, ip
1a0082ec:	e7e9      	b.n	1a0082c2 <__udivmoddi4+0x27e>
1a0082ee:	4618      	mov	r0, r3
1a0082f0:	e795      	b.n	1a00821e <__udivmoddi4+0x1da>
1a0082f2:	4667      	mov	r7, ip
1a0082f4:	e7d1      	b.n	1a00829a <__udivmoddi4+0x256>
1a0082f6:	4681      	mov	r9, r0
1a0082f8:	e77c      	b.n	1a0081f4 <__udivmoddi4+0x1b0>
1a0082fa:	3802      	subs	r0, #2
1a0082fc:	442c      	add	r4, r5
1a0082fe:	e747      	b.n	1a008190 <__udivmoddi4+0x14c>
1a008300:	f1ac 0c02 	sub.w	ip, ip, #2
1a008304:	442b      	add	r3, r5
1a008306:	e72f      	b.n	1a008168 <__udivmoddi4+0x124>
1a008308:	4638      	mov	r0, r7
1a00830a:	e708      	b.n	1a00811e <__udivmoddi4+0xda>
1a00830c:	4637      	mov	r7, r6
1a00830e:	e6e9      	b.n	1a0080e4 <__udivmoddi4+0xa0>

1a008310 <__aeabi_idiv0>:
1a008310:	4770      	bx	lr
1a008312:	bf00      	nop

1a008314 <__libc_init_array>:
1a008314:	b570      	push	{r4, r5, r6, lr}
1a008316:	4e0d      	ldr	r6, [pc, #52]	; (1a00834c <__libc_init_array+0x38>)
1a008318:	4c0d      	ldr	r4, [pc, #52]	; (1a008350 <__libc_init_array+0x3c>)
1a00831a:	1ba4      	subs	r4, r4, r6
1a00831c:	10a4      	asrs	r4, r4, #2
1a00831e:	2500      	movs	r5, #0
1a008320:	42a5      	cmp	r5, r4
1a008322:	d109      	bne.n	1a008338 <__libc_init_array+0x24>
1a008324:	4e0b      	ldr	r6, [pc, #44]	; (1a008354 <__libc_init_array+0x40>)
1a008326:	4c0c      	ldr	r4, [pc, #48]	; (1a008358 <__libc_init_array+0x44>)
1a008328:	f7f8 fb3f 	bl	1a0009aa <_init>
1a00832c:	1ba4      	subs	r4, r4, r6
1a00832e:	10a4      	asrs	r4, r4, #2
1a008330:	2500      	movs	r5, #0
1a008332:	42a5      	cmp	r5, r4
1a008334:	d105      	bne.n	1a008342 <__libc_init_array+0x2e>
1a008336:	bd70      	pop	{r4, r5, r6, pc}
1a008338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00833c:	4798      	blx	r3
1a00833e:	3501      	adds	r5, #1
1a008340:	e7ee      	b.n	1a008320 <__libc_init_array+0xc>
1a008342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a008346:	4798      	blx	r3
1a008348:	3501      	adds	r5, #1
1a00834a:	e7f2      	b.n	1a008332 <__libc_init_array+0x1e>
1a00834c:	1a00a070 	.word	0x1a00a070
1a008350:	1a00a070 	.word	0x1a00a070
1a008354:	1a00a070 	.word	0x1a00a070
1a008358:	1a00a074 	.word	0x1a00a074

1a00835c <malloc>:
1a00835c:	4b02      	ldr	r3, [pc, #8]	; (1a008368 <malloc+0xc>)
1a00835e:	4601      	mov	r1, r0
1a008360:	6818      	ldr	r0, [r3, #0]
1a008362:	f000 b865 	b.w	1a008430 <_malloc_r>
1a008366:	bf00      	nop
1a008368:	100000a0 	.word	0x100000a0

1a00836c <memcpy>:
1a00836c:	b510      	push	{r4, lr}
1a00836e:	1e43      	subs	r3, r0, #1
1a008370:	440a      	add	r2, r1
1a008372:	4291      	cmp	r1, r2
1a008374:	d100      	bne.n	1a008378 <memcpy+0xc>
1a008376:	bd10      	pop	{r4, pc}
1a008378:	f811 4b01 	ldrb.w	r4, [r1], #1
1a00837c:	f803 4f01 	strb.w	r4, [r3, #1]!
1a008380:	e7f7      	b.n	1a008372 <memcpy+0x6>

1a008382 <memset>:
1a008382:	4402      	add	r2, r0
1a008384:	4603      	mov	r3, r0
1a008386:	4293      	cmp	r3, r2
1a008388:	d100      	bne.n	1a00838c <memset+0xa>
1a00838a:	4770      	bx	lr
1a00838c:	f803 1b01 	strb.w	r1, [r3], #1
1a008390:	e7f9      	b.n	1a008386 <memset+0x4>
1a008392:	Address 0x000000001a008392 is out of bounds.


1a008394 <_free_r>:
1a008394:	b538      	push	{r3, r4, r5, lr}
1a008396:	4605      	mov	r5, r0
1a008398:	2900      	cmp	r1, #0
1a00839a:	d045      	beq.n	1a008428 <_free_r+0x94>
1a00839c:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0083a0:	1f0c      	subs	r4, r1, #4
1a0083a2:	2b00      	cmp	r3, #0
1a0083a4:	bfb8      	it	lt
1a0083a6:	18e4      	addlt	r4, r4, r3
1a0083a8:	f000 fbce 	bl	1a008b48 <__malloc_lock>
1a0083ac:	4a1f      	ldr	r2, [pc, #124]	; (1a00842c <_free_r+0x98>)
1a0083ae:	6813      	ldr	r3, [r2, #0]
1a0083b0:	4610      	mov	r0, r2
1a0083b2:	b933      	cbnz	r3, 1a0083c2 <_free_r+0x2e>
1a0083b4:	6063      	str	r3, [r4, #4]
1a0083b6:	6014      	str	r4, [r2, #0]
1a0083b8:	4628      	mov	r0, r5
1a0083ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0083be:	f000 bbc4 	b.w	1a008b4a <__malloc_unlock>
1a0083c2:	42a3      	cmp	r3, r4
1a0083c4:	d90c      	bls.n	1a0083e0 <_free_r+0x4c>
1a0083c6:	6821      	ldr	r1, [r4, #0]
1a0083c8:	1862      	adds	r2, r4, r1
1a0083ca:	4293      	cmp	r3, r2
1a0083cc:	bf04      	itt	eq
1a0083ce:	681a      	ldreq	r2, [r3, #0]
1a0083d0:	685b      	ldreq	r3, [r3, #4]
1a0083d2:	6063      	str	r3, [r4, #4]
1a0083d4:	bf04      	itt	eq
1a0083d6:	1852      	addeq	r2, r2, r1
1a0083d8:	6022      	streq	r2, [r4, #0]
1a0083da:	6004      	str	r4, [r0, #0]
1a0083dc:	e7ec      	b.n	1a0083b8 <_free_r+0x24>
1a0083de:	4613      	mov	r3, r2
1a0083e0:	685a      	ldr	r2, [r3, #4]
1a0083e2:	b10a      	cbz	r2, 1a0083e8 <_free_r+0x54>
1a0083e4:	42a2      	cmp	r2, r4
1a0083e6:	d9fa      	bls.n	1a0083de <_free_r+0x4a>
1a0083e8:	6819      	ldr	r1, [r3, #0]
1a0083ea:	1858      	adds	r0, r3, r1
1a0083ec:	42a0      	cmp	r0, r4
1a0083ee:	d10b      	bne.n	1a008408 <_free_r+0x74>
1a0083f0:	6820      	ldr	r0, [r4, #0]
1a0083f2:	4401      	add	r1, r0
1a0083f4:	1858      	adds	r0, r3, r1
1a0083f6:	4282      	cmp	r2, r0
1a0083f8:	6019      	str	r1, [r3, #0]
1a0083fa:	d1dd      	bne.n	1a0083b8 <_free_r+0x24>
1a0083fc:	6810      	ldr	r0, [r2, #0]
1a0083fe:	6852      	ldr	r2, [r2, #4]
1a008400:	605a      	str	r2, [r3, #4]
1a008402:	4401      	add	r1, r0
1a008404:	6019      	str	r1, [r3, #0]
1a008406:	e7d7      	b.n	1a0083b8 <_free_r+0x24>
1a008408:	d902      	bls.n	1a008410 <_free_r+0x7c>
1a00840a:	230c      	movs	r3, #12
1a00840c:	602b      	str	r3, [r5, #0]
1a00840e:	e7d3      	b.n	1a0083b8 <_free_r+0x24>
1a008410:	6820      	ldr	r0, [r4, #0]
1a008412:	1821      	adds	r1, r4, r0
1a008414:	428a      	cmp	r2, r1
1a008416:	bf04      	itt	eq
1a008418:	6811      	ldreq	r1, [r2, #0]
1a00841a:	6852      	ldreq	r2, [r2, #4]
1a00841c:	6062      	str	r2, [r4, #4]
1a00841e:	bf04      	itt	eq
1a008420:	1809      	addeq	r1, r1, r0
1a008422:	6021      	streq	r1, [r4, #0]
1a008424:	605c      	str	r4, [r3, #4]
1a008426:	e7c7      	b.n	1a0083b8 <_free_r+0x24>
1a008428:	bd38      	pop	{r3, r4, r5, pc}
1a00842a:	bf00      	nop
1a00842c:	100035f0 	.word	0x100035f0

1a008430 <_malloc_r>:
1a008430:	b570      	push	{r4, r5, r6, lr}
1a008432:	1ccd      	adds	r5, r1, #3
1a008434:	f025 0503 	bic.w	r5, r5, #3
1a008438:	3508      	adds	r5, #8
1a00843a:	2d0c      	cmp	r5, #12
1a00843c:	bf38      	it	cc
1a00843e:	250c      	movcc	r5, #12
1a008440:	2d00      	cmp	r5, #0
1a008442:	4606      	mov	r6, r0
1a008444:	db01      	blt.n	1a00844a <_malloc_r+0x1a>
1a008446:	42a9      	cmp	r1, r5
1a008448:	d903      	bls.n	1a008452 <_malloc_r+0x22>
1a00844a:	230c      	movs	r3, #12
1a00844c:	6033      	str	r3, [r6, #0]
1a00844e:	2000      	movs	r0, #0
1a008450:	bd70      	pop	{r4, r5, r6, pc}
1a008452:	f000 fb79 	bl	1a008b48 <__malloc_lock>
1a008456:	4a21      	ldr	r2, [pc, #132]	; (1a0084dc <_malloc_r+0xac>)
1a008458:	6814      	ldr	r4, [r2, #0]
1a00845a:	4621      	mov	r1, r4
1a00845c:	b991      	cbnz	r1, 1a008484 <_malloc_r+0x54>
1a00845e:	4c20      	ldr	r4, [pc, #128]	; (1a0084e0 <_malloc_r+0xb0>)
1a008460:	6823      	ldr	r3, [r4, #0]
1a008462:	b91b      	cbnz	r3, 1a00846c <_malloc_r+0x3c>
1a008464:	4630      	mov	r0, r6
1a008466:	f7f8 faf5 	bl	1a000a54 <_sbrk_r>
1a00846a:	6020      	str	r0, [r4, #0]
1a00846c:	4629      	mov	r1, r5
1a00846e:	4630      	mov	r0, r6
1a008470:	f7f8 faf0 	bl	1a000a54 <_sbrk_r>
1a008474:	1c43      	adds	r3, r0, #1
1a008476:	d124      	bne.n	1a0084c2 <_malloc_r+0x92>
1a008478:	230c      	movs	r3, #12
1a00847a:	6033      	str	r3, [r6, #0]
1a00847c:	4630      	mov	r0, r6
1a00847e:	f000 fb64 	bl	1a008b4a <__malloc_unlock>
1a008482:	e7e4      	b.n	1a00844e <_malloc_r+0x1e>
1a008484:	680b      	ldr	r3, [r1, #0]
1a008486:	1b5b      	subs	r3, r3, r5
1a008488:	d418      	bmi.n	1a0084bc <_malloc_r+0x8c>
1a00848a:	2b0b      	cmp	r3, #11
1a00848c:	d90f      	bls.n	1a0084ae <_malloc_r+0x7e>
1a00848e:	600b      	str	r3, [r1, #0]
1a008490:	50cd      	str	r5, [r1, r3]
1a008492:	18cc      	adds	r4, r1, r3
1a008494:	4630      	mov	r0, r6
1a008496:	f000 fb58 	bl	1a008b4a <__malloc_unlock>
1a00849a:	f104 000b 	add.w	r0, r4, #11
1a00849e:	1d23      	adds	r3, r4, #4
1a0084a0:	f020 0007 	bic.w	r0, r0, #7
1a0084a4:	1ac3      	subs	r3, r0, r3
1a0084a6:	d0d3      	beq.n	1a008450 <_malloc_r+0x20>
1a0084a8:	425a      	negs	r2, r3
1a0084aa:	50e2      	str	r2, [r4, r3]
1a0084ac:	e7d0      	b.n	1a008450 <_malloc_r+0x20>
1a0084ae:	428c      	cmp	r4, r1
1a0084b0:	684b      	ldr	r3, [r1, #4]
1a0084b2:	bf16      	itet	ne
1a0084b4:	6063      	strne	r3, [r4, #4]
1a0084b6:	6013      	streq	r3, [r2, #0]
1a0084b8:	460c      	movne	r4, r1
1a0084ba:	e7eb      	b.n	1a008494 <_malloc_r+0x64>
1a0084bc:	460c      	mov	r4, r1
1a0084be:	6849      	ldr	r1, [r1, #4]
1a0084c0:	e7cc      	b.n	1a00845c <_malloc_r+0x2c>
1a0084c2:	1cc4      	adds	r4, r0, #3
1a0084c4:	f024 0403 	bic.w	r4, r4, #3
1a0084c8:	42a0      	cmp	r0, r4
1a0084ca:	d005      	beq.n	1a0084d8 <_malloc_r+0xa8>
1a0084cc:	1a21      	subs	r1, r4, r0
1a0084ce:	4630      	mov	r0, r6
1a0084d0:	f7f8 fac0 	bl	1a000a54 <_sbrk_r>
1a0084d4:	3001      	adds	r0, #1
1a0084d6:	d0cf      	beq.n	1a008478 <_malloc_r+0x48>
1a0084d8:	6025      	str	r5, [r4, #0]
1a0084da:	e7db      	b.n	1a008494 <_malloc_r+0x64>
1a0084dc:	100035f0 	.word	0x100035f0
1a0084e0:	100035f4 	.word	0x100035f4

1a0084e4 <iprintf>:
1a0084e4:	b40f      	push	{r0, r1, r2, r3}
1a0084e6:	4b0a      	ldr	r3, [pc, #40]	; (1a008510 <iprintf+0x2c>)
1a0084e8:	b513      	push	{r0, r1, r4, lr}
1a0084ea:	681c      	ldr	r4, [r3, #0]
1a0084ec:	b124      	cbz	r4, 1a0084f8 <iprintf+0x14>
1a0084ee:	69a3      	ldr	r3, [r4, #24]
1a0084f0:	b913      	cbnz	r3, 1a0084f8 <iprintf+0x14>
1a0084f2:	4620      	mov	r0, r4
1a0084f4:	f000 fa3a 	bl	1a00896c <__sinit>
1a0084f8:	ab05      	add	r3, sp, #20
1a0084fa:	9a04      	ldr	r2, [sp, #16]
1a0084fc:	68a1      	ldr	r1, [r4, #8]
1a0084fe:	9301      	str	r3, [sp, #4]
1a008500:	4620      	mov	r0, r4
1a008502:	f000 fb4d 	bl	1a008ba0 <_vfiprintf_r>
1a008506:	b002      	add	sp, #8
1a008508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00850c:	b004      	add	sp, #16
1a00850e:	4770      	bx	lr
1a008510:	100000a0 	.word	0x100000a0

1a008514 <_puts_r>:
1a008514:	b570      	push	{r4, r5, r6, lr}
1a008516:	460e      	mov	r6, r1
1a008518:	4605      	mov	r5, r0
1a00851a:	b118      	cbz	r0, 1a008524 <_puts_r+0x10>
1a00851c:	6983      	ldr	r3, [r0, #24]
1a00851e:	b90b      	cbnz	r3, 1a008524 <_puts_r+0x10>
1a008520:	f000 fa24 	bl	1a00896c <__sinit>
1a008524:	69ab      	ldr	r3, [r5, #24]
1a008526:	68ac      	ldr	r4, [r5, #8]
1a008528:	b913      	cbnz	r3, 1a008530 <_puts_r+0x1c>
1a00852a:	4628      	mov	r0, r5
1a00852c:	f000 fa1e 	bl	1a00896c <__sinit>
1a008530:	4b23      	ldr	r3, [pc, #140]	; (1a0085c0 <_puts_r+0xac>)
1a008532:	429c      	cmp	r4, r3
1a008534:	d117      	bne.n	1a008566 <_puts_r+0x52>
1a008536:	686c      	ldr	r4, [r5, #4]
1a008538:	89a3      	ldrh	r3, [r4, #12]
1a00853a:	071b      	lsls	r3, r3, #28
1a00853c:	d51d      	bpl.n	1a00857a <_puts_r+0x66>
1a00853e:	6923      	ldr	r3, [r4, #16]
1a008540:	b1db      	cbz	r3, 1a00857a <_puts_r+0x66>
1a008542:	3e01      	subs	r6, #1
1a008544:	68a3      	ldr	r3, [r4, #8]
1a008546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a00854a:	3b01      	subs	r3, #1
1a00854c:	60a3      	str	r3, [r4, #8]
1a00854e:	b9e9      	cbnz	r1, 1a00858c <_puts_r+0x78>
1a008550:	2b00      	cmp	r3, #0
1a008552:	da2e      	bge.n	1a0085b2 <_puts_r+0x9e>
1a008554:	4622      	mov	r2, r4
1a008556:	210a      	movs	r1, #10
1a008558:	4628      	mov	r0, r5
1a00855a:	f000 f857 	bl	1a00860c <__swbuf_r>
1a00855e:	3001      	adds	r0, #1
1a008560:	d011      	beq.n	1a008586 <_puts_r+0x72>
1a008562:	200a      	movs	r0, #10
1a008564:	e011      	b.n	1a00858a <_puts_r+0x76>
1a008566:	4b17      	ldr	r3, [pc, #92]	; (1a0085c4 <_puts_r+0xb0>)
1a008568:	429c      	cmp	r4, r3
1a00856a:	d101      	bne.n	1a008570 <_puts_r+0x5c>
1a00856c:	68ac      	ldr	r4, [r5, #8]
1a00856e:	e7e3      	b.n	1a008538 <_puts_r+0x24>
1a008570:	4b15      	ldr	r3, [pc, #84]	; (1a0085c8 <_puts_r+0xb4>)
1a008572:	429c      	cmp	r4, r3
1a008574:	bf08      	it	eq
1a008576:	68ec      	ldreq	r4, [r5, #12]
1a008578:	e7de      	b.n	1a008538 <_puts_r+0x24>
1a00857a:	4621      	mov	r1, r4
1a00857c:	4628      	mov	r0, r5
1a00857e:	f000 f897 	bl	1a0086b0 <__swsetup_r>
1a008582:	2800      	cmp	r0, #0
1a008584:	d0dd      	beq.n	1a008542 <_puts_r+0x2e>
1a008586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00858a:	bd70      	pop	{r4, r5, r6, pc}
1a00858c:	2b00      	cmp	r3, #0
1a00858e:	da04      	bge.n	1a00859a <_puts_r+0x86>
1a008590:	69a2      	ldr	r2, [r4, #24]
1a008592:	429a      	cmp	r2, r3
1a008594:	dc06      	bgt.n	1a0085a4 <_puts_r+0x90>
1a008596:	290a      	cmp	r1, #10
1a008598:	d004      	beq.n	1a0085a4 <_puts_r+0x90>
1a00859a:	6823      	ldr	r3, [r4, #0]
1a00859c:	1c5a      	adds	r2, r3, #1
1a00859e:	6022      	str	r2, [r4, #0]
1a0085a0:	7019      	strb	r1, [r3, #0]
1a0085a2:	e7cf      	b.n	1a008544 <_puts_r+0x30>
1a0085a4:	4622      	mov	r2, r4
1a0085a6:	4628      	mov	r0, r5
1a0085a8:	f000 f830 	bl	1a00860c <__swbuf_r>
1a0085ac:	3001      	adds	r0, #1
1a0085ae:	d1c9      	bne.n	1a008544 <_puts_r+0x30>
1a0085b0:	e7e9      	b.n	1a008586 <_puts_r+0x72>
1a0085b2:	6823      	ldr	r3, [r4, #0]
1a0085b4:	200a      	movs	r0, #10
1a0085b6:	1c5a      	adds	r2, r3, #1
1a0085b8:	6022      	str	r2, [r4, #0]
1a0085ba:	7018      	strb	r0, [r3, #0]
1a0085bc:	e7e5      	b.n	1a00858a <_puts_r+0x76>
1a0085be:	bf00      	nop
1a0085c0:	1a009ff8 	.word	0x1a009ff8
1a0085c4:	1a00a018 	.word	0x1a00a018
1a0085c8:	1a009fd8 	.word	0x1a009fd8

1a0085cc <puts>:
1a0085cc:	4b02      	ldr	r3, [pc, #8]	; (1a0085d8 <puts+0xc>)
1a0085ce:	4601      	mov	r1, r0
1a0085d0:	6818      	ldr	r0, [r3, #0]
1a0085d2:	f7ff bf9f 	b.w	1a008514 <_puts_r>
1a0085d6:	bf00      	nop
1a0085d8:	100000a0 	.word	0x100000a0

1a0085dc <strcat>:
1a0085dc:	b510      	push	{r4, lr}
1a0085de:	4603      	mov	r3, r0
1a0085e0:	781a      	ldrb	r2, [r3, #0]
1a0085e2:	1c5c      	adds	r4, r3, #1
1a0085e4:	b93a      	cbnz	r2, 1a0085f6 <strcat+0x1a>
1a0085e6:	3b01      	subs	r3, #1
1a0085e8:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0085ec:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0085f0:	2a00      	cmp	r2, #0
1a0085f2:	d1f9      	bne.n	1a0085e8 <strcat+0xc>
1a0085f4:	bd10      	pop	{r4, pc}
1a0085f6:	4623      	mov	r3, r4
1a0085f8:	e7f2      	b.n	1a0085e0 <strcat+0x4>

1a0085fa <strcpy>:
1a0085fa:	4603      	mov	r3, r0
1a0085fc:	f811 2b01 	ldrb.w	r2, [r1], #1
1a008600:	f803 2b01 	strb.w	r2, [r3], #1
1a008604:	2a00      	cmp	r2, #0
1a008606:	d1f9      	bne.n	1a0085fc <strcpy+0x2>
1a008608:	4770      	bx	lr
1a00860a:	Address 0x000000001a00860a is out of bounds.


1a00860c <__swbuf_r>:
1a00860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00860e:	460e      	mov	r6, r1
1a008610:	4614      	mov	r4, r2
1a008612:	4605      	mov	r5, r0
1a008614:	b118      	cbz	r0, 1a00861e <__swbuf_r+0x12>
1a008616:	6983      	ldr	r3, [r0, #24]
1a008618:	b90b      	cbnz	r3, 1a00861e <__swbuf_r+0x12>
1a00861a:	f000 f9a7 	bl	1a00896c <__sinit>
1a00861e:	4b21      	ldr	r3, [pc, #132]	; (1a0086a4 <__swbuf_r+0x98>)
1a008620:	429c      	cmp	r4, r3
1a008622:	d12a      	bne.n	1a00867a <__swbuf_r+0x6e>
1a008624:	686c      	ldr	r4, [r5, #4]
1a008626:	69a3      	ldr	r3, [r4, #24]
1a008628:	60a3      	str	r3, [r4, #8]
1a00862a:	89a3      	ldrh	r3, [r4, #12]
1a00862c:	071a      	lsls	r2, r3, #28
1a00862e:	d52e      	bpl.n	1a00868e <__swbuf_r+0x82>
1a008630:	6923      	ldr	r3, [r4, #16]
1a008632:	b363      	cbz	r3, 1a00868e <__swbuf_r+0x82>
1a008634:	6923      	ldr	r3, [r4, #16]
1a008636:	6820      	ldr	r0, [r4, #0]
1a008638:	1ac0      	subs	r0, r0, r3
1a00863a:	6963      	ldr	r3, [r4, #20]
1a00863c:	b2f6      	uxtb	r6, r6
1a00863e:	4283      	cmp	r3, r0
1a008640:	4637      	mov	r7, r6
1a008642:	dc04      	bgt.n	1a00864e <__swbuf_r+0x42>
1a008644:	4621      	mov	r1, r4
1a008646:	4628      	mov	r0, r5
1a008648:	f000 f926 	bl	1a008898 <_fflush_r>
1a00864c:	bb28      	cbnz	r0, 1a00869a <__swbuf_r+0x8e>
1a00864e:	68a3      	ldr	r3, [r4, #8]
1a008650:	3b01      	subs	r3, #1
1a008652:	60a3      	str	r3, [r4, #8]
1a008654:	6823      	ldr	r3, [r4, #0]
1a008656:	1c5a      	adds	r2, r3, #1
1a008658:	6022      	str	r2, [r4, #0]
1a00865a:	701e      	strb	r6, [r3, #0]
1a00865c:	6963      	ldr	r3, [r4, #20]
1a00865e:	3001      	adds	r0, #1
1a008660:	4283      	cmp	r3, r0
1a008662:	d004      	beq.n	1a00866e <__swbuf_r+0x62>
1a008664:	89a3      	ldrh	r3, [r4, #12]
1a008666:	07db      	lsls	r3, r3, #31
1a008668:	d519      	bpl.n	1a00869e <__swbuf_r+0x92>
1a00866a:	2e0a      	cmp	r6, #10
1a00866c:	d117      	bne.n	1a00869e <__swbuf_r+0x92>
1a00866e:	4621      	mov	r1, r4
1a008670:	4628      	mov	r0, r5
1a008672:	f000 f911 	bl	1a008898 <_fflush_r>
1a008676:	b190      	cbz	r0, 1a00869e <__swbuf_r+0x92>
1a008678:	e00f      	b.n	1a00869a <__swbuf_r+0x8e>
1a00867a:	4b0b      	ldr	r3, [pc, #44]	; (1a0086a8 <__swbuf_r+0x9c>)
1a00867c:	429c      	cmp	r4, r3
1a00867e:	d101      	bne.n	1a008684 <__swbuf_r+0x78>
1a008680:	68ac      	ldr	r4, [r5, #8]
1a008682:	e7d0      	b.n	1a008626 <__swbuf_r+0x1a>
1a008684:	4b09      	ldr	r3, [pc, #36]	; (1a0086ac <__swbuf_r+0xa0>)
1a008686:	429c      	cmp	r4, r3
1a008688:	bf08      	it	eq
1a00868a:	68ec      	ldreq	r4, [r5, #12]
1a00868c:	e7cb      	b.n	1a008626 <__swbuf_r+0x1a>
1a00868e:	4621      	mov	r1, r4
1a008690:	4628      	mov	r0, r5
1a008692:	f000 f80d 	bl	1a0086b0 <__swsetup_r>
1a008696:	2800      	cmp	r0, #0
1a008698:	d0cc      	beq.n	1a008634 <__swbuf_r+0x28>
1a00869a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00869e:	4638      	mov	r0, r7
1a0086a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0086a2:	bf00      	nop
1a0086a4:	1a009ff8 	.word	0x1a009ff8
1a0086a8:	1a00a018 	.word	0x1a00a018
1a0086ac:	1a009fd8 	.word	0x1a009fd8

1a0086b0 <__swsetup_r>:
1a0086b0:	4b32      	ldr	r3, [pc, #200]	; (1a00877c <__swsetup_r+0xcc>)
1a0086b2:	b570      	push	{r4, r5, r6, lr}
1a0086b4:	681d      	ldr	r5, [r3, #0]
1a0086b6:	4606      	mov	r6, r0
1a0086b8:	460c      	mov	r4, r1
1a0086ba:	b125      	cbz	r5, 1a0086c6 <__swsetup_r+0x16>
1a0086bc:	69ab      	ldr	r3, [r5, #24]
1a0086be:	b913      	cbnz	r3, 1a0086c6 <__swsetup_r+0x16>
1a0086c0:	4628      	mov	r0, r5
1a0086c2:	f000 f953 	bl	1a00896c <__sinit>
1a0086c6:	4b2e      	ldr	r3, [pc, #184]	; (1a008780 <__swsetup_r+0xd0>)
1a0086c8:	429c      	cmp	r4, r3
1a0086ca:	d10f      	bne.n	1a0086ec <__swsetup_r+0x3c>
1a0086cc:	686c      	ldr	r4, [r5, #4]
1a0086ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0086d2:	b29a      	uxth	r2, r3
1a0086d4:	0715      	lsls	r5, r2, #28
1a0086d6:	d42c      	bmi.n	1a008732 <__swsetup_r+0x82>
1a0086d8:	06d0      	lsls	r0, r2, #27
1a0086da:	d411      	bmi.n	1a008700 <__swsetup_r+0x50>
1a0086dc:	2209      	movs	r2, #9
1a0086de:	6032      	str	r2, [r6, #0]
1a0086e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0086e4:	81a3      	strh	r3, [r4, #12]
1a0086e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0086ea:	e03e      	b.n	1a00876a <__swsetup_r+0xba>
1a0086ec:	4b25      	ldr	r3, [pc, #148]	; (1a008784 <__swsetup_r+0xd4>)
1a0086ee:	429c      	cmp	r4, r3
1a0086f0:	d101      	bne.n	1a0086f6 <__swsetup_r+0x46>
1a0086f2:	68ac      	ldr	r4, [r5, #8]
1a0086f4:	e7eb      	b.n	1a0086ce <__swsetup_r+0x1e>
1a0086f6:	4b24      	ldr	r3, [pc, #144]	; (1a008788 <__swsetup_r+0xd8>)
1a0086f8:	429c      	cmp	r4, r3
1a0086fa:	bf08      	it	eq
1a0086fc:	68ec      	ldreq	r4, [r5, #12]
1a0086fe:	e7e6      	b.n	1a0086ce <__swsetup_r+0x1e>
1a008700:	0751      	lsls	r1, r2, #29
1a008702:	d512      	bpl.n	1a00872a <__swsetup_r+0x7a>
1a008704:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a008706:	b141      	cbz	r1, 1a00871a <__swsetup_r+0x6a>
1a008708:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00870c:	4299      	cmp	r1, r3
1a00870e:	d002      	beq.n	1a008716 <__swsetup_r+0x66>
1a008710:	4630      	mov	r0, r6
1a008712:	f7ff fe3f 	bl	1a008394 <_free_r>
1a008716:	2300      	movs	r3, #0
1a008718:	6363      	str	r3, [r4, #52]	; 0x34
1a00871a:	89a3      	ldrh	r3, [r4, #12]
1a00871c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a008720:	81a3      	strh	r3, [r4, #12]
1a008722:	2300      	movs	r3, #0
1a008724:	6063      	str	r3, [r4, #4]
1a008726:	6923      	ldr	r3, [r4, #16]
1a008728:	6023      	str	r3, [r4, #0]
1a00872a:	89a3      	ldrh	r3, [r4, #12]
1a00872c:	f043 0308 	orr.w	r3, r3, #8
1a008730:	81a3      	strh	r3, [r4, #12]
1a008732:	6923      	ldr	r3, [r4, #16]
1a008734:	b94b      	cbnz	r3, 1a00874a <__swsetup_r+0x9a>
1a008736:	89a3      	ldrh	r3, [r4, #12]
1a008738:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a00873c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a008740:	d003      	beq.n	1a00874a <__swsetup_r+0x9a>
1a008742:	4621      	mov	r1, r4
1a008744:	4630      	mov	r0, r6
1a008746:	f000 f9bf 	bl	1a008ac8 <__smakebuf_r>
1a00874a:	89a2      	ldrh	r2, [r4, #12]
1a00874c:	f012 0301 	ands.w	r3, r2, #1
1a008750:	d00c      	beq.n	1a00876c <__swsetup_r+0xbc>
1a008752:	2300      	movs	r3, #0
1a008754:	60a3      	str	r3, [r4, #8]
1a008756:	6963      	ldr	r3, [r4, #20]
1a008758:	425b      	negs	r3, r3
1a00875a:	61a3      	str	r3, [r4, #24]
1a00875c:	6923      	ldr	r3, [r4, #16]
1a00875e:	b953      	cbnz	r3, 1a008776 <__swsetup_r+0xc6>
1a008760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a008764:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a008768:	d1ba      	bne.n	1a0086e0 <__swsetup_r+0x30>
1a00876a:	bd70      	pop	{r4, r5, r6, pc}
1a00876c:	0792      	lsls	r2, r2, #30
1a00876e:	bf58      	it	pl
1a008770:	6963      	ldrpl	r3, [r4, #20]
1a008772:	60a3      	str	r3, [r4, #8]
1a008774:	e7f2      	b.n	1a00875c <__swsetup_r+0xac>
1a008776:	2000      	movs	r0, #0
1a008778:	e7f7      	b.n	1a00876a <__swsetup_r+0xba>
1a00877a:	bf00      	nop
1a00877c:	100000a0 	.word	0x100000a0
1a008780:	1a009ff8 	.word	0x1a009ff8
1a008784:	1a00a018 	.word	0x1a00a018
1a008788:	1a009fd8 	.word	0x1a009fd8

1a00878c <__sflush_r>:
1a00878c:	898a      	ldrh	r2, [r1, #12]
1a00878e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a008792:	4605      	mov	r5, r0
1a008794:	0710      	lsls	r0, r2, #28
1a008796:	460c      	mov	r4, r1
1a008798:	d458      	bmi.n	1a00884c <__sflush_r+0xc0>
1a00879a:	684b      	ldr	r3, [r1, #4]
1a00879c:	2b00      	cmp	r3, #0
1a00879e:	dc05      	bgt.n	1a0087ac <__sflush_r+0x20>
1a0087a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a0087a2:	2b00      	cmp	r3, #0
1a0087a4:	dc02      	bgt.n	1a0087ac <__sflush_r+0x20>
1a0087a6:	2000      	movs	r0, #0
1a0087a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0087ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0087ae:	2e00      	cmp	r6, #0
1a0087b0:	d0f9      	beq.n	1a0087a6 <__sflush_r+0x1a>
1a0087b2:	2300      	movs	r3, #0
1a0087b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0087b8:	682f      	ldr	r7, [r5, #0]
1a0087ba:	6a21      	ldr	r1, [r4, #32]
1a0087bc:	602b      	str	r3, [r5, #0]
1a0087be:	d032      	beq.n	1a008826 <__sflush_r+0x9a>
1a0087c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0087c2:	89a3      	ldrh	r3, [r4, #12]
1a0087c4:	075a      	lsls	r2, r3, #29
1a0087c6:	d505      	bpl.n	1a0087d4 <__sflush_r+0x48>
1a0087c8:	6863      	ldr	r3, [r4, #4]
1a0087ca:	1ac0      	subs	r0, r0, r3
1a0087cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0087ce:	b10b      	cbz	r3, 1a0087d4 <__sflush_r+0x48>
1a0087d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0087d2:	1ac0      	subs	r0, r0, r3
1a0087d4:	2300      	movs	r3, #0
1a0087d6:	4602      	mov	r2, r0
1a0087d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0087da:	6a21      	ldr	r1, [r4, #32]
1a0087dc:	4628      	mov	r0, r5
1a0087de:	47b0      	blx	r6
1a0087e0:	1c43      	adds	r3, r0, #1
1a0087e2:	89a3      	ldrh	r3, [r4, #12]
1a0087e4:	d106      	bne.n	1a0087f4 <__sflush_r+0x68>
1a0087e6:	6829      	ldr	r1, [r5, #0]
1a0087e8:	291d      	cmp	r1, #29
1a0087ea:	d848      	bhi.n	1a00887e <__sflush_r+0xf2>
1a0087ec:	4a29      	ldr	r2, [pc, #164]	; (1a008894 <__sflush_r+0x108>)
1a0087ee:	40ca      	lsrs	r2, r1
1a0087f0:	07d6      	lsls	r6, r2, #31
1a0087f2:	d544      	bpl.n	1a00887e <__sflush_r+0xf2>
1a0087f4:	2200      	movs	r2, #0
1a0087f6:	6062      	str	r2, [r4, #4]
1a0087f8:	04d9      	lsls	r1, r3, #19
1a0087fa:	6922      	ldr	r2, [r4, #16]
1a0087fc:	6022      	str	r2, [r4, #0]
1a0087fe:	d504      	bpl.n	1a00880a <__sflush_r+0x7e>
1a008800:	1c42      	adds	r2, r0, #1
1a008802:	d101      	bne.n	1a008808 <__sflush_r+0x7c>
1a008804:	682b      	ldr	r3, [r5, #0]
1a008806:	b903      	cbnz	r3, 1a00880a <__sflush_r+0x7e>
1a008808:	6560      	str	r0, [r4, #84]	; 0x54
1a00880a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00880c:	602f      	str	r7, [r5, #0]
1a00880e:	2900      	cmp	r1, #0
1a008810:	d0c9      	beq.n	1a0087a6 <__sflush_r+0x1a>
1a008812:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a008816:	4299      	cmp	r1, r3
1a008818:	d002      	beq.n	1a008820 <__sflush_r+0x94>
1a00881a:	4628      	mov	r0, r5
1a00881c:	f7ff fdba 	bl	1a008394 <_free_r>
1a008820:	2000      	movs	r0, #0
1a008822:	6360      	str	r0, [r4, #52]	; 0x34
1a008824:	e7c0      	b.n	1a0087a8 <__sflush_r+0x1c>
1a008826:	2301      	movs	r3, #1
1a008828:	4628      	mov	r0, r5
1a00882a:	47b0      	blx	r6
1a00882c:	1c41      	adds	r1, r0, #1
1a00882e:	d1c8      	bne.n	1a0087c2 <__sflush_r+0x36>
1a008830:	682b      	ldr	r3, [r5, #0]
1a008832:	2b00      	cmp	r3, #0
1a008834:	d0c5      	beq.n	1a0087c2 <__sflush_r+0x36>
1a008836:	2b1d      	cmp	r3, #29
1a008838:	d001      	beq.n	1a00883e <__sflush_r+0xb2>
1a00883a:	2b16      	cmp	r3, #22
1a00883c:	d101      	bne.n	1a008842 <__sflush_r+0xb6>
1a00883e:	602f      	str	r7, [r5, #0]
1a008840:	e7b1      	b.n	1a0087a6 <__sflush_r+0x1a>
1a008842:	89a3      	ldrh	r3, [r4, #12]
1a008844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008848:	81a3      	strh	r3, [r4, #12]
1a00884a:	e7ad      	b.n	1a0087a8 <__sflush_r+0x1c>
1a00884c:	690f      	ldr	r7, [r1, #16]
1a00884e:	2f00      	cmp	r7, #0
1a008850:	d0a9      	beq.n	1a0087a6 <__sflush_r+0x1a>
1a008852:	0793      	lsls	r3, r2, #30
1a008854:	680e      	ldr	r6, [r1, #0]
1a008856:	bf08      	it	eq
1a008858:	694b      	ldreq	r3, [r1, #20]
1a00885a:	600f      	str	r7, [r1, #0]
1a00885c:	bf18      	it	ne
1a00885e:	2300      	movne	r3, #0
1a008860:	eba6 0807 	sub.w	r8, r6, r7
1a008864:	608b      	str	r3, [r1, #8]
1a008866:	f1b8 0f00 	cmp.w	r8, #0
1a00886a:	dd9c      	ble.n	1a0087a6 <__sflush_r+0x1a>
1a00886c:	4643      	mov	r3, r8
1a00886e:	463a      	mov	r2, r7
1a008870:	6a21      	ldr	r1, [r4, #32]
1a008872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a008874:	4628      	mov	r0, r5
1a008876:	47b0      	blx	r6
1a008878:	2800      	cmp	r0, #0
1a00887a:	dc06      	bgt.n	1a00888a <__sflush_r+0xfe>
1a00887c:	89a3      	ldrh	r3, [r4, #12]
1a00887e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a008882:	81a3      	strh	r3, [r4, #12]
1a008884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008888:	e78e      	b.n	1a0087a8 <__sflush_r+0x1c>
1a00888a:	4407      	add	r7, r0
1a00888c:	eba8 0800 	sub.w	r8, r8, r0
1a008890:	e7e9      	b.n	1a008866 <__sflush_r+0xda>
1a008892:	bf00      	nop
1a008894:	20400001 	.word	0x20400001

1a008898 <_fflush_r>:
1a008898:	b538      	push	{r3, r4, r5, lr}
1a00889a:	690b      	ldr	r3, [r1, #16]
1a00889c:	4605      	mov	r5, r0
1a00889e:	460c      	mov	r4, r1
1a0088a0:	b1db      	cbz	r3, 1a0088da <_fflush_r+0x42>
1a0088a2:	b118      	cbz	r0, 1a0088ac <_fflush_r+0x14>
1a0088a4:	6983      	ldr	r3, [r0, #24]
1a0088a6:	b90b      	cbnz	r3, 1a0088ac <_fflush_r+0x14>
1a0088a8:	f000 f860 	bl	1a00896c <__sinit>
1a0088ac:	4b0c      	ldr	r3, [pc, #48]	; (1a0088e0 <_fflush_r+0x48>)
1a0088ae:	429c      	cmp	r4, r3
1a0088b0:	d109      	bne.n	1a0088c6 <_fflush_r+0x2e>
1a0088b2:	686c      	ldr	r4, [r5, #4]
1a0088b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0088b8:	b17b      	cbz	r3, 1a0088da <_fflush_r+0x42>
1a0088ba:	4621      	mov	r1, r4
1a0088bc:	4628      	mov	r0, r5
1a0088be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0088c2:	f7ff bf63 	b.w	1a00878c <__sflush_r>
1a0088c6:	4b07      	ldr	r3, [pc, #28]	; (1a0088e4 <_fflush_r+0x4c>)
1a0088c8:	429c      	cmp	r4, r3
1a0088ca:	d101      	bne.n	1a0088d0 <_fflush_r+0x38>
1a0088cc:	68ac      	ldr	r4, [r5, #8]
1a0088ce:	e7f1      	b.n	1a0088b4 <_fflush_r+0x1c>
1a0088d0:	4b05      	ldr	r3, [pc, #20]	; (1a0088e8 <_fflush_r+0x50>)
1a0088d2:	429c      	cmp	r4, r3
1a0088d4:	bf08      	it	eq
1a0088d6:	68ec      	ldreq	r4, [r5, #12]
1a0088d8:	e7ec      	b.n	1a0088b4 <_fflush_r+0x1c>
1a0088da:	2000      	movs	r0, #0
1a0088dc:	bd38      	pop	{r3, r4, r5, pc}
1a0088de:	bf00      	nop
1a0088e0:	1a009ff8 	.word	0x1a009ff8
1a0088e4:	1a00a018 	.word	0x1a00a018
1a0088e8:	1a009fd8 	.word	0x1a009fd8

1a0088ec <std>:
1a0088ec:	2300      	movs	r3, #0
1a0088ee:	b510      	push	{r4, lr}
1a0088f0:	4604      	mov	r4, r0
1a0088f2:	e9c0 3300 	strd	r3, r3, [r0]
1a0088f6:	6083      	str	r3, [r0, #8]
1a0088f8:	8181      	strh	r1, [r0, #12]
1a0088fa:	6643      	str	r3, [r0, #100]	; 0x64
1a0088fc:	81c2      	strh	r2, [r0, #14]
1a0088fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a008902:	6183      	str	r3, [r0, #24]
1a008904:	4619      	mov	r1, r3
1a008906:	2208      	movs	r2, #8
1a008908:	305c      	adds	r0, #92	; 0x5c
1a00890a:	f7ff fd3a 	bl	1a008382 <memset>
1a00890e:	4b05      	ldr	r3, [pc, #20]	; (1a008924 <std+0x38>)
1a008910:	6263      	str	r3, [r4, #36]	; 0x24
1a008912:	4b05      	ldr	r3, [pc, #20]	; (1a008928 <std+0x3c>)
1a008914:	62a3      	str	r3, [r4, #40]	; 0x28
1a008916:	4b05      	ldr	r3, [pc, #20]	; (1a00892c <std+0x40>)
1a008918:	62e3      	str	r3, [r4, #44]	; 0x2c
1a00891a:	4b05      	ldr	r3, [pc, #20]	; (1a008930 <std+0x44>)
1a00891c:	6224      	str	r4, [r4, #32]
1a00891e:	6323      	str	r3, [r4, #48]	; 0x30
1a008920:	bd10      	pop	{r4, pc}
1a008922:	bf00      	nop
1a008924:	1a0090dd 	.word	0x1a0090dd
1a008928:	1a0090ff 	.word	0x1a0090ff
1a00892c:	1a009137 	.word	0x1a009137
1a008930:	1a00915b 	.word	0x1a00915b

1a008934 <_cleanup_r>:
1a008934:	4901      	ldr	r1, [pc, #4]	; (1a00893c <_cleanup_r+0x8>)
1a008936:	f000 b885 	b.w	1a008a44 <_fwalk_reent>
1a00893a:	bf00      	nop
1a00893c:	1a008899 	.word	0x1a008899

1a008940 <__sfmoreglue>:
1a008940:	b570      	push	{r4, r5, r6, lr}
1a008942:	1e4a      	subs	r2, r1, #1
1a008944:	2568      	movs	r5, #104	; 0x68
1a008946:	4355      	muls	r5, r2
1a008948:	460e      	mov	r6, r1
1a00894a:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a00894e:	f7ff fd6f 	bl	1a008430 <_malloc_r>
1a008952:	4604      	mov	r4, r0
1a008954:	b140      	cbz	r0, 1a008968 <__sfmoreglue+0x28>
1a008956:	2100      	movs	r1, #0
1a008958:	e9c0 1600 	strd	r1, r6, [r0]
1a00895c:	300c      	adds	r0, #12
1a00895e:	60a0      	str	r0, [r4, #8]
1a008960:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a008964:	f7ff fd0d 	bl	1a008382 <memset>
1a008968:	4620      	mov	r0, r4
1a00896a:	bd70      	pop	{r4, r5, r6, pc}

1a00896c <__sinit>:
1a00896c:	6983      	ldr	r3, [r0, #24]
1a00896e:	b510      	push	{r4, lr}
1a008970:	4604      	mov	r4, r0
1a008972:	bb33      	cbnz	r3, 1a0089c2 <__sinit+0x56>
1a008974:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a008978:	6503      	str	r3, [r0, #80]	; 0x50
1a00897a:	4b12      	ldr	r3, [pc, #72]	; (1a0089c4 <__sinit+0x58>)
1a00897c:	4a12      	ldr	r2, [pc, #72]	; (1a0089c8 <__sinit+0x5c>)
1a00897e:	681b      	ldr	r3, [r3, #0]
1a008980:	6282      	str	r2, [r0, #40]	; 0x28
1a008982:	4298      	cmp	r0, r3
1a008984:	bf04      	itt	eq
1a008986:	2301      	moveq	r3, #1
1a008988:	6183      	streq	r3, [r0, #24]
1a00898a:	f000 f81f 	bl	1a0089cc <__sfp>
1a00898e:	6060      	str	r0, [r4, #4]
1a008990:	4620      	mov	r0, r4
1a008992:	f000 f81b 	bl	1a0089cc <__sfp>
1a008996:	60a0      	str	r0, [r4, #8]
1a008998:	4620      	mov	r0, r4
1a00899a:	f000 f817 	bl	1a0089cc <__sfp>
1a00899e:	2200      	movs	r2, #0
1a0089a0:	60e0      	str	r0, [r4, #12]
1a0089a2:	2104      	movs	r1, #4
1a0089a4:	6860      	ldr	r0, [r4, #4]
1a0089a6:	f7ff ffa1 	bl	1a0088ec <std>
1a0089aa:	2201      	movs	r2, #1
1a0089ac:	2109      	movs	r1, #9
1a0089ae:	68a0      	ldr	r0, [r4, #8]
1a0089b0:	f7ff ff9c 	bl	1a0088ec <std>
1a0089b4:	2202      	movs	r2, #2
1a0089b6:	2112      	movs	r1, #18
1a0089b8:	68e0      	ldr	r0, [r4, #12]
1a0089ba:	f7ff ff97 	bl	1a0088ec <std>
1a0089be:	2301      	movs	r3, #1
1a0089c0:	61a3      	str	r3, [r4, #24]
1a0089c2:	bd10      	pop	{r4, pc}
1a0089c4:	1a00a038 	.word	0x1a00a038
1a0089c8:	1a008935 	.word	0x1a008935

1a0089cc <__sfp>:
1a0089cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0089ce:	4b1b      	ldr	r3, [pc, #108]	; (1a008a3c <__sfp+0x70>)
1a0089d0:	681e      	ldr	r6, [r3, #0]
1a0089d2:	69b3      	ldr	r3, [r6, #24]
1a0089d4:	4607      	mov	r7, r0
1a0089d6:	b913      	cbnz	r3, 1a0089de <__sfp+0x12>
1a0089d8:	4630      	mov	r0, r6
1a0089da:	f7ff ffc7 	bl	1a00896c <__sinit>
1a0089de:	3648      	adds	r6, #72	; 0x48
1a0089e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a0089e4:	3b01      	subs	r3, #1
1a0089e6:	d503      	bpl.n	1a0089f0 <__sfp+0x24>
1a0089e8:	6833      	ldr	r3, [r6, #0]
1a0089ea:	b133      	cbz	r3, 1a0089fa <__sfp+0x2e>
1a0089ec:	6836      	ldr	r6, [r6, #0]
1a0089ee:	e7f7      	b.n	1a0089e0 <__sfp+0x14>
1a0089f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a0089f4:	b16d      	cbz	r5, 1a008a12 <__sfp+0x46>
1a0089f6:	3468      	adds	r4, #104	; 0x68
1a0089f8:	e7f4      	b.n	1a0089e4 <__sfp+0x18>
1a0089fa:	2104      	movs	r1, #4
1a0089fc:	4638      	mov	r0, r7
1a0089fe:	f7ff ff9f 	bl	1a008940 <__sfmoreglue>
1a008a02:	6030      	str	r0, [r6, #0]
1a008a04:	2800      	cmp	r0, #0
1a008a06:	d1f1      	bne.n	1a0089ec <__sfp+0x20>
1a008a08:	230c      	movs	r3, #12
1a008a0a:	603b      	str	r3, [r7, #0]
1a008a0c:	4604      	mov	r4, r0
1a008a0e:	4620      	mov	r0, r4
1a008a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a008a12:	4b0b      	ldr	r3, [pc, #44]	; (1a008a40 <__sfp+0x74>)
1a008a14:	6665      	str	r5, [r4, #100]	; 0x64
1a008a16:	e9c4 5500 	strd	r5, r5, [r4]
1a008a1a:	60a5      	str	r5, [r4, #8]
1a008a1c:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a008a20:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a008a24:	2208      	movs	r2, #8
1a008a26:	4629      	mov	r1, r5
1a008a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a008a2c:	f7ff fca9 	bl	1a008382 <memset>
1a008a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a008a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a008a38:	e7e9      	b.n	1a008a0e <__sfp+0x42>
1a008a3a:	bf00      	nop
1a008a3c:	1a00a038 	.word	0x1a00a038
1a008a40:	ffff0001 	.word	0xffff0001

1a008a44 <_fwalk_reent>:
1a008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a008a48:	4680      	mov	r8, r0
1a008a4a:	4689      	mov	r9, r1
1a008a4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a008a50:	2600      	movs	r6, #0
1a008a52:	b914      	cbnz	r4, 1a008a5a <_fwalk_reent+0x16>
1a008a54:	4630      	mov	r0, r6
1a008a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a008a5a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a008a5e:	3f01      	subs	r7, #1
1a008a60:	d501      	bpl.n	1a008a66 <_fwalk_reent+0x22>
1a008a62:	6824      	ldr	r4, [r4, #0]
1a008a64:	e7f5      	b.n	1a008a52 <_fwalk_reent+0xe>
1a008a66:	89ab      	ldrh	r3, [r5, #12]
1a008a68:	2b01      	cmp	r3, #1
1a008a6a:	d907      	bls.n	1a008a7c <_fwalk_reent+0x38>
1a008a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a008a70:	3301      	adds	r3, #1
1a008a72:	d003      	beq.n	1a008a7c <_fwalk_reent+0x38>
1a008a74:	4629      	mov	r1, r5
1a008a76:	4640      	mov	r0, r8
1a008a78:	47c8      	blx	r9
1a008a7a:	4306      	orrs	r6, r0
1a008a7c:	3568      	adds	r5, #104	; 0x68
1a008a7e:	e7ee      	b.n	1a008a5e <_fwalk_reent+0x1a>

1a008a80 <__swhatbuf_r>:
1a008a80:	b570      	push	{r4, r5, r6, lr}
1a008a82:	460e      	mov	r6, r1
1a008a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a008a88:	2900      	cmp	r1, #0
1a008a8a:	b096      	sub	sp, #88	; 0x58
1a008a8c:	4614      	mov	r4, r2
1a008a8e:	461d      	mov	r5, r3
1a008a90:	da07      	bge.n	1a008aa2 <__swhatbuf_r+0x22>
1a008a92:	2300      	movs	r3, #0
1a008a94:	602b      	str	r3, [r5, #0]
1a008a96:	89b3      	ldrh	r3, [r6, #12]
1a008a98:	061a      	lsls	r2, r3, #24
1a008a9a:	d410      	bmi.n	1a008abe <__swhatbuf_r+0x3e>
1a008a9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a008aa0:	e00e      	b.n	1a008ac0 <__swhatbuf_r+0x40>
1a008aa2:	466a      	mov	r2, sp
1a008aa4:	f7f7 ff87 	bl	1a0009b6 <_fstat_r>
1a008aa8:	2800      	cmp	r0, #0
1a008aaa:	dbf2      	blt.n	1a008a92 <__swhatbuf_r+0x12>
1a008aac:	9a01      	ldr	r2, [sp, #4]
1a008aae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a008ab2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a008ab6:	425a      	negs	r2, r3
1a008ab8:	415a      	adcs	r2, r3
1a008aba:	602a      	str	r2, [r5, #0]
1a008abc:	e7ee      	b.n	1a008a9c <__swhatbuf_r+0x1c>
1a008abe:	2340      	movs	r3, #64	; 0x40
1a008ac0:	2000      	movs	r0, #0
1a008ac2:	6023      	str	r3, [r4, #0]
1a008ac4:	b016      	add	sp, #88	; 0x58
1a008ac6:	bd70      	pop	{r4, r5, r6, pc}

1a008ac8 <__smakebuf_r>:
1a008ac8:	898b      	ldrh	r3, [r1, #12]
1a008aca:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a008acc:	079d      	lsls	r5, r3, #30
1a008ace:	4606      	mov	r6, r0
1a008ad0:	460c      	mov	r4, r1
1a008ad2:	d507      	bpl.n	1a008ae4 <__smakebuf_r+0x1c>
1a008ad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a008ad8:	6023      	str	r3, [r4, #0]
1a008ada:	6123      	str	r3, [r4, #16]
1a008adc:	2301      	movs	r3, #1
1a008ade:	6163      	str	r3, [r4, #20]
1a008ae0:	b002      	add	sp, #8
1a008ae2:	bd70      	pop	{r4, r5, r6, pc}
1a008ae4:	ab01      	add	r3, sp, #4
1a008ae6:	466a      	mov	r2, sp
1a008ae8:	f7ff ffca 	bl	1a008a80 <__swhatbuf_r>
1a008aec:	9900      	ldr	r1, [sp, #0]
1a008aee:	4605      	mov	r5, r0
1a008af0:	4630      	mov	r0, r6
1a008af2:	f7ff fc9d 	bl	1a008430 <_malloc_r>
1a008af6:	b948      	cbnz	r0, 1a008b0c <__smakebuf_r+0x44>
1a008af8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a008afc:	059a      	lsls	r2, r3, #22
1a008afe:	d4ef      	bmi.n	1a008ae0 <__smakebuf_r+0x18>
1a008b00:	f023 0303 	bic.w	r3, r3, #3
1a008b04:	f043 0302 	orr.w	r3, r3, #2
1a008b08:	81a3      	strh	r3, [r4, #12]
1a008b0a:	e7e3      	b.n	1a008ad4 <__smakebuf_r+0xc>
1a008b0c:	4b0d      	ldr	r3, [pc, #52]	; (1a008b44 <__smakebuf_r+0x7c>)
1a008b0e:	62b3      	str	r3, [r6, #40]	; 0x28
1a008b10:	89a3      	ldrh	r3, [r4, #12]
1a008b12:	6020      	str	r0, [r4, #0]
1a008b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a008b18:	81a3      	strh	r3, [r4, #12]
1a008b1a:	9b00      	ldr	r3, [sp, #0]
1a008b1c:	6163      	str	r3, [r4, #20]
1a008b1e:	9b01      	ldr	r3, [sp, #4]
1a008b20:	6120      	str	r0, [r4, #16]
1a008b22:	b15b      	cbz	r3, 1a008b3c <__smakebuf_r+0x74>
1a008b24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a008b28:	4630      	mov	r0, r6
1a008b2a:	f7f7 ff49 	bl	1a0009c0 <_isatty_r>
1a008b2e:	b128      	cbz	r0, 1a008b3c <__smakebuf_r+0x74>
1a008b30:	89a3      	ldrh	r3, [r4, #12]
1a008b32:	f023 0303 	bic.w	r3, r3, #3
1a008b36:	f043 0301 	orr.w	r3, r3, #1
1a008b3a:	81a3      	strh	r3, [r4, #12]
1a008b3c:	89a3      	ldrh	r3, [r4, #12]
1a008b3e:	431d      	orrs	r5, r3
1a008b40:	81a5      	strh	r5, [r4, #12]
1a008b42:	e7cd      	b.n	1a008ae0 <__smakebuf_r+0x18>
1a008b44:	1a008935 	.word	0x1a008935

1a008b48 <__malloc_lock>:
1a008b48:	4770      	bx	lr

1a008b4a <__malloc_unlock>:
1a008b4a:	4770      	bx	lr

1a008b4c <__sfputc_r>:
1a008b4c:	6893      	ldr	r3, [r2, #8]
1a008b4e:	3b01      	subs	r3, #1
1a008b50:	2b00      	cmp	r3, #0
1a008b52:	b410      	push	{r4}
1a008b54:	6093      	str	r3, [r2, #8]
1a008b56:	da08      	bge.n	1a008b6a <__sfputc_r+0x1e>
1a008b58:	6994      	ldr	r4, [r2, #24]
1a008b5a:	42a3      	cmp	r3, r4
1a008b5c:	db01      	blt.n	1a008b62 <__sfputc_r+0x16>
1a008b5e:	290a      	cmp	r1, #10
1a008b60:	d103      	bne.n	1a008b6a <__sfputc_r+0x1e>
1a008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
1a008b66:	f7ff bd51 	b.w	1a00860c <__swbuf_r>
1a008b6a:	6813      	ldr	r3, [r2, #0]
1a008b6c:	1c58      	adds	r0, r3, #1
1a008b6e:	6010      	str	r0, [r2, #0]
1a008b70:	7019      	strb	r1, [r3, #0]
1a008b72:	4608      	mov	r0, r1
1a008b74:	f85d 4b04 	ldr.w	r4, [sp], #4
1a008b78:	4770      	bx	lr

1a008b7a <__sfputs_r>:
1a008b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a008b7c:	4606      	mov	r6, r0
1a008b7e:	460f      	mov	r7, r1
1a008b80:	4614      	mov	r4, r2
1a008b82:	18d5      	adds	r5, r2, r3
1a008b84:	42ac      	cmp	r4, r5
1a008b86:	d101      	bne.n	1a008b8c <__sfputs_r+0x12>
1a008b88:	2000      	movs	r0, #0
1a008b8a:	e007      	b.n	1a008b9c <__sfputs_r+0x22>
1a008b8c:	463a      	mov	r2, r7
1a008b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a008b92:	4630      	mov	r0, r6
1a008b94:	f7ff ffda 	bl	1a008b4c <__sfputc_r>
1a008b98:	1c43      	adds	r3, r0, #1
1a008b9a:	d1f3      	bne.n	1a008b84 <__sfputs_r+0xa>
1a008b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a008b9e:	Address 0x000000001a008b9e is out of bounds.


1a008ba0 <_vfiprintf_r>:
1a008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a008ba4:	460c      	mov	r4, r1
1a008ba6:	b09d      	sub	sp, #116	; 0x74
1a008ba8:	4617      	mov	r7, r2
1a008baa:	461d      	mov	r5, r3
1a008bac:	4606      	mov	r6, r0
1a008bae:	b118      	cbz	r0, 1a008bb8 <_vfiprintf_r+0x18>
1a008bb0:	6983      	ldr	r3, [r0, #24]
1a008bb2:	b90b      	cbnz	r3, 1a008bb8 <_vfiprintf_r+0x18>
1a008bb4:	f7ff feda 	bl	1a00896c <__sinit>
1a008bb8:	4b7c      	ldr	r3, [pc, #496]	; (1a008dac <_vfiprintf_r+0x20c>)
1a008bba:	429c      	cmp	r4, r3
1a008bbc:	d158      	bne.n	1a008c70 <_vfiprintf_r+0xd0>
1a008bbe:	6874      	ldr	r4, [r6, #4]
1a008bc0:	89a3      	ldrh	r3, [r4, #12]
1a008bc2:	0718      	lsls	r0, r3, #28
1a008bc4:	d55e      	bpl.n	1a008c84 <_vfiprintf_r+0xe4>
1a008bc6:	6923      	ldr	r3, [r4, #16]
1a008bc8:	2b00      	cmp	r3, #0
1a008bca:	d05b      	beq.n	1a008c84 <_vfiprintf_r+0xe4>
1a008bcc:	2300      	movs	r3, #0
1a008bce:	9309      	str	r3, [sp, #36]	; 0x24
1a008bd0:	2320      	movs	r3, #32
1a008bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a008bd6:	2330      	movs	r3, #48	; 0x30
1a008bd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a008bdc:	9503      	str	r5, [sp, #12]
1a008bde:	f04f 0b01 	mov.w	fp, #1
1a008be2:	46b8      	mov	r8, r7
1a008be4:	4645      	mov	r5, r8
1a008be6:	f815 3b01 	ldrb.w	r3, [r5], #1
1a008bea:	b10b      	cbz	r3, 1a008bf0 <_vfiprintf_r+0x50>
1a008bec:	2b25      	cmp	r3, #37	; 0x25
1a008bee:	d154      	bne.n	1a008c9a <_vfiprintf_r+0xfa>
1a008bf0:	ebb8 0a07 	subs.w	sl, r8, r7
1a008bf4:	d00b      	beq.n	1a008c0e <_vfiprintf_r+0x6e>
1a008bf6:	4653      	mov	r3, sl
1a008bf8:	463a      	mov	r2, r7
1a008bfa:	4621      	mov	r1, r4
1a008bfc:	4630      	mov	r0, r6
1a008bfe:	f7ff ffbc 	bl	1a008b7a <__sfputs_r>
1a008c02:	3001      	adds	r0, #1
1a008c04:	f000 80c2 	beq.w	1a008d8c <_vfiprintf_r+0x1ec>
1a008c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008c0a:	4453      	add	r3, sl
1a008c0c:	9309      	str	r3, [sp, #36]	; 0x24
1a008c0e:	f898 3000 	ldrb.w	r3, [r8]
1a008c12:	2b00      	cmp	r3, #0
1a008c14:	f000 80ba 	beq.w	1a008d8c <_vfiprintf_r+0x1ec>
1a008c18:	2300      	movs	r3, #0
1a008c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a008c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a008c22:	9304      	str	r3, [sp, #16]
1a008c24:	9307      	str	r3, [sp, #28]
1a008c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a008c2a:	931a      	str	r3, [sp, #104]	; 0x68
1a008c2c:	46a8      	mov	r8, r5
1a008c2e:	2205      	movs	r2, #5
1a008c30:	f818 1b01 	ldrb.w	r1, [r8], #1
1a008c34:	485e      	ldr	r0, [pc, #376]	; (1a008db0 <_vfiprintf_r+0x210>)
1a008c36:	f000 fa9b 	bl	1a009170 <memchr>
1a008c3a:	9b04      	ldr	r3, [sp, #16]
1a008c3c:	bb78      	cbnz	r0, 1a008c9e <_vfiprintf_r+0xfe>
1a008c3e:	06d9      	lsls	r1, r3, #27
1a008c40:	bf44      	itt	mi
1a008c42:	2220      	movmi	r2, #32
1a008c44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a008c48:	071a      	lsls	r2, r3, #28
1a008c4a:	bf44      	itt	mi
1a008c4c:	222b      	movmi	r2, #43	; 0x2b
1a008c4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a008c52:	782a      	ldrb	r2, [r5, #0]
1a008c54:	2a2a      	cmp	r2, #42	; 0x2a
1a008c56:	d02a      	beq.n	1a008cae <_vfiprintf_r+0x10e>
1a008c58:	9a07      	ldr	r2, [sp, #28]
1a008c5a:	46a8      	mov	r8, r5
1a008c5c:	2000      	movs	r0, #0
1a008c5e:	250a      	movs	r5, #10
1a008c60:	4641      	mov	r1, r8
1a008c62:	f811 3b01 	ldrb.w	r3, [r1], #1
1a008c66:	3b30      	subs	r3, #48	; 0x30
1a008c68:	2b09      	cmp	r3, #9
1a008c6a:	d969      	bls.n	1a008d40 <_vfiprintf_r+0x1a0>
1a008c6c:	b360      	cbz	r0, 1a008cc8 <_vfiprintf_r+0x128>
1a008c6e:	e024      	b.n	1a008cba <_vfiprintf_r+0x11a>
1a008c70:	4b50      	ldr	r3, [pc, #320]	; (1a008db4 <_vfiprintf_r+0x214>)
1a008c72:	429c      	cmp	r4, r3
1a008c74:	d101      	bne.n	1a008c7a <_vfiprintf_r+0xda>
1a008c76:	68b4      	ldr	r4, [r6, #8]
1a008c78:	e7a2      	b.n	1a008bc0 <_vfiprintf_r+0x20>
1a008c7a:	4b4f      	ldr	r3, [pc, #316]	; (1a008db8 <_vfiprintf_r+0x218>)
1a008c7c:	429c      	cmp	r4, r3
1a008c7e:	bf08      	it	eq
1a008c80:	68f4      	ldreq	r4, [r6, #12]
1a008c82:	e79d      	b.n	1a008bc0 <_vfiprintf_r+0x20>
1a008c84:	4621      	mov	r1, r4
1a008c86:	4630      	mov	r0, r6
1a008c88:	f7ff fd12 	bl	1a0086b0 <__swsetup_r>
1a008c8c:	2800      	cmp	r0, #0
1a008c8e:	d09d      	beq.n	1a008bcc <_vfiprintf_r+0x2c>
1a008c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008c94:	b01d      	add	sp, #116	; 0x74
1a008c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a008c9a:	46a8      	mov	r8, r5
1a008c9c:	e7a2      	b.n	1a008be4 <_vfiprintf_r+0x44>
1a008c9e:	4a44      	ldr	r2, [pc, #272]	; (1a008db0 <_vfiprintf_r+0x210>)
1a008ca0:	1a80      	subs	r0, r0, r2
1a008ca2:	fa0b f000 	lsl.w	r0, fp, r0
1a008ca6:	4318      	orrs	r0, r3
1a008ca8:	9004      	str	r0, [sp, #16]
1a008caa:	4645      	mov	r5, r8
1a008cac:	e7be      	b.n	1a008c2c <_vfiprintf_r+0x8c>
1a008cae:	9a03      	ldr	r2, [sp, #12]
1a008cb0:	1d11      	adds	r1, r2, #4
1a008cb2:	6812      	ldr	r2, [r2, #0]
1a008cb4:	9103      	str	r1, [sp, #12]
1a008cb6:	2a00      	cmp	r2, #0
1a008cb8:	db01      	blt.n	1a008cbe <_vfiprintf_r+0x11e>
1a008cba:	9207      	str	r2, [sp, #28]
1a008cbc:	e004      	b.n	1a008cc8 <_vfiprintf_r+0x128>
1a008cbe:	4252      	negs	r2, r2
1a008cc0:	f043 0302 	orr.w	r3, r3, #2
1a008cc4:	9207      	str	r2, [sp, #28]
1a008cc6:	9304      	str	r3, [sp, #16]
1a008cc8:	f898 3000 	ldrb.w	r3, [r8]
1a008ccc:	2b2e      	cmp	r3, #46	; 0x2e
1a008cce:	d10e      	bne.n	1a008cee <_vfiprintf_r+0x14e>
1a008cd0:	f898 3001 	ldrb.w	r3, [r8, #1]
1a008cd4:	2b2a      	cmp	r3, #42	; 0x2a
1a008cd6:	d138      	bne.n	1a008d4a <_vfiprintf_r+0x1aa>
1a008cd8:	9b03      	ldr	r3, [sp, #12]
1a008cda:	1d1a      	adds	r2, r3, #4
1a008cdc:	681b      	ldr	r3, [r3, #0]
1a008cde:	9203      	str	r2, [sp, #12]
1a008ce0:	2b00      	cmp	r3, #0
1a008ce2:	bfb8      	it	lt
1a008ce4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a008ce8:	f108 0802 	add.w	r8, r8, #2
1a008cec:	9305      	str	r3, [sp, #20]
1a008cee:	4d33      	ldr	r5, [pc, #204]	; (1a008dbc <_vfiprintf_r+0x21c>)
1a008cf0:	f898 1000 	ldrb.w	r1, [r8]
1a008cf4:	2203      	movs	r2, #3
1a008cf6:	4628      	mov	r0, r5
1a008cf8:	f000 fa3a 	bl	1a009170 <memchr>
1a008cfc:	b140      	cbz	r0, 1a008d10 <_vfiprintf_r+0x170>
1a008cfe:	2340      	movs	r3, #64	; 0x40
1a008d00:	1b40      	subs	r0, r0, r5
1a008d02:	fa03 f000 	lsl.w	r0, r3, r0
1a008d06:	9b04      	ldr	r3, [sp, #16]
1a008d08:	4303      	orrs	r3, r0
1a008d0a:	f108 0801 	add.w	r8, r8, #1
1a008d0e:	9304      	str	r3, [sp, #16]
1a008d10:	f898 1000 	ldrb.w	r1, [r8]
1a008d14:	482a      	ldr	r0, [pc, #168]	; (1a008dc0 <_vfiprintf_r+0x220>)
1a008d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a008d1a:	2206      	movs	r2, #6
1a008d1c:	f108 0701 	add.w	r7, r8, #1
1a008d20:	f000 fa26 	bl	1a009170 <memchr>
1a008d24:	2800      	cmp	r0, #0
1a008d26:	d037      	beq.n	1a008d98 <_vfiprintf_r+0x1f8>
1a008d28:	4b26      	ldr	r3, [pc, #152]	; (1a008dc4 <_vfiprintf_r+0x224>)
1a008d2a:	bb1b      	cbnz	r3, 1a008d74 <_vfiprintf_r+0x1d4>
1a008d2c:	9b03      	ldr	r3, [sp, #12]
1a008d2e:	3307      	adds	r3, #7
1a008d30:	f023 0307 	bic.w	r3, r3, #7
1a008d34:	3308      	adds	r3, #8
1a008d36:	9303      	str	r3, [sp, #12]
1a008d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a008d3a:	444b      	add	r3, r9
1a008d3c:	9309      	str	r3, [sp, #36]	; 0x24
1a008d3e:	e750      	b.n	1a008be2 <_vfiprintf_r+0x42>
1a008d40:	fb05 3202 	mla	r2, r5, r2, r3
1a008d44:	2001      	movs	r0, #1
1a008d46:	4688      	mov	r8, r1
1a008d48:	e78a      	b.n	1a008c60 <_vfiprintf_r+0xc0>
1a008d4a:	2300      	movs	r3, #0
1a008d4c:	f108 0801 	add.w	r8, r8, #1
1a008d50:	9305      	str	r3, [sp, #20]
1a008d52:	4619      	mov	r1, r3
1a008d54:	250a      	movs	r5, #10
1a008d56:	4640      	mov	r0, r8
1a008d58:	f810 2b01 	ldrb.w	r2, [r0], #1
1a008d5c:	3a30      	subs	r2, #48	; 0x30
1a008d5e:	2a09      	cmp	r2, #9
1a008d60:	d903      	bls.n	1a008d6a <_vfiprintf_r+0x1ca>
1a008d62:	2b00      	cmp	r3, #0
1a008d64:	d0c3      	beq.n	1a008cee <_vfiprintf_r+0x14e>
1a008d66:	9105      	str	r1, [sp, #20]
1a008d68:	e7c1      	b.n	1a008cee <_vfiprintf_r+0x14e>
1a008d6a:	fb05 2101 	mla	r1, r5, r1, r2
1a008d6e:	2301      	movs	r3, #1
1a008d70:	4680      	mov	r8, r0
1a008d72:	e7f0      	b.n	1a008d56 <_vfiprintf_r+0x1b6>
1a008d74:	ab03      	add	r3, sp, #12
1a008d76:	9300      	str	r3, [sp, #0]
1a008d78:	4622      	mov	r2, r4
1a008d7a:	4b13      	ldr	r3, [pc, #76]	; (1a008dc8 <_vfiprintf_r+0x228>)
1a008d7c:	a904      	add	r1, sp, #16
1a008d7e:	4630      	mov	r0, r6
1a008d80:	f3af 8000 	nop.w
1a008d84:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a008d88:	4681      	mov	r9, r0
1a008d8a:	d1d5      	bne.n	1a008d38 <_vfiprintf_r+0x198>
1a008d8c:	89a3      	ldrh	r3, [r4, #12]
1a008d8e:	065b      	lsls	r3, r3, #25
1a008d90:	f53f af7e 	bmi.w	1a008c90 <_vfiprintf_r+0xf0>
1a008d94:	9809      	ldr	r0, [sp, #36]	; 0x24
1a008d96:	e77d      	b.n	1a008c94 <_vfiprintf_r+0xf4>
1a008d98:	ab03      	add	r3, sp, #12
1a008d9a:	9300      	str	r3, [sp, #0]
1a008d9c:	4622      	mov	r2, r4
1a008d9e:	4b0a      	ldr	r3, [pc, #40]	; (1a008dc8 <_vfiprintf_r+0x228>)
1a008da0:	a904      	add	r1, sp, #16
1a008da2:	4630      	mov	r0, r6
1a008da4:	f000 f888 	bl	1a008eb8 <_printf_i>
1a008da8:	e7ec      	b.n	1a008d84 <_vfiprintf_r+0x1e4>
1a008daa:	bf00      	nop
1a008dac:	1a009ff8 	.word	0x1a009ff8
1a008db0:	1a00a03c 	.word	0x1a00a03c
1a008db4:	1a00a018 	.word	0x1a00a018
1a008db8:	1a009fd8 	.word	0x1a009fd8
1a008dbc:	1a00a042 	.word	0x1a00a042
1a008dc0:	1a00a046 	.word	0x1a00a046
1a008dc4:	00000000 	.word	0x00000000
1a008dc8:	1a008b7b 	.word	0x1a008b7b

1a008dcc <_printf_common>:
1a008dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a008dd0:	4691      	mov	r9, r2
1a008dd2:	461f      	mov	r7, r3
1a008dd4:	688a      	ldr	r2, [r1, #8]
1a008dd6:	690b      	ldr	r3, [r1, #16]
1a008dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a008ddc:	4293      	cmp	r3, r2
1a008dde:	bfb8      	it	lt
1a008de0:	4613      	movlt	r3, r2
1a008de2:	f8c9 3000 	str.w	r3, [r9]
1a008de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a008dea:	4606      	mov	r6, r0
1a008dec:	460c      	mov	r4, r1
1a008dee:	b112      	cbz	r2, 1a008df6 <_printf_common+0x2a>
1a008df0:	3301      	adds	r3, #1
1a008df2:	f8c9 3000 	str.w	r3, [r9]
1a008df6:	6823      	ldr	r3, [r4, #0]
1a008df8:	0699      	lsls	r1, r3, #26
1a008dfa:	bf42      	ittt	mi
1a008dfc:	f8d9 3000 	ldrmi.w	r3, [r9]
1a008e00:	3302      	addmi	r3, #2
1a008e02:	f8c9 3000 	strmi.w	r3, [r9]
1a008e06:	6825      	ldr	r5, [r4, #0]
1a008e08:	f015 0506 	ands.w	r5, r5, #6
1a008e0c:	d107      	bne.n	1a008e1e <_printf_common+0x52>
1a008e0e:	f104 0a19 	add.w	sl, r4, #25
1a008e12:	68e3      	ldr	r3, [r4, #12]
1a008e14:	f8d9 2000 	ldr.w	r2, [r9]
1a008e18:	1a9b      	subs	r3, r3, r2
1a008e1a:	42ab      	cmp	r3, r5
1a008e1c:	dc28      	bgt.n	1a008e70 <_printf_common+0xa4>
1a008e1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a008e22:	6822      	ldr	r2, [r4, #0]
1a008e24:	3300      	adds	r3, #0
1a008e26:	bf18      	it	ne
1a008e28:	2301      	movne	r3, #1
1a008e2a:	0692      	lsls	r2, r2, #26
1a008e2c:	d42d      	bmi.n	1a008e8a <_printf_common+0xbe>
1a008e2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a008e32:	4639      	mov	r1, r7
1a008e34:	4630      	mov	r0, r6
1a008e36:	47c0      	blx	r8
1a008e38:	3001      	adds	r0, #1
1a008e3a:	d020      	beq.n	1a008e7e <_printf_common+0xb2>
1a008e3c:	6823      	ldr	r3, [r4, #0]
1a008e3e:	68e5      	ldr	r5, [r4, #12]
1a008e40:	f8d9 2000 	ldr.w	r2, [r9]
1a008e44:	f003 0306 	and.w	r3, r3, #6
1a008e48:	2b04      	cmp	r3, #4
1a008e4a:	bf08      	it	eq
1a008e4c:	1aad      	subeq	r5, r5, r2
1a008e4e:	68a3      	ldr	r3, [r4, #8]
1a008e50:	6922      	ldr	r2, [r4, #16]
1a008e52:	bf0c      	ite	eq
1a008e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a008e58:	2500      	movne	r5, #0
1a008e5a:	4293      	cmp	r3, r2
1a008e5c:	bfc4      	itt	gt
1a008e5e:	1a9b      	subgt	r3, r3, r2
1a008e60:	18ed      	addgt	r5, r5, r3
1a008e62:	f04f 0900 	mov.w	r9, #0
1a008e66:	341a      	adds	r4, #26
1a008e68:	454d      	cmp	r5, r9
1a008e6a:	d11a      	bne.n	1a008ea2 <_printf_common+0xd6>
1a008e6c:	2000      	movs	r0, #0
1a008e6e:	e008      	b.n	1a008e82 <_printf_common+0xb6>
1a008e70:	2301      	movs	r3, #1
1a008e72:	4652      	mov	r2, sl
1a008e74:	4639      	mov	r1, r7
1a008e76:	4630      	mov	r0, r6
1a008e78:	47c0      	blx	r8
1a008e7a:	3001      	adds	r0, #1
1a008e7c:	d103      	bne.n	1a008e86 <_printf_common+0xba>
1a008e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a008e86:	3501      	adds	r5, #1
1a008e88:	e7c3      	b.n	1a008e12 <_printf_common+0x46>
1a008e8a:	18e1      	adds	r1, r4, r3
1a008e8c:	1c5a      	adds	r2, r3, #1
1a008e8e:	2030      	movs	r0, #48	; 0x30
1a008e90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a008e94:	4422      	add	r2, r4
1a008e96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a008e9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a008e9e:	3302      	adds	r3, #2
1a008ea0:	e7c5      	b.n	1a008e2e <_printf_common+0x62>
1a008ea2:	2301      	movs	r3, #1
1a008ea4:	4622      	mov	r2, r4
1a008ea6:	4639      	mov	r1, r7
1a008ea8:	4630      	mov	r0, r6
1a008eaa:	47c0      	blx	r8
1a008eac:	3001      	adds	r0, #1
1a008eae:	d0e6      	beq.n	1a008e7e <_printf_common+0xb2>
1a008eb0:	f109 0901 	add.w	r9, r9, #1
1a008eb4:	e7d8      	b.n	1a008e68 <_printf_common+0x9c>
1a008eb6:	Address 0x000000001a008eb6 is out of bounds.


1a008eb8 <_printf_i>:
1a008eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a008ebc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a008ec0:	460c      	mov	r4, r1
1a008ec2:	7e09      	ldrb	r1, [r1, #24]
1a008ec4:	b085      	sub	sp, #20
1a008ec6:	296e      	cmp	r1, #110	; 0x6e
1a008ec8:	4617      	mov	r7, r2
1a008eca:	4606      	mov	r6, r0
1a008ecc:	4698      	mov	r8, r3
1a008ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a008ed0:	f000 80b3 	beq.w	1a00903a <_printf_i+0x182>
1a008ed4:	d822      	bhi.n	1a008f1c <_printf_i+0x64>
1a008ed6:	2963      	cmp	r1, #99	; 0x63
1a008ed8:	d036      	beq.n	1a008f48 <_printf_i+0x90>
1a008eda:	d80a      	bhi.n	1a008ef2 <_printf_i+0x3a>
1a008edc:	2900      	cmp	r1, #0
1a008ede:	f000 80b9 	beq.w	1a009054 <_printf_i+0x19c>
1a008ee2:	2958      	cmp	r1, #88	; 0x58
1a008ee4:	f000 8083 	beq.w	1a008fee <_printf_i+0x136>
1a008ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a008eec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a008ef0:	e032      	b.n	1a008f58 <_printf_i+0xa0>
1a008ef2:	2964      	cmp	r1, #100	; 0x64
1a008ef4:	d001      	beq.n	1a008efa <_printf_i+0x42>
1a008ef6:	2969      	cmp	r1, #105	; 0x69
1a008ef8:	d1f6      	bne.n	1a008ee8 <_printf_i+0x30>
1a008efa:	6820      	ldr	r0, [r4, #0]
1a008efc:	6813      	ldr	r3, [r2, #0]
1a008efe:	0605      	lsls	r5, r0, #24
1a008f00:	f103 0104 	add.w	r1, r3, #4
1a008f04:	d52a      	bpl.n	1a008f5c <_printf_i+0xa4>
1a008f06:	681b      	ldr	r3, [r3, #0]
1a008f08:	6011      	str	r1, [r2, #0]
1a008f0a:	2b00      	cmp	r3, #0
1a008f0c:	da03      	bge.n	1a008f16 <_printf_i+0x5e>
1a008f0e:	222d      	movs	r2, #45	; 0x2d
1a008f10:	425b      	negs	r3, r3
1a008f12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a008f16:	486f      	ldr	r0, [pc, #444]	; (1a0090d4 <_printf_i+0x21c>)
1a008f18:	220a      	movs	r2, #10
1a008f1a:	e039      	b.n	1a008f90 <_printf_i+0xd8>
1a008f1c:	2973      	cmp	r1, #115	; 0x73
1a008f1e:	f000 809d 	beq.w	1a00905c <_printf_i+0x1a4>
1a008f22:	d808      	bhi.n	1a008f36 <_printf_i+0x7e>
1a008f24:	296f      	cmp	r1, #111	; 0x6f
1a008f26:	d020      	beq.n	1a008f6a <_printf_i+0xb2>
1a008f28:	2970      	cmp	r1, #112	; 0x70
1a008f2a:	d1dd      	bne.n	1a008ee8 <_printf_i+0x30>
1a008f2c:	6823      	ldr	r3, [r4, #0]
1a008f2e:	f043 0320 	orr.w	r3, r3, #32
1a008f32:	6023      	str	r3, [r4, #0]
1a008f34:	e003      	b.n	1a008f3e <_printf_i+0x86>
1a008f36:	2975      	cmp	r1, #117	; 0x75
1a008f38:	d017      	beq.n	1a008f6a <_printf_i+0xb2>
1a008f3a:	2978      	cmp	r1, #120	; 0x78
1a008f3c:	d1d4      	bne.n	1a008ee8 <_printf_i+0x30>
1a008f3e:	2378      	movs	r3, #120	; 0x78
1a008f40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a008f44:	4864      	ldr	r0, [pc, #400]	; (1a0090d8 <_printf_i+0x220>)
1a008f46:	e055      	b.n	1a008ff4 <_printf_i+0x13c>
1a008f48:	6813      	ldr	r3, [r2, #0]
1a008f4a:	1d19      	adds	r1, r3, #4
1a008f4c:	681b      	ldr	r3, [r3, #0]
1a008f4e:	6011      	str	r1, [r2, #0]
1a008f50:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a008f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a008f58:	2301      	movs	r3, #1
1a008f5a:	e08c      	b.n	1a009076 <_printf_i+0x1be>
1a008f5c:	681b      	ldr	r3, [r3, #0]
1a008f5e:	6011      	str	r1, [r2, #0]
1a008f60:	f010 0f40 	tst.w	r0, #64	; 0x40
1a008f64:	bf18      	it	ne
1a008f66:	b21b      	sxthne	r3, r3
1a008f68:	e7cf      	b.n	1a008f0a <_printf_i+0x52>
1a008f6a:	6813      	ldr	r3, [r2, #0]
1a008f6c:	6825      	ldr	r5, [r4, #0]
1a008f6e:	1d18      	adds	r0, r3, #4
1a008f70:	6010      	str	r0, [r2, #0]
1a008f72:	0628      	lsls	r0, r5, #24
1a008f74:	d501      	bpl.n	1a008f7a <_printf_i+0xc2>
1a008f76:	681b      	ldr	r3, [r3, #0]
1a008f78:	e002      	b.n	1a008f80 <_printf_i+0xc8>
1a008f7a:	0668      	lsls	r0, r5, #25
1a008f7c:	d5fb      	bpl.n	1a008f76 <_printf_i+0xbe>
1a008f7e:	881b      	ldrh	r3, [r3, #0]
1a008f80:	4854      	ldr	r0, [pc, #336]	; (1a0090d4 <_printf_i+0x21c>)
1a008f82:	296f      	cmp	r1, #111	; 0x6f
1a008f84:	bf14      	ite	ne
1a008f86:	220a      	movne	r2, #10
1a008f88:	2208      	moveq	r2, #8
1a008f8a:	2100      	movs	r1, #0
1a008f8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a008f90:	6865      	ldr	r5, [r4, #4]
1a008f92:	60a5      	str	r5, [r4, #8]
1a008f94:	2d00      	cmp	r5, #0
1a008f96:	f2c0 8095 	blt.w	1a0090c4 <_printf_i+0x20c>
1a008f9a:	6821      	ldr	r1, [r4, #0]
1a008f9c:	f021 0104 	bic.w	r1, r1, #4
1a008fa0:	6021      	str	r1, [r4, #0]
1a008fa2:	2b00      	cmp	r3, #0
1a008fa4:	d13d      	bne.n	1a009022 <_printf_i+0x16a>
1a008fa6:	2d00      	cmp	r5, #0
1a008fa8:	f040 808e 	bne.w	1a0090c8 <_printf_i+0x210>
1a008fac:	4665      	mov	r5, ip
1a008fae:	2a08      	cmp	r2, #8
1a008fb0:	d10b      	bne.n	1a008fca <_printf_i+0x112>
1a008fb2:	6823      	ldr	r3, [r4, #0]
1a008fb4:	07db      	lsls	r3, r3, #31
1a008fb6:	d508      	bpl.n	1a008fca <_printf_i+0x112>
1a008fb8:	6923      	ldr	r3, [r4, #16]
1a008fba:	6862      	ldr	r2, [r4, #4]
1a008fbc:	429a      	cmp	r2, r3
1a008fbe:	bfde      	ittt	le
1a008fc0:	2330      	movle	r3, #48	; 0x30
1a008fc2:	f805 3c01 	strble.w	r3, [r5, #-1]
1a008fc6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a008fca:	ebac 0305 	sub.w	r3, ip, r5
1a008fce:	6123      	str	r3, [r4, #16]
1a008fd0:	f8cd 8000 	str.w	r8, [sp]
1a008fd4:	463b      	mov	r3, r7
1a008fd6:	aa03      	add	r2, sp, #12
1a008fd8:	4621      	mov	r1, r4
1a008fda:	4630      	mov	r0, r6
1a008fdc:	f7ff fef6 	bl	1a008dcc <_printf_common>
1a008fe0:	3001      	adds	r0, #1
1a008fe2:	d14d      	bne.n	1a009080 <_printf_i+0x1c8>
1a008fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a008fe8:	b005      	add	sp, #20
1a008fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a008fee:	4839      	ldr	r0, [pc, #228]	; (1a0090d4 <_printf_i+0x21c>)
1a008ff0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a008ff4:	6813      	ldr	r3, [r2, #0]
1a008ff6:	6821      	ldr	r1, [r4, #0]
1a008ff8:	1d1d      	adds	r5, r3, #4
1a008ffa:	681b      	ldr	r3, [r3, #0]
1a008ffc:	6015      	str	r5, [r2, #0]
1a008ffe:	060a      	lsls	r2, r1, #24
1a009000:	d50b      	bpl.n	1a00901a <_printf_i+0x162>
1a009002:	07ca      	lsls	r2, r1, #31
1a009004:	bf44      	itt	mi
1a009006:	f041 0120 	orrmi.w	r1, r1, #32
1a00900a:	6021      	strmi	r1, [r4, #0]
1a00900c:	b91b      	cbnz	r3, 1a009016 <_printf_i+0x15e>
1a00900e:	6822      	ldr	r2, [r4, #0]
1a009010:	f022 0220 	bic.w	r2, r2, #32
1a009014:	6022      	str	r2, [r4, #0]
1a009016:	2210      	movs	r2, #16
1a009018:	e7b7      	b.n	1a008f8a <_printf_i+0xd2>
1a00901a:	064d      	lsls	r5, r1, #25
1a00901c:	bf48      	it	mi
1a00901e:	b29b      	uxthmi	r3, r3
1a009020:	e7ef      	b.n	1a009002 <_printf_i+0x14a>
1a009022:	4665      	mov	r5, ip
1a009024:	fbb3 f1f2 	udiv	r1, r3, r2
1a009028:	fb02 3311 	mls	r3, r2, r1, r3
1a00902c:	5cc3      	ldrb	r3, [r0, r3]
1a00902e:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a009032:	460b      	mov	r3, r1
1a009034:	2900      	cmp	r1, #0
1a009036:	d1f5      	bne.n	1a009024 <_printf_i+0x16c>
1a009038:	e7b9      	b.n	1a008fae <_printf_i+0xf6>
1a00903a:	6813      	ldr	r3, [r2, #0]
1a00903c:	6825      	ldr	r5, [r4, #0]
1a00903e:	6961      	ldr	r1, [r4, #20]
1a009040:	1d18      	adds	r0, r3, #4
1a009042:	6010      	str	r0, [r2, #0]
1a009044:	0628      	lsls	r0, r5, #24
1a009046:	681b      	ldr	r3, [r3, #0]
1a009048:	d501      	bpl.n	1a00904e <_printf_i+0x196>
1a00904a:	6019      	str	r1, [r3, #0]
1a00904c:	e002      	b.n	1a009054 <_printf_i+0x19c>
1a00904e:	066a      	lsls	r2, r5, #25
1a009050:	d5fb      	bpl.n	1a00904a <_printf_i+0x192>
1a009052:	8019      	strh	r1, [r3, #0]
1a009054:	2300      	movs	r3, #0
1a009056:	6123      	str	r3, [r4, #16]
1a009058:	4665      	mov	r5, ip
1a00905a:	e7b9      	b.n	1a008fd0 <_printf_i+0x118>
1a00905c:	6813      	ldr	r3, [r2, #0]
1a00905e:	1d19      	adds	r1, r3, #4
1a009060:	6011      	str	r1, [r2, #0]
1a009062:	681d      	ldr	r5, [r3, #0]
1a009064:	6862      	ldr	r2, [r4, #4]
1a009066:	2100      	movs	r1, #0
1a009068:	4628      	mov	r0, r5
1a00906a:	f000 f881 	bl	1a009170 <memchr>
1a00906e:	b108      	cbz	r0, 1a009074 <_printf_i+0x1bc>
1a009070:	1b40      	subs	r0, r0, r5
1a009072:	6060      	str	r0, [r4, #4]
1a009074:	6863      	ldr	r3, [r4, #4]
1a009076:	6123      	str	r3, [r4, #16]
1a009078:	2300      	movs	r3, #0
1a00907a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00907e:	e7a7      	b.n	1a008fd0 <_printf_i+0x118>
1a009080:	6923      	ldr	r3, [r4, #16]
1a009082:	462a      	mov	r2, r5
1a009084:	4639      	mov	r1, r7
1a009086:	4630      	mov	r0, r6
1a009088:	47c0      	blx	r8
1a00908a:	3001      	adds	r0, #1
1a00908c:	d0aa      	beq.n	1a008fe4 <_printf_i+0x12c>
1a00908e:	6823      	ldr	r3, [r4, #0]
1a009090:	079b      	lsls	r3, r3, #30
1a009092:	d413      	bmi.n	1a0090bc <_printf_i+0x204>
1a009094:	68e0      	ldr	r0, [r4, #12]
1a009096:	9b03      	ldr	r3, [sp, #12]
1a009098:	4298      	cmp	r0, r3
1a00909a:	bfb8      	it	lt
1a00909c:	4618      	movlt	r0, r3
1a00909e:	e7a3      	b.n	1a008fe8 <_printf_i+0x130>
1a0090a0:	2301      	movs	r3, #1
1a0090a2:	464a      	mov	r2, r9
1a0090a4:	4639      	mov	r1, r7
1a0090a6:	4630      	mov	r0, r6
1a0090a8:	47c0      	blx	r8
1a0090aa:	3001      	adds	r0, #1
1a0090ac:	d09a      	beq.n	1a008fe4 <_printf_i+0x12c>
1a0090ae:	3501      	adds	r5, #1
1a0090b0:	68e3      	ldr	r3, [r4, #12]
1a0090b2:	9a03      	ldr	r2, [sp, #12]
1a0090b4:	1a9b      	subs	r3, r3, r2
1a0090b6:	42ab      	cmp	r3, r5
1a0090b8:	dcf2      	bgt.n	1a0090a0 <_printf_i+0x1e8>
1a0090ba:	e7eb      	b.n	1a009094 <_printf_i+0x1dc>
1a0090bc:	2500      	movs	r5, #0
1a0090be:	f104 0919 	add.w	r9, r4, #25
1a0090c2:	e7f5      	b.n	1a0090b0 <_printf_i+0x1f8>
1a0090c4:	2b00      	cmp	r3, #0
1a0090c6:	d1ac      	bne.n	1a009022 <_printf_i+0x16a>
1a0090c8:	7803      	ldrb	r3, [r0, #0]
1a0090ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0090ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0090d2:	e76c      	b.n	1a008fae <_printf_i+0xf6>
1a0090d4:	1a00a04d 	.word	0x1a00a04d
1a0090d8:	1a00a05e 	.word	0x1a00a05e

1a0090dc <__sread>:
1a0090dc:	b510      	push	{r4, lr}
1a0090de:	460c      	mov	r4, r1
1a0090e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0090e4:	f7f7 fc7a 	bl	1a0009dc <_read_r>
1a0090e8:	2800      	cmp	r0, #0
1a0090ea:	bfab      	itete	ge
1a0090ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0090ee:	89a3      	ldrhlt	r3, [r4, #12]
1a0090f0:	181b      	addge	r3, r3, r0
1a0090f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0090f6:	bfac      	ite	ge
1a0090f8:	6563      	strge	r3, [r4, #84]	; 0x54
1a0090fa:	81a3      	strhlt	r3, [r4, #12]
1a0090fc:	bd10      	pop	{r4, pc}

1a0090fe <__swrite>:
1a0090fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a009102:	461f      	mov	r7, r3
1a009104:	898b      	ldrh	r3, [r1, #12]
1a009106:	05db      	lsls	r3, r3, #23
1a009108:	4605      	mov	r5, r0
1a00910a:	460c      	mov	r4, r1
1a00910c:	4616      	mov	r6, r2
1a00910e:	d505      	bpl.n	1a00911c <__swrite+0x1e>
1a009110:	2302      	movs	r3, #2
1a009112:	2200      	movs	r2, #0
1a009114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a009118:	f7f7 fc5b 	bl	1a0009d2 <_lseek_r>
1a00911c:	89a3      	ldrh	r3, [r4, #12]
1a00911e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a009122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a009126:	81a3      	strh	r3, [r4, #12]
1a009128:	4632      	mov	r2, r6
1a00912a:	463b      	mov	r3, r7
1a00912c:	4628      	mov	r0, r5
1a00912e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a009132:	f7f7 bc7a 	b.w	1a000a2a <_write_r>

1a009136 <__sseek>:
1a009136:	b510      	push	{r4, lr}
1a009138:	460c      	mov	r4, r1
1a00913a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00913e:	f7f7 fc48 	bl	1a0009d2 <_lseek_r>
1a009142:	1c43      	adds	r3, r0, #1
1a009144:	89a3      	ldrh	r3, [r4, #12]
1a009146:	bf15      	itete	ne
1a009148:	6560      	strne	r0, [r4, #84]	; 0x54
1a00914a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00914e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a009152:	81a3      	strheq	r3, [r4, #12]
1a009154:	bf18      	it	ne
1a009156:	81a3      	strhne	r3, [r4, #12]
1a009158:	bd10      	pop	{r4, pc}

1a00915a <__sclose>:
1a00915a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00915e:	f7f7 bc25 	b.w	1a0009ac <_close_r>
1a009162:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a009166:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00916a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00916e:	Address 0x000000001a00916e is out of bounds.


1a009170 <memchr>:
1a009170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a009174:	2a10      	cmp	r2, #16
1a009176:	db2b      	blt.n	1a0091d0 <memchr+0x60>
1a009178:	f010 0f07 	tst.w	r0, #7
1a00917c:	d008      	beq.n	1a009190 <memchr+0x20>
1a00917e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a009182:	3a01      	subs	r2, #1
1a009184:	428b      	cmp	r3, r1
1a009186:	d02d      	beq.n	1a0091e4 <memchr+0x74>
1a009188:	f010 0f07 	tst.w	r0, #7
1a00918c:	b342      	cbz	r2, 1a0091e0 <memchr+0x70>
1a00918e:	d1f6      	bne.n	1a00917e <memchr+0xe>
1a009190:	b4f0      	push	{r4, r5, r6, r7}
1a009192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a009196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00919a:	f022 0407 	bic.w	r4, r2, #7
1a00919e:	f07f 0700 	mvns.w	r7, #0
1a0091a2:	2300      	movs	r3, #0
1a0091a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0091a8:	3c08      	subs	r4, #8
1a0091aa:	ea85 0501 	eor.w	r5, r5, r1
1a0091ae:	ea86 0601 	eor.w	r6, r6, r1
1a0091b2:	fa85 f547 	uadd8	r5, r5, r7
1a0091b6:	faa3 f587 	sel	r5, r3, r7
1a0091ba:	fa86 f647 	uadd8	r6, r6, r7
1a0091be:	faa5 f687 	sel	r6, r5, r7
1a0091c2:	b98e      	cbnz	r6, 1a0091e8 <memchr+0x78>
1a0091c4:	d1ee      	bne.n	1a0091a4 <memchr+0x34>
1a0091c6:	bcf0      	pop	{r4, r5, r6, r7}
1a0091c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0091cc:	f002 0207 	and.w	r2, r2, #7
1a0091d0:	b132      	cbz	r2, 1a0091e0 <memchr+0x70>
1a0091d2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0091d6:	3a01      	subs	r2, #1
1a0091d8:	ea83 0301 	eor.w	r3, r3, r1
1a0091dc:	b113      	cbz	r3, 1a0091e4 <memchr+0x74>
1a0091de:	d1f8      	bne.n	1a0091d2 <memchr+0x62>
1a0091e0:	2000      	movs	r0, #0
1a0091e2:	4770      	bx	lr
1a0091e4:	3801      	subs	r0, #1
1a0091e6:	4770      	bx	lr
1a0091e8:	2d00      	cmp	r5, #0
1a0091ea:	bf06      	itte	eq
1a0091ec:	4635      	moveq	r5, r6
1a0091ee:	3803      	subeq	r0, #3
1a0091f0:	3807      	subne	r0, #7
1a0091f2:	f015 0f01 	tst.w	r5, #1
1a0091f6:	d107      	bne.n	1a009208 <memchr+0x98>
1a0091f8:	3001      	adds	r0, #1
1a0091fa:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0091fe:	bf02      	ittt	eq
1a009200:	3001      	addeq	r0, #1
1a009202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a009206:	3001      	addeq	r0, #1
1a009208:	bcf0      	pop	{r4, r5, r6, r7}
1a00920a:	3801      	subs	r0, #1
1a00920c:	4770      	bx	lr
1a00920e:	bf00      	nop
1a009210:	3a434453 	.word	0x3a434453
1a009214:	0000002f 	.word	0x0000002f
	...
1a009238:	6f726947 	.word	0x6f726947
1a00923c:	706f6373 	.word	0x706f6373
1a009240:	20203a6f 	.word	0x20203a6f
1a009244:	20202020 	.word	0x20202020
1a009248:	2c662528 	.word	0x2c662528
1a00924c:	2c662520 	.word	0x2c662520
1a009250:	29662520 	.word	0x29662520
1a009254:	5b202020 	.word	0x5b202020
1a009258:	2f646172 	.word	0x2f646172
1a00925c:	0a0d5d73 	.word	0x0a0d5d73
1a009260:	ffffff00 	.word	0xffffff00
1a009264:	3a434453 	.word	0x3a434453
1a009268:	00000000 	.word	0x00000000
1a00926c:	6f727245 	.word	0x6f727245
1a009270:	65642072 	.word	0x65642072
1a009274:	20445320 	.word	0x20445320
1a009278:	64726143 	.word	0x64726143
1a00927c:	6c616d20 	.word	0x6c616d20
1a009280:	6e6f6320 	.word	0x6e6f6320
1a009284:	61746365 	.word	0x61746365
1a009288:	000d6164 	.word	0x000d6164
1a00928c:	68637241 	.word	0x68637241
1a009290:	206f7669 	.word	0x206f7669
1a009294:	75672061 	.word	0x75672061
1a009298:	61647261 	.word	0x61647261
1a00929c:	6e652072 	.word	0x6e652072
1a0092a0:	63696d20 	.word	0x63696d20
1a0092a4:	44536f72 	.word	0x44536f72
1a0092a8:	7325203a 	.word	0x7325203a
1a0092ac:	000a0d20 	.word	0x000a0d20
1a0092b0:	6f746144 	.word	0x6f746144
1a0092b4:	72672073 	.word	0x72672073
1a0092b8:	64616261 	.word	0x64616261
1a0092bc:	6320736f 	.word	0x6320736f
1a0092c0:	6572726f 	.word	0x6572726f
1a0092c4:	6d617463 	.word	0x6d617463
1a0092c8:	65746e65 	.word	0x65746e65
1a0092cc:	ff000d2e 	.word	0xff000d2e
1a0092d0:	54524155 	.word	0x54524155
1a0092d4:	4253555f 	.word	0x4253555f
1a0092d8:	6e6f6320 	.word	0x6e6f6320
1a0092dc:	75676966 	.word	0x75676966
1a0092e0:	61646172 	.word	0x61646172
1a0092e4:	206e6520 	.word	0x206e6520
1a0092e8:	32353131 	.word	0x32353131
1a0092ec:	62203030 	.word	0x62203030
1a0092f0:	69647561 	.word	0x69647561
1a0092f4:	0d2e736f 	.word	0x0d2e736f
1a0092f8:	00000000 	.word	0x00000000
1a0092fc:	54524155 	.word	0x54524155
1a009300:	554c425f 	.word	0x554c425f
1a009304:	4f4f5445 	.word	0x4f4f5445
1a009308:	63204854 	.word	0x63204854
1a00930c:	69666e6f 	.word	0x69666e6f
1a009310:	61727567 	.word	0x61727567
1a009314:	65206164 	.word	0x65206164
1a009318:	3639206e 	.word	0x3639206e
1a00931c:	62203030 	.word	0x62203030
1a009320:	69647561 	.word	0x69647561
1a009324:	0d2e736f 	.word	0x0d2e736f
1a009328:	00000000 	.word	0x00000000
1a00932c:	63696e49 	.word	0x63696e49
1a009330:	696c6169 	.word	0x696c6169
1a009334:	646e617a 	.word	0x646e617a
1a009338:	4d49206f 	.word	0x4d49206f
1a00933c:	504d2055 	.word	0x504d2055
1a009340:	35323955 	.word	0x35323955
1a009344:	2e2e2e30 	.word	0x2e2e2e30
1a009348:	0000000d 	.word	0x0000000d
1a00934c:	20554d49 	.word	0x20554d49
1a009350:	3955504d 	.word	0x3955504d
1a009354:	20303532 	.word	0x20303532
1a009358:	69206f6e 	.word	0x69206f6e
1a00935c:	6963696e 	.word	0x6963696e
1a009360:	7a696c61 	.word	0x7a696c61
1a009364:	2c6f6461 	.word	0x2c6f6461
1a009368:	65686320 	.word	0x65686320
1a00936c:	65657571 	.word	0x65657571
1a009370:	73616c20 	.word	0x73616c20
1a009374:	6e6f6320 	.word	0x6e6f6320
1a009378:	6f697865 	.word	0x6f697865
1a00937c:	3a73656e 	.word	0x3a73656e
1a009380:	000d0a0d 	.word	0x000d0a0d
1a009384:	3955504d 	.word	0x3955504d
1a009388:	20303532 	.word	0x20303532
1a00938c:	2d2d2d2d 	.word	0x2d2d2d2d
1a009390:	55444520 	.word	0x55444520
1a009394:	4149432d 	.word	0x4149432d
1a009398:	584e2d41 	.word	0x584e2d41
1a00939c:	0d0a0d50 	.word	0x0d0a0d50
1a0093a0:	00000000 	.word	0x00000000
1a0093a4:	20202020 	.word	0x20202020
1a0093a8:	20434356 	.word	0x20434356
1a0093ac:	2d2d2d2d 	.word	0x2d2d2d2d
1a0093b0:	332e3320 	.word	0x332e3320
1a0093b4:	00000d56 	.word	0x00000d56
1a0093b8:	20202020 	.word	0x20202020
1a0093bc:	20444e47 	.word	0x20444e47
1a0093c0:	2d2d2d2d 	.word	0x2d2d2d2d
1a0093c4:	444e4720 	.word	0x444e4720
1a0093c8:	0000000d 	.word	0x0000000d
1a0093cc:	20202020 	.word	0x20202020
1a0093d0:	204c4353 	.word	0x204c4353
1a0093d4:	2d2d2d2d 	.word	0x2d2d2d2d
1a0093d8:	4c435320 	.word	0x4c435320
1a0093dc:	0000000d 	.word	0x0000000d
1a0093e0:	20202020 	.word	0x20202020
1a0093e4:	20414453 	.word	0x20414453
1a0093e8:	2d2d2d2d 	.word	0x2d2d2d2d
1a0093ec:	41445320 	.word	0x41445320
1a0093f0:	0000000d 	.word	0x0000000d
1a0093f4:	20202020 	.word	0x20202020
1a0093f8:	20304441 	.word	0x20304441
1a0093fc:	2d2d2d2d 	.word	0x2d2d2d2d
1a009400:	444e4720 	.word	0x444e4720
1a009404:	000d0a0d 	.word	0x000d0a0d
1a009408:	64206553 	.word	0x64206553
1a00940c:	65697465 	.word	0x65697465
1a009410:	6520656e 	.word	0x6520656e
1a009414:	7270206c 	.word	0x7270206c
1a009418:	6172676f 	.word	0x6172676f
1a00941c:	0d2e616d 	.word	0x0d2e616d
1a009420:	00000000 	.word	0x00000000
1a009424:	20554d49 	.word	0x20554d49
1a009428:	3955504d 	.word	0x3955504d
1a00942c:	20303532 	.word	0x20303532
1a009430:	63696e69 	.word	0x63696e69
1a009434:	696c6169 	.word	0x696c6169
1a009438:	6f64617a 	.word	0x6f64617a
1a00943c:	726f6320 	.word	0x726f6320
1a009440:	74636572 	.word	0x74636572
1a009444:	6e656d61 	.word	0x6e656d61
1a009448:	0d2e6574 	.word	0x0d2e6574
1a00944c:	00000d0a 	.word	0x00000d0a
1a009450:	73206f4e 	.word	0x73206f4e
1a009454:	75702065 	.word	0x75702065
1a009458:	63206f64 	.word	0x63206f64
1a00945c:	69666e6f 	.word	0x69666e6f
1a009460:	61727567 	.word	0x61727567
1a009464:	6c652072 	.word	0x6c652072
1a009468:	43545220 	.word	0x43545220
1a00946c:	00000d2e 	.word	0x00000d2e
1a009470:	20435452 	.word	0x20435452
1a009474:	666e6f63 	.word	0x666e6f63
1a009478:	72756769 	.word	0x72756769
1a00947c:	2e6f6461 	.word	0x2e6f6461
1a009480:	0000000d 	.word	0x0000000d
1a009484:	73206f4e 	.word	0x73206f4e
1a009488:	75702065 	.word	0x75702065
1a00948c:	6c206f64 	.word	0x6c206f64
1a009490:	20726565 	.word	0x20726565
1a009494:	52206c65 	.word	0x52206c65
1a009498:	0d2e4354 	.word	0x0d2e4354
1a00949c:	00000000 	.word	0x00000000
1a0094a0:	20435452 	.word	0x20435452
1a0094a4:	6469656c 	.word	0x6469656c
1a0094a8:	6f63206f 	.word	0x6f63206f
1a0094ac:	63657272 	.word	0x63657272
1a0094b0:	656d6174 	.word	0x656d6174
1a0094b4:	2e65746e 	.word	0x2e65746e
1a0094b8:	0000000d 	.word	0x0000000d
1a0094bc:	206e6f53 	.word	0x206e6f53
1a0094c0:	2073616c 	.word	0x2073616c
1a0094c4:	68206425 	.word	0x68206425
1a0094c8:	64252073 	.word	0x64252073
1a0094cc:	6e696d20 	.word	0x6e696d20
1a0094d0:	736f7475 	.word	0x736f7475
1a0094d4:	6c656420 	.word	0x6c656420
1a0094d8:	61696420 	.word	0x61696420
1a0094dc:	2f642520 	.word	0x2f642520
1a0094e0:	252f6425 	.word	0x252f6425
1a0094e4:	0a0d2e64 	.word	0x0a0d2e64
1a0094e8:	00000000 	.word	0x00000000
1a0094ec:	616c6f43 	.word	0x616c6f43
1a0094f0:	206f6e20 	.word	0x206f6e20
1a0094f4:	61657263 	.word	0x61657263
1a0094f8:	0d2e6164 	.word	0x0d2e6164
1a0094fc:	00000000 	.word	0x00000000
1a009500:	616c6f43 	.word	0x616c6f43
1a009504:	65726320 	.word	0x65726320
1a009508:	2e616461 	.word	0x2e616461
1a00950c:	0000000d 	.word	0x0000000d
1a009510:	61657243 	.word	0x61657243
1a009514:	6e6f6963 	.word	0x6e6f6963
1a009518:	20656420 	.word	0x20656420
1a00951c:	65726174 	.word	0x65726174
1a009520:	58542061 	.word	0x58542061
1a009524:	6c425852 	.word	0x6c425852
1a009528:	6f746575 	.word	0x6f746575
1a00952c:	0d68746f 	.word	0x0d68746f
1a009530:	00000000 	.word	0x00000000
1a009534:	65726154 	.word	0x65726154
1a009538:	52585461 	.word	0x52585461
1a00953c:	756c4258 	.word	0x756c4258
1a009540:	6f6f7465 	.word	0x6f6f7465
1a009544:	00006874 	.word	0x00006874
1a009548:	61657243 	.word	0x61657243
1a00954c:	6e6f6963 	.word	0x6e6f6963
1a009550:	20656420 	.word	0x20656420
1a009554:	65726174 	.word	0x65726174
1a009558:	61542061 	.word	0x61542061
1a00955c:	72576b73 	.word	0x72576b73
1a009560:	44657469 	.word	0x44657469
1a009564:	0d617461 	.word	0x0d617461
1a009568:	00000000 	.word	0x00000000
1a00956c:	6b736154 	.word	0x6b736154
1a009570:	74697257 	.word	0x74697257
1a009574:	74614465 	.word	0x74614465
1a009578:	00000061 	.word	0x00000061
1a00957c:	61657243 	.word	0x61657243
1a009580:	6e6f6963 	.word	0x6e6f6963
1a009584:	20656420 	.word	0x20656420
1a009588:	7420616c 	.word	0x7420616c
1a00958c:	61657261 	.word	0x61657261
1a009590:	73615420 	.word	0x73615420
1a009594:	6b736964 	.word	0x6b736964
1a009598:	6b636954 	.word	0x6b636954
1a00959c:	6b6f6f48 	.word	0x6b6f6f48
1a0095a0:	0000000d 	.word	0x0000000d
1a0095a4:	6b736154 	.word	0x6b736154
1a0095a8:	6b736964 	.word	0x6b736964
1a0095ac:	6b636954 	.word	0x6b636954
1a0095b0:	6b6f6f48 	.word	0x6b6f6f48
1a0095b4:	00000000 	.word	0x00000000
1a0095b8:	61657243 	.word	0x61657243
1a0095bc:	6e6f6963 	.word	0x6e6f6963
1a0095c0:	20656420 	.word	0x20656420
1a0095c4:	65726174 	.word	0x65726174
1a0095c8:	58522061 	.word	0x58522061
1a0095cc:	4354525f 	.word	0x4354525f
1a0095d0:	0000000d 	.word	0x0000000d
1a0095d4:	65726154 	.word	0x65726154
1a0095d8:	5f585261 	.word	0x5f585261
1a0095dc:	00435452 	.word	0x00435452
1a0095e0:	63696e49 	.word	0x63696e49
1a0095e4:	53206f69 	.word	0x53206f69
1a0095e8:	64656863 	.word	0x64656863
1a0095ec:	72656c75 	.word	0x72656c75
1a0095f0:	00000d2e 	.word	0x00000d2e
1a0095f4:	70206f4e 	.word	0x70206f4e
1a0095f8:	206f6475 	.word	0x206f6475
1a0095fc:	63696e69 	.word	0x63696e69
1a009600:	696c6169 	.word	0x696c6169
1a009604:	2072617a 	.word	0x2072617a
1a009608:	53206c65 	.word	0x53206c65
1a00960c:	64656863 	.word	0x64656863
1a009610:	72656c75 	.word	0x72656c75
1a009614:	21212120 	.word	0x21212120
1a009618:	ffff000d 	.word	0xffff000d

1a00961c <ExCvt>:
1a00961c:	41455543 43414141 49454545 41414949     CUEAAAACEEEIIIAA
1a00962c:	4f929245 55554f4f 4f554f59 9f9e4f9c     E..OOOUUYOUO.O..
1a00963c:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
1a00964c:	b3b2b1b0 414141b4 bbbab9b8 bfbebdbc     .....AAA........
1a00965c:	c3c2c1c0 4141c5c4 cbcac9c8 cfcecdcc     ......AA........
1a00966c:	4545d1d1 49494945 dbdad949 df49dddc     ..EEEIIII.....I.
1a00967c:	4f4fe14f e8e64f4f 555555e8 efee5959     O.OOOO...UUUYY..
1a00968c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

1a00969c <LfnOfs>:
1a00969c:	07050301 12100e09 1c181614 ffffff1e     ................

1a0096ac <VolumeStr>:
1a0096ac:	1a0096e0 1a0096e4 459076eb 54414658     .........v.EXFAT
1a0096bc:	00202020 00544146 33544146 ffff0032        .FAT.FAT32...
1a0096cc:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
1a0096dc:	ff005d5b 00434453 00425355              []..SDC.USB.

1a0096e8 <cvt1.5491>:
1a0096e8:	031a0061 031700e0 030700f8 000100ff     a...............
1a0096f8:	01000178 01320130 01390106 014a0110     x...0.2...9...J.
1a009708:	0179012e 01800106 0243004d 01820181     ..y.....M.C.....
1a009718:	01840182 01860184 01870187 018a0189     ................
1a009728:	018b018b 018e018d 0190018f 01910191     ................
1a009738:	01940193 019601f6 01980197 023d0198     ..............=.
1a009748:	019c019b 0220019d 01a0019f 01a201a0     ...... .........
1a009758:	01a401a2 01a601a4 01a701a7 01aa01a9     ................
1a009768:	01ac01ab 01ae01ac 01af01af 01b201b1     ................
1a009778:	01b301b3 01b501b5 01b801b7 01ba01b8     ................
1a009788:	01bc01bb 01be01bc 01c001f7 01c201c1     ................
1a009798:	01c401c3 01c401c5 01c801c7 01ca01c7     ................
1a0097a8:	01ca01cb 011001cd 000101dd 01de018e     ................
1a0097b8:	01f30112 01f10003 01f401f4 012801f8     ..............(.
1a0097c8:	01120222 0009023a 023b2c65 023d023b     "...:...e,;.;.=.
1a0097d8:	023f2c66 02410240 02460241 0253010a     f,?.@.A.A.F...S.
1a0097e8:	01810040 02550186 018a0189 018f0258     @.....U.....X...
1a0097f8:	0190025a 025d025c 025f025e 02610193     Z...\.].^._...a.
1a009808:	01940262 02650264 02670266 01960197     b...d.e.f.g.....
1a009818:	2c62026a 026d026c 019c026e 02710270     j.b,l.m.n...p.q.
1a009828:	0273019d 019f0274 02770276 02790278     ..s.t...v.w.x.y.
1a009838:	027b027a 2c64027c 027f027e 028101a6     z.{.|.d,~.......
1a009848:	01a90282 02850284 02870286 024401ae     ..............D.
1a009858:	01b201b1 028d0245 028f028e 02910290     ....E...........
1a009868:	037b01b7 03fd0003 03ff03fe 000403ac     ..{.............
1a009878:	03880386 038a0389 031103b1 000203c2     ................
1a009888:	03a303a3 030803c4 000303cc 038e038c     ................
1a009898:	03d8038f 03f20118 03f9000a 03f403f3     ................
1a0098a8:	03f603f5 03f703f7 03fa03f9 043003fa     ..............0.
1a0098b8:	04500320 04600710 048a0122 04c10136      .P...`."...6...
1a0098c8:	04cf010e 04c00001 014404d0 04260561     ..........D.a.&.
1a0098d8:	ffff0000                                ....

1a0098dc <cvt2.5492>:
1a0098dc:	00011d7d 1e002c63 1ea00196 1f00015a     }...c,......Z...
1a0098ec:	1f100608 1f200606 1f300608 1f400608     ...... ...0...@.
1a0098fc:	1f510606 1f590007 1f5b1f52 1f5d1f54     ..Q...Y.R.[.T.].
1a00990c:	1f5f1f56 06081f60 000e1f70 1fbb1fba     V._.`...p.......
1a00991c:	1fc91fc8 1fcb1fca 1fdb1fda 1ff91ff8     ................
1a00992c:	1feb1fea 1ffb1ffa 06081f80 06081f90     ................
1a00993c:	06081fa0 00041fb0 1fb91fb8 1fbc1fb2     ................
1a00994c:	00011fcc 1fd01fc3 1fe00602 1fe50602     ................
1a00995c:	1fec0001 00011ff3 214e1ffc 21320001     ..........N!..2!
1a00996c:	02102170 00012184 24d02183 2c30051a     p!...!...!.$..0,
1a00997c:	2c60042f 2c670102 2c750106 2c800102     /.`,..g,..u,...,
1a00998c:	2d000164 ff410826 0000031a              d..-&.A.....

1a009998 <uc850>:
1a009998:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
1a0099a8:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
1a0099b8:	00e600c9 00f400c6 00f200f6 00f900fb     ................
1a0099c8:	00d600ff 00f800dc 00d800a3 019200d7     ................
1a0099d8:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
1a0099e8:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
1a0099f8:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
1a009a08:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
1a009a18:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
1a009a28:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
1a009a38:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
1a009a48:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
1a009a58:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
1a009a68:	00da00de 00d900db 00dd00fd 00b400af     ................
1a009a78:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
1a009a88:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..
1a009a98:	454c4449 ffffff00 51726d54 ffffff00     IDLE....TmrQ....
1a009aa8:	20726d54 00637653 44535346 5b203a43     Tmr Svc.FSSDC: [
1a009ab8:	74696e49 6f4e205d 72616320 6e692064     Init] No card in
1a009ac8:	636f7320 2e74656b 00000a0d 44535346      socket.....FSSD
1a009ad8:	5b203a43 74696e49 6e49205d 61697469     C: [Init] Initia
1a009ae8:	617a696c 6e6f6974 67656220 2e736e69     lization begins.
1a009af8:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a009b08:	654e205d 61632077 73206472 75746174     ] New card statu
1a009b18:	4e203a73 76697461 6f4d2065 0d2e6564     s: Native Mode..
1a009b28:	0000000a 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a009b38:	654e205d 61632077 73206472 75746174     ] New card statu
1a009b48:	49203a73 6974696e 7a696c61 2e676e69     s: Initializing.
1a009b58:	00000a0d 44535346 5b203a43 74696e49     ....FSSDC: [Init
1a009b68:	654e205d 61632077 73206472 75746174     ] New card statu
1a009b78:	52203a73 79646165 61462820 43207473     s: Ready (Fast C
1a009b88:	6b636f6c 0a0d2e29 00000000 44535346     lock).......FSSD
1a009b98:	5b203a43 74696e49 654e205d 61632077     C: [Init] New ca
1a009ba8:	73206472 75746174 45203a73 726f7272     rd status: Error
1a009bb8:	6f4e2820 6e492074 61697469 657a696c      (Not Initialize
1a009bc8:	0d2e2964 ffff000a 44535346 5b203a43     d)......FSSDC: [
1a009bd8:	74434f49 43205d6c 20647261 20746f6e     IOCtl] Card not 
1a009be8:	74696e69 696c6169 2e64657a 00000a0d     initialized.....
1a009bf8:	44535346 5b203a43 74434f49 52205d6c     FSSDC: [IOCtl] R
1a009c08:	72757465 676e696e 72724520 0d2e726f     eturning Error..
1a009c18:	ffff000a 44535346 5b203a43 64616552     ....FSSDC: [Read
1a009c28:	6143205d 6e206472 6920746f 6974696e     ] Card not initi
1a009c38:	7a696c61 0d2e6465 ffff000a 44535346     alized......FSSD
1a009c48:	5b203a43 74697257 43205d65 20647261     C: [Write] Card 
1a009c58:	20746f6e 74696e69 696c6169 2e64657a     not initialized.
1a009c68:	00000a0d 44535346 5b203a43 74697257     ....FSSDC: [Writ
1a009c78:	43205d65 20647261 77207369 65746972     e] Card is write
1a009c88:	6f727020 74636574 0d2e6465 ffff000a      protected......
1a009c98:	44535346 5b203a43 74696e49 5d495053     FSSDC: [InitSPI]
1a009ca8:	77654e20 72616320 74732064 73757461      New card status
1a009cb8:	6e49203a 74726573 0d2e6465 ffff000a     : Inserted......

1a009cc8 <ExtRateIn>:
1a009cc8:	00000000                                ....

1a009ccc <GpioButtons>:
1a009ccc:	08000400 09010900                       ........

1a009cd4 <GpioLeds>:
1a009cd4:	01050005 0e000205 0c010b01              ............

1a009ce0 <GpioPorts>:
1a009ce0:	03030003 0f050403 05031005 07030603     ................
1a009cf0:	ffff0802                                ....

1a009cf4 <OscRateIn>:
1a009cf4:	00b71b00                                ....

1a009cf8 <InitClkStates>:
1a009cf8:	01010f01                                ....

1a009cfc <pinmuxing>:
1a009cfc:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a009d0c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a009d1c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a009d2c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a009d3c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a009d4c:	00d50301 00d50401 00160107 00560207     ..............V.
1a009d5c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a009d6c:	00570206                                ..W.

1a009d70 <UART_BClock>:
1a009d70:	01a201c2 01620182                       ......b.

1a009d78 <UART_PClock>:
1a009d78:	00820081 00a200a1 08040201 0f0f0f03     ................
1a009d88:	ffff00ff                                ....

1a009d8c <periph_to_base>:
1a009d8c:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a009d9c:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a009dac:	000100e0 01000100 01200003 00060120     .......... . ...
1a009dbc:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a009dcc:	01820013 00120182 01a201a2 01c20011     ................
1a009ddc:	001001c2 01e201e2 0202000f 000e0202     ................
1a009dec:	02220222 0223000d 001c0223              "."...#.#...

1a009df8 <InitClkStates>:
1a009df8:	00010100 00010909 0001090a 01010701     ................
1a009e08:	00010902 00010906 0101090c 0001090d     ................
1a009e18:	0001090e 0001090f 00010910 00010911     ................
1a009e28:	00010912 00010913 00011114 00011119     ................
1a009e38:	0001111a 0001111b                       ........

1a009e40 <lpcUarts>:
1a009e40:	40081000 06020406 00180205 40081000     ...@...........@
1a009e50:	09070509 00180706 40082000 00000000     ......... .@....
1a009e60:	00190000 400c1000 07060107 001a0602     .......@........
1a009e70:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a009e80:	02020302 001b0204 636b6974 69547265     ........tikcerTi
1a009e90:	0072656d                                mer.

1a009e94 <gpioPinsInit>:
1a009e94:	00000001 04020204 01040205 07010200     ................
1a009ea4:	0d030005 01000501 00020408 03040202     ................
1a009eb4:	04030200 00020000 03000407 0402030c     ................
1a009ec4:	01030905 02080504 03050403 05040402     ................
1a009ed4:	000c0604 0b060802 06070300 05030009     ................
1a009ee4:	05040706 0004060f 04040303 04040200     ................
1a009ef4:	05020005 02000604 04080406 0a040c05     ................
1a009f04:	010e0504 0a000003 00001401 0012010f     ................
1a009f14:	11010d00 010c0000 03000010 03000707     ................
1a009f24:	0001000f 00000100 06000000 0603000a     ................
1a009f34:	05040806 00050610 01060403 04000300     ................
1a009f44:	0d050409 00000401 000f010b 00010200     ................
1a009f54:	01040000 08000001 00000201 00060109     ................
1a009f64:	00020901 02000504 01050401 05040202     ................
1a009f74:	000a0202 0b020e00 020b0100 0c01000c     ................
1a009f84:	02000004 00010400 02040102 04020200     ................
1a009f94:	03020003 03000307 0004070b 05070c03     ................
1a009fa4:	070d0300 0e030006 05040102 00060401     ................
1a009fb4:	05040602 04050200 04020004 05040804     ................
1a009fc4:	0409040c 0a040d05 010e0504 08010005     ................

1a009fd4 <ultrasonicSensorsIrqMap>:
1a009fd4:	ff020100                                ....

1a009fd8 <__sf_fake_stderr>:
	...

1a009ff8 <__sf_fake_stdin>:
	...

1a00a018 <__sf_fake_stdout>:
	...

1a00a038 <_global_impure_ptr>:
1a00a038:	100000a4 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a00a048:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a00a058:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a00a068:	64636261 ff006665                       abcdef..
